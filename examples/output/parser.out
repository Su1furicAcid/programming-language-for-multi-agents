Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TYPE_TUPLE

Grammar

Rule 0     S' -> program
Rule 1     program -> program_body
Rule 2     program_body -> program_body_item program_body
Rule 3     program_body -> program_body_item
Rule 4     program_body_item -> statement
Rule 5     program_body_item -> agent_def
Rule 6     program_body_item -> connect_block
Rule 7     program_body_item -> func_def
Rule 8     var_decl_list -> var_decl var_decl_list
Rule 9     var_decl_list -> var_decl
Rule 10    var_decl -> identifier COLON type EQUALS expr
Rule 11    var_decl -> identifier COLON type
Rule 12    var_decl -> identifier EQUALS expr
Rule 13    var_decl -> identifier
Rule 14    type -> base_type
Rule 15    type -> list_type
Rule 16    type -> record_type
Rule 17    type -> func_ret_type
Rule 18    type -> union_type
Rule 19    type -> type_alias
Rule 20    base_type -> TYPE_STR
Rule 21    base_type -> TYPE_INT
Rule 22    base_type -> TYPE_FLOAT
Rule 23    base_type -> TYPE_BOOL
Rule 24    base_type -> TYPE_UNIT
Rule 25    type_alias -> IDENTIFIER
Rule 26    union_type -> TYPE_UNION LBRACKET type_list RBRACKET
Rule 27    func_ret_type -> LPAREN type_list RPAREN
Rule 28    type_list -> type
Rule 29    type_list -> type COMMA type_list
Rule 30    list_type -> TYPE_LIST LBRACKET type RBRACKET
Rule 31    record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE
Rule 32    field_decl_list -> field_decl COMMA field_decl_list
Rule 33    field_decl_list -> field_decl
Rule 34    field_decl -> identifier COLON type
Rule 35    agent_def -> AGENT identifier COLON INDENT agent_body DEDENT
Rule 36    agent_body -> agent_body_item agent_body
Rule 37    agent_body -> agent_body_item
Rule 38    agent_body_item -> input_block
Rule 39    agent_body_item -> output_block
Rule 40    agent_body_item -> model_block
Rule 41    agent_body_item -> statement
Rule 42    agent_body_item -> chat_block
Rule 43    input_block -> INPUT COLON INDENT var_decl_list DEDENT
Rule 44    input_block -> INPUT COLON INDENT error DEDENT
Rule 45    output_block -> OUTPUT COLON INDENT var_decl_list DEDENT
Rule 46    output_block -> OUTPUT COLON INDENT error DEDENT
Rule 47    model_block -> MODEL COLON constant
Rule 48    model_block -> MODEL COLON error
Rule 49    chat_block -> CHAT identifier COLON TRIPLE_STRING
Rule 50    chat_block -> CHAT COLON TRIPLE_STRING
Rule 51    connect_block -> CONNECT COLON INDENT connection_list DEDENT
Rule 52    connection_list -> connection connection_list
Rule 53    connection_list -> connection
Rule 54    connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
Rule 55    agent_ref -> identifier agent_ref_tail
Rule 56    agent_ref_tail -> DOT identifier agent_ref_tail
Rule 57    agent_ref_tail -> DOT OUTPUT agent_ref_tail
Rule 58    agent_ref_tail -> DOT INPUT agent_ref_tail
Rule 59    agent_ref_tail -> empty
Rule 60    func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
Rule 61    func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block
Rule 62    func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block
Rule 63    func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block
Rule 64    param_list -> param_decl param_list_tail
Rule 65    param_list -> empty
Rule 66    param_list_tail -> COMMA param_decl param_list_tail
Rule 67    param_list_tail -> empty
Rule 68    param_decl -> var_decl
Rule 69    stmt_block -> INDENT statement_list DEDENT
Rule 70    statement_list -> statement statement_list
Rule 71    statement_list -> statement
Rule 72    statement -> for_stmt
Rule 73    statement -> if_stmt
Rule 74    statement -> while_stmt
Rule 75    statement -> assign_stmt
Rule 76    statement -> break_stmt
Rule 77    statement -> continue_stmt
Rule 78    statement -> return_stmt
Rule 79    statement -> type_def_stmt
Rule 80    type_def_stmt -> TYPE IDENTIFIER EQUALS type
Rule 81    assign_stmt -> assign_target COLON type EQUALS expr
Rule 82    assign_stmt -> assign_target EQUALS expr
Rule 83    assign_stmt -> assign_target COLON type EQUALS error
Rule 84    assign_stmt -> assign_target EQUALS error
Rule 85    assign_target -> identifier
Rule 86    assign_target -> field_access
Rule 87    assign_target -> index_access
Rule 88    return_stmt -> RETURN expr
Rule 89    for_stmt -> FOR identifier IN expr COLON stmt_block
Rule 90    for_stmt -> FOR identifier IN error COLON stmt_block
Rule 91    break_stmt -> BREAK
Rule 92    continue_stmt -> CONTINUE
Rule 93    if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block
Rule 94    if_stmt -> IF expr COLON stmt_block
Rule 95    if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block
Rule 96    if_stmt -> IF error COLON stmt_block
Rule 97    while_stmt -> WHILE expr COLON stmt_block
Rule 98    while_stmt -> WHILE error COLON stmt_block
Rule 99    expr -> expr_head bin_op expr_tail
Rule 100   expr -> expr_head
Rule 101   expr_head -> atom
Rule 102   expr_head -> list_expr
Rule 103   expr_head -> record_expr
Rule 104   expr_head -> field_access
Rule 105   expr_head -> index_access
Rule 106   expr_head -> func_call
Rule 107   expr_tail -> expr
Rule 108   atom -> identifier
Rule 109   atom -> constant
Rule 110   identifier -> IDENTIFIER
Rule 111   constant -> STRING
Rule 112   constant -> NUMBER
Rule 113   list_expr -> LBRACKET list_elements RBRACKET
Rule 114   list_elements -> expr list_elements_tail
Rule 115   list_elements -> expr
Rule 116   list_elements_tail -> COMMA expr list_elements_tail
Rule 117   list_elements_tail -> COMMA expr
Rule 118   record_expr -> LBRACE record_elements RBRACE
Rule 119   record_elements -> instance_assign record_elements_tail
Rule 120   record_elements -> instance_assign
Rule 121   record_elements_tail -> COMMA instance_assign record_elements_tail
Rule 122   record_elements_tail -> COMMA instance_assign
Rule 123   instance_assign -> identifier EQUALS expr
Rule 124   index_access -> identifier LBRACKET expr RBRACKET
Rule 125   field_access -> identifier DOT identifier
Rule 126   func_call -> identifier LPAREN arg_list RPAREN
Rule 127   arg_list -> expr arg_list_tail
Rule 128   arg_list -> empty
Rule 129   arg_list_tail -> COMMA expr arg_list_tail
Rule 130   arg_list_tail -> empty
Rule 131   bin_op -> PLUS
Rule 132   bin_op -> MINUS
Rule 133   bin_op -> TIMES
Rule 134   bin_op -> DIVIDE
Rule 135   bin_op -> MOD
Rule 136   bin_op -> EQ
Rule 137   bin_op -> NEQ
Rule 138   bin_op -> LT
Rule 139   bin_op -> GT
Rule 140   bin_op -> LE
Rule 141   bin_op -> GE
Rule 142   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 35
ARROW                : 54 60 62
BREAK                : 91
CHAT                 : 49 50
COLON                : 10 11 34 35 43 44 45 46 47 48 49 50 51 54 60 61 62 63 81 83 89 90 93 93 94 95 95 96 97 98
COMMA                : 29 32 66 116 117 121 122 129
CONNECT              : 51
CONTINUE             : 92
DEDENT               : 35 43 44 45 46 51 54 69
DIVIDE               : 134
DOT                  : 56 57 58 125
ELSE                 : 93 95
EQ                   : 136
EQUALS               : 10 12 80 81 82 83 84 123
FOR                  : 89 90
FUN                  : 60 61 62 63
GE                   : 141
GT                   : 139
IDENTIFIER           : 25 80 110
IF                   : 93 94 95 96
IN                   : 89 90
INDENT               : 35 43 44 45 46 51 54 69
INPUT                : 43 44 58
LBRACE               : 31 118
LBRACKET             : 26 30 113 124
LE                   : 140
LPAREN               : 27 60 61 62 63 126
LT                   : 138
MINUS                : 132
MOD                  : 135
MODEL                : 47 48
NEQ                  : 137
NEWLINE              : 
NUMBER               : 112
OUTPUT               : 45 46 57
PLUS                 : 131
RBRACE               : 31 118
RBRACKET             : 26 30 113 124
RETURN               : 88
RPAREN               : 27 60 61 62 63 126
STRING               : 111
TIMES                : 133
TRIPLE_STRING        : 49 50
TYPE                 : 80
TYPE_BOOL            : 23
TYPE_FLOAT           : 22
TYPE_INT             : 21
TYPE_LIST            : 30
TYPE_RECORD          : 31
TYPE_STR             : 20
TYPE_TUPLE           : 
TYPE_UNION           : 26
TYPE_UNIT            : 24
WHILE                : 97 98
error                : 44 46 48 62 63 83 84 90 95 96 98

Nonterminals, with rules where they appear

agent_body           : 35 36
agent_body_item      : 36 37
agent_def            : 5
agent_ref            : 54 54
agent_ref_tail       : 55 56 57 58
arg_list             : 126
arg_list_tail        : 127 129
assign_stmt          : 75
assign_target        : 81 82 83 84
atom                 : 101
base_type            : 14
bin_op               : 99
break_stmt           : 76
chat_block           : 42
connect_block        : 6
connection           : 52 53
connection_list      : 51 52
constant             : 47 109
continue_stmt        : 77
empty                : 59 65 67 128 130
expr                 : 10 12 81 82 88 89 93 94 97 107 114 115 116 117 123 124 127 129
expr_head            : 99 100
expr_tail            : 99
field_access         : 86 104
field_decl           : 32 33
field_decl_list      : 31 32
for_stmt             : 72
func_call            : 106
func_def             : 7
func_ret_type        : 17
identifier           : 10 11 12 13 34 35 49 54 55 56 60 61 62 63 85 89 90 108 123 124 125 125 126
if_stmt              : 73
index_access         : 87 105
input_block          : 38
instance_assign      : 119 120 121 122
list_elements        : 113
list_elements_tail   : 114 116
list_expr            : 102
list_type            : 15
model_block          : 40
output_block         : 39
param_decl           : 64 66
param_list           : 60 61
param_list_tail      : 64 66
program              : 0
program_body         : 1 2
program_body_item    : 2 3
record_elements      : 118
record_elements_tail : 119 121
record_expr          : 103
record_type          : 16
return_stmt          : 78
statement            : 4 41 70 71
statement_list       : 69 70
stmt_block           : 60 61 62 63 89 90 93 93 94 95 95 96 97 98
type                 : 10 11 28 29 30 34 54 60 62 80 81 83
type_alias           : 19
type_def_stmt        : 79
type_list            : 26 27 29
union_type           : 18
var_decl             : 8 9 68
var_decl_list        : 8 43 45
while_stmt           : 74


state 0

    (0) S' -> . program
    (1) program -> . program_body
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (72) statement -> . for_stmt
    (73) statement -> . if_stmt
    (74) statement -> . while_stmt
    (75) statement -> . assign_stmt
    (76) statement -> . break_stmt
    (77) statement -> . continue_stmt
    (78) statement -> . return_stmt
    (79) statement -> . type_def_stmt
    (35) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (51) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (60) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (61) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (62) func_def -> . FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block
    (63) func_def -> . FUN identifier LPAREN error RPAREN COLON stmt_block
    (89) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (90) for_stmt -> . FOR identifier IN error COLON stmt_block
    (93) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> . IF expr COLON stmt_block
    (95) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> . IF error COLON stmt_block
    (97) while_stmt -> . WHILE expr COLON stmt_block
    (98) while_stmt -> . WHILE error COLON stmt_block
    (81) assign_stmt -> . assign_target COLON type EQUALS expr
    (82) assign_stmt -> . assign_target EQUALS expr
    (83) assign_stmt -> . assign_target COLON type EQUALS error
    (84) assign_stmt -> . assign_target EQUALS error
    (91) break_stmt -> . BREAK
    (92) continue_stmt -> . CONTINUE
    (88) return_stmt -> . RETURN expr
    (80) type_def_stmt -> . TYPE IDENTIFIER EQUALS type
    (85) assign_target -> . identifier
    (86) assign_target -> . field_access
    (87) assign_target -> . index_access
    (110) identifier -> . IDENTIFIER
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET

    AGENT           shift and go to state 16
    CONNECT         shift and go to state 18
    FUN             shift and go to state 19
    FOR             shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    TYPE            shift and go to state 27
    IDENTIFIER      shift and go to state 28

    program                        shift and go to state 1
    program_body                   shift and go to state 2
    program_body_item              shift and go to state 3
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    type_def_stmt                  shift and go to state 15
    identifier                     shift and go to state 17
    assign_target                  shift and go to state 23
    field_access                   shift and go to state 29
    index_access                   shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (1) program -> program_body .

    $end            reduce using rule 1 (program -> program_body .)


state 3

    (2) program_body -> program_body_item . program_body
    (3) program_body -> program_body_item .
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (72) statement -> . for_stmt
    (73) statement -> . if_stmt
    (74) statement -> . while_stmt
    (75) statement -> . assign_stmt
    (76) statement -> . break_stmt
    (77) statement -> . continue_stmt
    (78) statement -> . return_stmt
    (79) statement -> . type_def_stmt
    (35) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (51) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (60) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (61) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (62) func_def -> . FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block
    (63) func_def -> . FUN identifier LPAREN error RPAREN COLON stmt_block
    (89) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (90) for_stmt -> . FOR identifier IN error COLON stmt_block
    (93) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> . IF expr COLON stmt_block
    (95) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> . IF error COLON stmt_block
    (97) while_stmt -> . WHILE expr COLON stmt_block
    (98) while_stmt -> . WHILE error COLON stmt_block
    (81) assign_stmt -> . assign_target COLON type EQUALS expr
    (82) assign_stmt -> . assign_target EQUALS expr
    (83) assign_stmt -> . assign_target COLON type EQUALS error
    (84) assign_stmt -> . assign_target EQUALS error
    (91) break_stmt -> . BREAK
    (92) continue_stmt -> . CONTINUE
    (88) return_stmt -> . RETURN expr
    (80) type_def_stmt -> . TYPE IDENTIFIER EQUALS type
    (85) assign_target -> . identifier
    (86) assign_target -> . field_access
    (87) assign_target -> . index_access
    (110) identifier -> . IDENTIFIER
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET

    $end            reduce using rule 3 (program_body -> program_body_item .)
    AGENT           shift and go to state 16
    CONNECT         shift and go to state 18
    FUN             shift and go to state 19
    FOR             shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    TYPE            shift and go to state 27
    IDENTIFIER      shift and go to state 28

    program_body_item              shift and go to state 3
    program_body                   shift and go to state 31
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    type_def_stmt                  shift and go to state 15
    identifier                     shift and go to state 17
    assign_target                  shift and go to state 23
    field_access                   shift and go to state 29
    index_access                   shift and go to state 30

state 4

    (4) program_body_item -> statement .

    AGENT           reduce using rule 4 (program_body_item -> statement .)
    CONNECT         reduce using rule 4 (program_body_item -> statement .)
    FUN             reduce using rule 4 (program_body_item -> statement .)
    FOR             reduce using rule 4 (program_body_item -> statement .)
    IF              reduce using rule 4 (program_body_item -> statement .)
    WHILE           reduce using rule 4 (program_body_item -> statement .)
    BREAK           reduce using rule 4 (program_body_item -> statement .)
    CONTINUE        reduce using rule 4 (program_body_item -> statement .)
    RETURN          reduce using rule 4 (program_body_item -> statement .)
    TYPE            reduce using rule 4 (program_body_item -> statement .)
    IDENTIFIER      reduce using rule 4 (program_body_item -> statement .)
    $end            reduce using rule 4 (program_body_item -> statement .)


state 5

    (5) program_body_item -> agent_def .

    AGENT           reduce using rule 5 (program_body_item -> agent_def .)
    CONNECT         reduce using rule 5 (program_body_item -> agent_def .)
    FUN             reduce using rule 5 (program_body_item -> agent_def .)
    FOR             reduce using rule 5 (program_body_item -> agent_def .)
    IF              reduce using rule 5 (program_body_item -> agent_def .)
    WHILE           reduce using rule 5 (program_body_item -> agent_def .)
    BREAK           reduce using rule 5 (program_body_item -> agent_def .)
    CONTINUE        reduce using rule 5 (program_body_item -> agent_def .)
    RETURN          reduce using rule 5 (program_body_item -> agent_def .)
    TYPE            reduce using rule 5 (program_body_item -> agent_def .)
    IDENTIFIER      reduce using rule 5 (program_body_item -> agent_def .)
    $end            reduce using rule 5 (program_body_item -> agent_def .)


state 6

    (6) program_body_item -> connect_block .

    AGENT           reduce using rule 6 (program_body_item -> connect_block .)
    CONNECT         reduce using rule 6 (program_body_item -> connect_block .)
    FUN             reduce using rule 6 (program_body_item -> connect_block .)
    FOR             reduce using rule 6 (program_body_item -> connect_block .)
    IF              reduce using rule 6 (program_body_item -> connect_block .)
    WHILE           reduce using rule 6 (program_body_item -> connect_block .)
    BREAK           reduce using rule 6 (program_body_item -> connect_block .)
    CONTINUE        reduce using rule 6 (program_body_item -> connect_block .)
    RETURN          reduce using rule 6 (program_body_item -> connect_block .)
    TYPE            reduce using rule 6 (program_body_item -> connect_block .)
    IDENTIFIER      reduce using rule 6 (program_body_item -> connect_block .)
    $end            reduce using rule 6 (program_body_item -> connect_block .)


state 7

    (7) program_body_item -> func_def .

    AGENT           reduce using rule 7 (program_body_item -> func_def .)
    CONNECT         reduce using rule 7 (program_body_item -> func_def .)
    FUN             reduce using rule 7 (program_body_item -> func_def .)
    FOR             reduce using rule 7 (program_body_item -> func_def .)
    IF              reduce using rule 7 (program_body_item -> func_def .)
    WHILE           reduce using rule 7 (program_body_item -> func_def .)
    BREAK           reduce using rule 7 (program_body_item -> func_def .)
    CONTINUE        reduce using rule 7 (program_body_item -> func_def .)
    RETURN          reduce using rule 7 (program_body_item -> func_def .)
    TYPE            reduce using rule 7 (program_body_item -> func_def .)
    IDENTIFIER      reduce using rule 7 (program_body_item -> func_def .)
    $end            reduce using rule 7 (program_body_item -> func_def .)


state 8

    (72) statement -> for_stmt .

    AGENT           reduce using rule 72 (statement -> for_stmt .)
    CONNECT         reduce using rule 72 (statement -> for_stmt .)
    FUN             reduce using rule 72 (statement -> for_stmt .)
    FOR             reduce using rule 72 (statement -> for_stmt .)
    IF              reduce using rule 72 (statement -> for_stmt .)
    WHILE           reduce using rule 72 (statement -> for_stmt .)
    BREAK           reduce using rule 72 (statement -> for_stmt .)
    CONTINUE        reduce using rule 72 (statement -> for_stmt .)
    RETURN          reduce using rule 72 (statement -> for_stmt .)
    TYPE            reduce using rule 72 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 72 (statement -> for_stmt .)
    $end            reduce using rule 72 (statement -> for_stmt .)
    INPUT           reduce using rule 72 (statement -> for_stmt .)
    OUTPUT          reduce using rule 72 (statement -> for_stmt .)
    MODEL           reduce using rule 72 (statement -> for_stmt .)
    CHAT            reduce using rule 72 (statement -> for_stmt .)
    DEDENT          reduce using rule 72 (statement -> for_stmt .)


state 9

    (73) statement -> if_stmt .

    AGENT           reduce using rule 73 (statement -> if_stmt .)
    CONNECT         reduce using rule 73 (statement -> if_stmt .)
    FUN             reduce using rule 73 (statement -> if_stmt .)
    FOR             reduce using rule 73 (statement -> if_stmt .)
    IF              reduce using rule 73 (statement -> if_stmt .)
    WHILE           reduce using rule 73 (statement -> if_stmt .)
    BREAK           reduce using rule 73 (statement -> if_stmt .)
    CONTINUE        reduce using rule 73 (statement -> if_stmt .)
    RETURN          reduce using rule 73 (statement -> if_stmt .)
    TYPE            reduce using rule 73 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 73 (statement -> if_stmt .)
    $end            reduce using rule 73 (statement -> if_stmt .)
    INPUT           reduce using rule 73 (statement -> if_stmt .)
    OUTPUT          reduce using rule 73 (statement -> if_stmt .)
    MODEL           reduce using rule 73 (statement -> if_stmt .)
    CHAT            reduce using rule 73 (statement -> if_stmt .)
    DEDENT          reduce using rule 73 (statement -> if_stmt .)


state 10

    (74) statement -> while_stmt .

    AGENT           reduce using rule 74 (statement -> while_stmt .)
    CONNECT         reduce using rule 74 (statement -> while_stmt .)
    FUN             reduce using rule 74 (statement -> while_stmt .)
    FOR             reduce using rule 74 (statement -> while_stmt .)
    IF              reduce using rule 74 (statement -> while_stmt .)
    WHILE           reduce using rule 74 (statement -> while_stmt .)
    BREAK           reduce using rule 74 (statement -> while_stmt .)
    CONTINUE        reduce using rule 74 (statement -> while_stmt .)
    RETURN          reduce using rule 74 (statement -> while_stmt .)
    TYPE            reduce using rule 74 (statement -> while_stmt .)
    IDENTIFIER      reduce using rule 74 (statement -> while_stmt .)
    $end            reduce using rule 74 (statement -> while_stmt .)
    INPUT           reduce using rule 74 (statement -> while_stmt .)
    OUTPUT          reduce using rule 74 (statement -> while_stmt .)
    MODEL           reduce using rule 74 (statement -> while_stmt .)
    CHAT            reduce using rule 74 (statement -> while_stmt .)
    DEDENT          reduce using rule 74 (statement -> while_stmt .)


state 11

    (75) statement -> assign_stmt .

    AGENT           reduce using rule 75 (statement -> assign_stmt .)
    CONNECT         reduce using rule 75 (statement -> assign_stmt .)
    FUN             reduce using rule 75 (statement -> assign_stmt .)
    FOR             reduce using rule 75 (statement -> assign_stmt .)
    IF              reduce using rule 75 (statement -> assign_stmt .)
    WHILE           reduce using rule 75 (statement -> assign_stmt .)
    BREAK           reduce using rule 75 (statement -> assign_stmt .)
    CONTINUE        reduce using rule 75 (statement -> assign_stmt .)
    RETURN          reduce using rule 75 (statement -> assign_stmt .)
    TYPE            reduce using rule 75 (statement -> assign_stmt .)
    IDENTIFIER      reduce using rule 75 (statement -> assign_stmt .)
    $end            reduce using rule 75 (statement -> assign_stmt .)
    INPUT           reduce using rule 75 (statement -> assign_stmt .)
    OUTPUT          reduce using rule 75 (statement -> assign_stmt .)
    MODEL           reduce using rule 75 (statement -> assign_stmt .)
    CHAT            reduce using rule 75 (statement -> assign_stmt .)
    DEDENT          reduce using rule 75 (statement -> assign_stmt .)


state 12

    (76) statement -> break_stmt .

    AGENT           reduce using rule 76 (statement -> break_stmt .)
    CONNECT         reduce using rule 76 (statement -> break_stmt .)
    FUN             reduce using rule 76 (statement -> break_stmt .)
    FOR             reduce using rule 76 (statement -> break_stmt .)
    IF              reduce using rule 76 (statement -> break_stmt .)
    WHILE           reduce using rule 76 (statement -> break_stmt .)
    BREAK           reduce using rule 76 (statement -> break_stmt .)
    CONTINUE        reduce using rule 76 (statement -> break_stmt .)
    RETURN          reduce using rule 76 (statement -> break_stmt .)
    TYPE            reduce using rule 76 (statement -> break_stmt .)
    IDENTIFIER      reduce using rule 76 (statement -> break_stmt .)
    $end            reduce using rule 76 (statement -> break_stmt .)
    INPUT           reduce using rule 76 (statement -> break_stmt .)
    OUTPUT          reduce using rule 76 (statement -> break_stmt .)
    MODEL           reduce using rule 76 (statement -> break_stmt .)
    CHAT            reduce using rule 76 (statement -> break_stmt .)
    DEDENT          reduce using rule 76 (statement -> break_stmt .)


state 13

    (77) statement -> continue_stmt .

    AGENT           reduce using rule 77 (statement -> continue_stmt .)
    CONNECT         reduce using rule 77 (statement -> continue_stmt .)
    FUN             reduce using rule 77 (statement -> continue_stmt .)
    FOR             reduce using rule 77 (statement -> continue_stmt .)
    IF              reduce using rule 77 (statement -> continue_stmt .)
    WHILE           reduce using rule 77 (statement -> continue_stmt .)
    BREAK           reduce using rule 77 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 77 (statement -> continue_stmt .)
    RETURN          reduce using rule 77 (statement -> continue_stmt .)
    TYPE            reduce using rule 77 (statement -> continue_stmt .)
    IDENTIFIER      reduce using rule 77 (statement -> continue_stmt .)
    $end            reduce using rule 77 (statement -> continue_stmt .)
    INPUT           reduce using rule 77 (statement -> continue_stmt .)
    OUTPUT          reduce using rule 77 (statement -> continue_stmt .)
    MODEL           reduce using rule 77 (statement -> continue_stmt .)
    CHAT            reduce using rule 77 (statement -> continue_stmt .)
    DEDENT          reduce using rule 77 (statement -> continue_stmt .)


state 14

    (78) statement -> return_stmt .

    AGENT           reduce using rule 78 (statement -> return_stmt .)
    CONNECT         reduce using rule 78 (statement -> return_stmt .)
    FUN             reduce using rule 78 (statement -> return_stmt .)
    FOR             reduce using rule 78 (statement -> return_stmt .)
    IF              reduce using rule 78 (statement -> return_stmt .)
    WHILE           reduce using rule 78 (statement -> return_stmt .)
    BREAK           reduce using rule 78 (statement -> return_stmt .)
    CONTINUE        reduce using rule 78 (statement -> return_stmt .)
    RETURN          reduce using rule 78 (statement -> return_stmt .)
    TYPE            reduce using rule 78 (statement -> return_stmt .)
    IDENTIFIER      reduce using rule 78 (statement -> return_stmt .)
    $end            reduce using rule 78 (statement -> return_stmt .)
    INPUT           reduce using rule 78 (statement -> return_stmt .)
    OUTPUT          reduce using rule 78 (statement -> return_stmt .)
    MODEL           reduce using rule 78 (statement -> return_stmt .)
    CHAT            reduce using rule 78 (statement -> return_stmt .)
    DEDENT          reduce using rule 78 (statement -> return_stmt .)


state 15

    (79) statement -> type_def_stmt .

    AGENT           reduce using rule 79 (statement -> type_def_stmt .)
    CONNECT         reduce using rule 79 (statement -> type_def_stmt .)
    FUN             reduce using rule 79 (statement -> type_def_stmt .)
    FOR             reduce using rule 79 (statement -> type_def_stmt .)
    IF              reduce using rule 79 (statement -> type_def_stmt .)
    WHILE           reduce using rule 79 (statement -> type_def_stmt .)
    BREAK           reduce using rule 79 (statement -> type_def_stmt .)
    CONTINUE        reduce using rule 79 (statement -> type_def_stmt .)
    RETURN          reduce using rule 79 (statement -> type_def_stmt .)
    TYPE            reduce using rule 79 (statement -> type_def_stmt .)
    IDENTIFIER      reduce using rule 79 (statement -> type_def_stmt .)
    $end            reduce using rule 79 (statement -> type_def_stmt .)
    INPUT           reduce using rule 79 (statement -> type_def_stmt .)
    OUTPUT          reduce using rule 79 (statement -> type_def_stmt .)
    MODEL           reduce using rule 79 (statement -> type_def_stmt .)
    CHAT            reduce using rule 79 (statement -> type_def_stmt .)
    DEDENT          reduce using rule 79 (statement -> type_def_stmt .)


state 16

    (35) agent_def -> AGENT . identifier COLON INDENT agent_body DEDENT
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 32

state 17

    (85) assign_target -> identifier .
    (125) field_access -> identifier . DOT identifier
    (124) index_access -> identifier . LBRACKET expr RBRACKET

    COLON           reduce using rule 85 (assign_target -> identifier .)
    EQUALS          reduce using rule 85 (assign_target -> identifier .)
    DOT             shift and go to state 33
    LBRACKET        shift and go to state 34


state 18

    (51) connect_block -> CONNECT . COLON INDENT connection_list DEDENT

    COLON           shift and go to state 35


state 19

    (60) func_def -> FUN . identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN . identifier LPAREN param_list RPAREN COLON stmt_block
    (62) func_def -> FUN . identifier LPAREN error RPAREN ARROW type COLON stmt_block
    (63) func_def -> FUN . identifier LPAREN error RPAREN COLON stmt_block
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 36

state 20

    (89) for_stmt -> FOR . identifier IN expr COLON stmt_block
    (90) for_stmt -> FOR . identifier IN error COLON stmt_block
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 37

state 21

    (93) if_stmt -> IF . expr COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> IF . expr COLON stmt_block
    (95) if_stmt -> IF . error COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> IF . error COLON stmt_block
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    error           shift and go to state 39
    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr                           shift and go to state 38
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 22

    (97) while_stmt -> WHILE . expr COLON stmt_block
    (98) while_stmt -> WHILE . error COLON stmt_block
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    error           shift and go to state 54
    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr                           shift and go to state 53
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 23

    (81) assign_stmt -> assign_target . COLON type EQUALS expr
    (82) assign_stmt -> assign_target . EQUALS expr
    (83) assign_stmt -> assign_target . COLON type EQUALS error
    (84) assign_stmt -> assign_target . EQUALS error

    COLON           shift and go to state 55
    EQUALS          shift and go to state 56


state 24

    (91) break_stmt -> BREAK .

    AGENT           reduce using rule 91 (break_stmt -> BREAK .)
    CONNECT         reduce using rule 91 (break_stmt -> BREAK .)
    FUN             reduce using rule 91 (break_stmt -> BREAK .)
    FOR             reduce using rule 91 (break_stmt -> BREAK .)
    IF              reduce using rule 91 (break_stmt -> BREAK .)
    WHILE           reduce using rule 91 (break_stmt -> BREAK .)
    BREAK           reduce using rule 91 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 91 (break_stmt -> BREAK .)
    RETURN          reduce using rule 91 (break_stmt -> BREAK .)
    TYPE            reduce using rule 91 (break_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 91 (break_stmt -> BREAK .)
    $end            reduce using rule 91 (break_stmt -> BREAK .)
    INPUT           reduce using rule 91 (break_stmt -> BREAK .)
    OUTPUT          reduce using rule 91 (break_stmt -> BREAK .)
    MODEL           reduce using rule 91 (break_stmt -> BREAK .)
    CHAT            reduce using rule 91 (break_stmt -> BREAK .)
    DEDENT          reduce using rule 91 (break_stmt -> BREAK .)


state 25

    (92) continue_stmt -> CONTINUE .

    AGENT           reduce using rule 92 (continue_stmt -> CONTINUE .)
    CONNECT         reduce using rule 92 (continue_stmt -> CONTINUE .)
    FUN             reduce using rule 92 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 92 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 92 (continue_stmt -> CONTINUE .)
    WHILE           reduce using rule 92 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 92 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 92 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 92 (continue_stmt -> CONTINUE .)
    TYPE            reduce using rule 92 (continue_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 92 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 92 (continue_stmt -> CONTINUE .)
    INPUT           reduce using rule 92 (continue_stmt -> CONTINUE .)
    OUTPUT          reduce using rule 92 (continue_stmt -> CONTINUE .)
    MODEL           reduce using rule 92 (continue_stmt -> CONTINUE .)
    CHAT            reduce using rule 92 (continue_stmt -> CONTINUE .)
    DEDENT          reduce using rule 92 (continue_stmt -> CONTINUE .)


state 26

    (88) return_stmt -> RETURN . expr
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr                           shift and go to state 57
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 27

    (80) type_def_stmt -> TYPE . IDENTIFIER EQUALS type

    IDENTIFIER      shift and go to state 58


state 28

    (110) identifier -> IDENTIFIER .

    DOT             reduce using rule 110 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 110 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 110 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 110 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 110 (identifier -> IDENTIFIER .)
    IN              reduce using rule 110 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 110 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 110 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 110 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 110 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 110 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 110 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 110 (identifier -> IDENTIFIER .)
    LT              reduce using rule 110 (identifier -> IDENTIFIER .)
    GT              reduce using rule 110 (identifier -> IDENTIFIER .)
    LE              reduce using rule 110 (identifier -> IDENTIFIER .)
    GE              reduce using rule 110 (identifier -> IDENTIFIER .)
    AGENT           reduce using rule 110 (identifier -> IDENTIFIER .)
    CONNECT         reduce using rule 110 (identifier -> IDENTIFIER .)
    FUN             reduce using rule 110 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 110 (identifier -> IDENTIFIER .)
    IF              reduce using rule 110 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 110 (identifier -> IDENTIFIER .)
    BREAK           reduce using rule 110 (identifier -> IDENTIFIER .)
    CONTINUE        reduce using rule 110 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 110 (identifier -> IDENTIFIER .)
    TYPE            reduce using rule 110 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 110 (identifier -> IDENTIFIER .)
    $end            reduce using rule 110 (identifier -> IDENTIFIER .)
    INPUT           reduce using rule 110 (identifier -> IDENTIFIER .)
    OUTPUT          reduce using rule 110 (identifier -> IDENTIFIER .)
    MODEL           reduce using rule 110 (identifier -> IDENTIFIER .)
    CHAT            reduce using rule 110 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 110 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 110 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 110 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 110 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 110 (identifier -> IDENTIFIER .)
    ARROW           reduce using rule 110 (identifier -> IDENTIFIER .)


state 29

    (86) assign_target -> field_access .

    COLON           reduce using rule 86 (assign_target -> field_access .)
    EQUALS          reduce using rule 86 (assign_target -> field_access .)


state 30

    (87) assign_target -> index_access .

    COLON           reduce using rule 87 (assign_target -> index_access .)
    EQUALS          reduce using rule 87 (assign_target -> index_access .)


state 31

    (2) program_body -> program_body_item program_body .

    $end            reduce using rule 2 (program_body -> program_body_item program_body .)


state 32

    (35) agent_def -> AGENT identifier . COLON INDENT agent_body DEDENT

    COLON           shift and go to state 59


state 33

    (125) field_access -> identifier DOT . identifier
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 60

state 34

    (124) index_access -> identifier LBRACKET . expr RBRACKET
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    identifier                     shift and go to state 47
    expr                           shift and go to state 61
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    constant                       shift and go to state 48

state 35

    (51) connect_block -> CONNECT COLON . INDENT connection_list DEDENT

    INDENT          shift and go to state 62


state 36

    (60) func_def -> FUN identifier . LPAREN param_list RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN identifier . LPAREN param_list RPAREN COLON stmt_block
    (62) func_def -> FUN identifier . LPAREN error RPAREN ARROW type COLON stmt_block
    (63) func_def -> FUN identifier . LPAREN error RPAREN COLON stmt_block

    LPAREN          shift and go to state 63


state 37

    (89) for_stmt -> FOR identifier . IN expr COLON stmt_block
    (90) for_stmt -> FOR identifier . IN error COLON stmt_block

    IN              shift and go to state 64


state 38

    (93) if_stmt -> IF expr . COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> IF expr . COLON stmt_block

    COLON           shift and go to state 65


state 39

    (95) if_stmt -> IF error . COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> IF error . COLON stmt_block

    COLON           shift and go to state 66


state 40

    (99) expr -> expr_head . bin_op expr_tail
    (100) expr -> expr_head .
    (131) bin_op -> . PLUS
    (132) bin_op -> . MINUS
    (133) bin_op -> . TIMES
    (134) bin_op -> . DIVIDE
    (135) bin_op -> . MOD
    (136) bin_op -> . EQ
    (137) bin_op -> . NEQ
    (138) bin_op -> . LT
    (139) bin_op -> . GT
    (140) bin_op -> . LE
    (141) bin_op -> . GE

    COLON           reduce using rule 100 (expr -> expr_head .)
    AGENT           reduce using rule 100 (expr -> expr_head .)
    CONNECT         reduce using rule 100 (expr -> expr_head .)
    FUN             reduce using rule 100 (expr -> expr_head .)
    FOR             reduce using rule 100 (expr -> expr_head .)
    IF              reduce using rule 100 (expr -> expr_head .)
    WHILE           reduce using rule 100 (expr -> expr_head .)
    BREAK           reduce using rule 100 (expr -> expr_head .)
    CONTINUE        reduce using rule 100 (expr -> expr_head .)
    RETURN          reduce using rule 100 (expr -> expr_head .)
    TYPE            reduce using rule 100 (expr -> expr_head .)
    IDENTIFIER      reduce using rule 100 (expr -> expr_head .)
    $end            reduce using rule 100 (expr -> expr_head .)
    INPUT           reduce using rule 100 (expr -> expr_head .)
    OUTPUT          reduce using rule 100 (expr -> expr_head .)
    MODEL           reduce using rule 100 (expr -> expr_head .)
    CHAT            reduce using rule 100 (expr -> expr_head .)
    DEDENT          reduce using rule 100 (expr -> expr_head .)
    RBRACKET        reduce using rule 100 (expr -> expr_head .)
    COMMA           reduce using rule 100 (expr -> expr_head .)
    RPAREN          reduce using rule 100 (expr -> expr_head .)
    RBRACE          reduce using rule 100 (expr -> expr_head .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    TIMES           shift and go to state 70
    DIVIDE          shift and go to state 71
    MOD             shift and go to state 72
    EQ              shift and go to state 73
    NEQ             shift and go to state 74
    LT              shift and go to state 75
    GT              shift and go to state 76
    LE              shift and go to state 77
    GE              shift and go to state 78

    bin_op                         shift and go to state 67

state 41

    (101) expr_head -> atom .

    PLUS            reduce using rule 101 (expr_head -> atom .)
    MINUS           reduce using rule 101 (expr_head -> atom .)
    TIMES           reduce using rule 101 (expr_head -> atom .)
    DIVIDE          reduce using rule 101 (expr_head -> atom .)
    MOD             reduce using rule 101 (expr_head -> atom .)
    EQ              reduce using rule 101 (expr_head -> atom .)
    NEQ             reduce using rule 101 (expr_head -> atom .)
    LT              reduce using rule 101 (expr_head -> atom .)
    GT              reduce using rule 101 (expr_head -> atom .)
    LE              reduce using rule 101 (expr_head -> atom .)
    GE              reduce using rule 101 (expr_head -> atom .)
    COLON           reduce using rule 101 (expr_head -> atom .)
    AGENT           reduce using rule 101 (expr_head -> atom .)
    CONNECT         reduce using rule 101 (expr_head -> atom .)
    FUN             reduce using rule 101 (expr_head -> atom .)
    FOR             reduce using rule 101 (expr_head -> atom .)
    IF              reduce using rule 101 (expr_head -> atom .)
    WHILE           reduce using rule 101 (expr_head -> atom .)
    BREAK           reduce using rule 101 (expr_head -> atom .)
    CONTINUE        reduce using rule 101 (expr_head -> atom .)
    RETURN          reduce using rule 101 (expr_head -> atom .)
    TYPE            reduce using rule 101 (expr_head -> atom .)
    IDENTIFIER      reduce using rule 101 (expr_head -> atom .)
    $end            reduce using rule 101 (expr_head -> atom .)
    INPUT           reduce using rule 101 (expr_head -> atom .)
    OUTPUT          reduce using rule 101 (expr_head -> atom .)
    MODEL           reduce using rule 101 (expr_head -> atom .)
    CHAT            reduce using rule 101 (expr_head -> atom .)
    DEDENT          reduce using rule 101 (expr_head -> atom .)
    RBRACKET        reduce using rule 101 (expr_head -> atom .)
    COMMA           reduce using rule 101 (expr_head -> atom .)
    RPAREN          reduce using rule 101 (expr_head -> atom .)
    RBRACE          reduce using rule 101 (expr_head -> atom .)


state 42

    (102) expr_head -> list_expr .

    PLUS            reduce using rule 102 (expr_head -> list_expr .)
    MINUS           reduce using rule 102 (expr_head -> list_expr .)
    TIMES           reduce using rule 102 (expr_head -> list_expr .)
    DIVIDE          reduce using rule 102 (expr_head -> list_expr .)
    MOD             reduce using rule 102 (expr_head -> list_expr .)
    EQ              reduce using rule 102 (expr_head -> list_expr .)
    NEQ             reduce using rule 102 (expr_head -> list_expr .)
    LT              reduce using rule 102 (expr_head -> list_expr .)
    GT              reduce using rule 102 (expr_head -> list_expr .)
    LE              reduce using rule 102 (expr_head -> list_expr .)
    GE              reduce using rule 102 (expr_head -> list_expr .)
    COLON           reduce using rule 102 (expr_head -> list_expr .)
    AGENT           reduce using rule 102 (expr_head -> list_expr .)
    CONNECT         reduce using rule 102 (expr_head -> list_expr .)
    FUN             reduce using rule 102 (expr_head -> list_expr .)
    FOR             reduce using rule 102 (expr_head -> list_expr .)
    IF              reduce using rule 102 (expr_head -> list_expr .)
    WHILE           reduce using rule 102 (expr_head -> list_expr .)
    BREAK           reduce using rule 102 (expr_head -> list_expr .)
    CONTINUE        reduce using rule 102 (expr_head -> list_expr .)
    RETURN          reduce using rule 102 (expr_head -> list_expr .)
    TYPE            reduce using rule 102 (expr_head -> list_expr .)
    IDENTIFIER      reduce using rule 102 (expr_head -> list_expr .)
    $end            reduce using rule 102 (expr_head -> list_expr .)
    INPUT           reduce using rule 102 (expr_head -> list_expr .)
    OUTPUT          reduce using rule 102 (expr_head -> list_expr .)
    MODEL           reduce using rule 102 (expr_head -> list_expr .)
    CHAT            reduce using rule 102 (expr_head -> list_expr .)
    DEDENT          reduce using rule 102 (expr_head -> list_expr .)
    RBRACKET        reduce using rule 102 (expr_head -> list_expr .)
    COMMA           reduce using rule 102 (expr_head -> list_expr .)
    RPAREN          reduce using rule 102 (expr_head -> list_expr .)
    RBRACE          reduce using rule 102 (expr_head -> list_expr .)


state 43

    (103) expr_head -> record_expr .

    PLUS            reduce using rule 103 (expr_head -> record_expr .)
    MINUS           reduce using rule 103 (expr_head -> record_expr .)
    TIMES           reduce using rule 103 (expr_head -> record_expr .)
    DIVIDE          reduce using rule 103 (expr_head -> record_expr .)
    MOD             reduce using rule 103 (expr_head -> record_expr .)
    EQ              reduce using rule 103 (expr_head -> record_expr .)
    NEQ             reduce using rule 103 (expr_head -> record_expr .)
    LT              reduce using rule 103 (expr_head -> record_expr .)
    GT              reduce using rule 103 (expr_head -> record_expr .)
    LE              reduce using rule 103 (expr_head -> record_expr .)
    GE              reduce using rule 103 (expr_head -> record_expr .)
    COLON           reduce using rule 103 (expr_head -> record_expr .)
    AGENT           reduce using rule 103 (expr_head -> record_expr .)
    CONNECT         reduce using rule 103 (expr_head -> record_expr .)
    FUN             reduce using rule 103 (expr_head -> record_expr .)
    FOR             reduce using rule 103 (expr_head -> record_expr .)
    IF              reduce using rule 103 (expr_head -> record_expr .)
    WHILE           reduce using rule 103 (expr_head -> record_expr .)
    BREAK           reduce using rule 103 (expr_head -> record_expr .)
    CONTINUE        reduce using rule 103 (expr_head -> record_expr .)
    RETURN          reduce using rule 103 (expr_head -> record_expr .)
    TYPE            reduce using rule 103 (expr_head -> record_expr .)
    IDENTIFIER      reduce using rule 103 (expr_head -> record_expr .)
    $end            reduce using rule 103 (expr_head -> record_expr .)
    INPUT           reduce using rule 103 (expr_head -> record_expr .)
    OUTPUT          reduce using rule 103 (expr_head -> record_expr .)
    MODEL           reduce using rule 103 (expr_head -> record_expr .)
    CHAT            reduce using rule 103 (expr_head -> record_expr .)
    DEDENT          reduce using rule 103 (expr_head -> record_expr .)
    RBRACKET        reduce using rule 103 (expr_head -> record_expr .)
    COMMA           reduce using rule 103 (expr_head -> record_expr .)
    RPAREN          reduce using rule 103 (expr_head -> record_expr .)
    RBRACE          reduce using rule 103 (expr_head -> record_expr .)


state 44

    (104) expr_head -> field_access .

    PLUS            reduce using rule 104 (expr_head -> field_access .)
    MINUS           reduce using rule 104 (expr_head -> field_access .)
    TIMES           reduce using rule 104 (expr_head -> field_access .)
    DIVIDE          reduce using rule 104 (expr_head -> field_access .)
    MOD             reduce using rule 104 (expr_head -> field_access .)
    EQ              reduce using rule 104 (expr_head -> field_access .)
    NEQ             reduce using rule 104 (expr_head -> field_access .)
    LT              reduce using rule 104 (expr_head -> field_access .)
    GT              reduce using rule 104 (expr_head -> field_access .)
    LE              reduce using rule 104 (expr_head -> field_access .)
    GE              reduce using rule 104 (expr_head -> field_access .)
    COLON           reduce using rule 104 (expr_head -> field_access .)
    AGENT           reduce using rule 104 (expr_head -> field_access .)
    CONNECT         reduce using rule 104 (expr_head -> field_access .)
    FUN             reduce using rule 104 (expr_head -> field_access .)
    FOR             reduce using rule 104 (expr_head -> field_access .)
    IF              reduce using rule 104 (expr_head -> field_access .)
    WHILE           reduce using rule 104 (expr_head -> field_access .)
    BREAK           reduce using rule 104 (expr_head -> field_access .)
    CONTINUE        reduce using rule 104 (expr_head -> field_access .)
    RETURN          reduce using rule 104 (expr_head -> field_access .)
    TYPE            reduce using rule 104 (expr_head -> field_access .)
    IDENTIFIER      reduce using rule 104 (expr_head -> field_access .)
    $end            reduce using rule 104 (expr_head -> field_access .)
    INPUT           reduce using rule 104 (expr_head -> field_access .)
    OUTPUT          reduce using rule 104 (expr_head -> field_access .)
    MODEL           reduce using rule 104 (expr_head -> field_access .)
    CHAT            reduce using rule 104 (expr_head -> field_access .)
    DEDENT          reduce using rule 104 (expr_head -> field_access .)
    RBRACKET        reduce using rule 104 (expr_head -> field_access .)
    COMMA           reduce using rule 104 (expr_head -> field_access .)
    RPAREN          reduce using rule 104 (expr_head -> field_access .)
    RBRACE          reduce using rule 104 (expr_head -> field_access .)


state 45

    (105) expr_head -> index_access .

    PLUS            reduce using rule 105 (expr_head -> index_access .)
    MINUS           reduce using rule 105 (expr_head -> index_access .)
    TIMES           reduce using rule 105 (expr_head -> index_access .)
    DIVIDE          reduce using rule 105 (expr_head -> index_access .)
    MOD             reduce using rule 105 (expr_head -> index_access .)
    EQ              reduce using rule 105 (expr_head -> index_access .)
    NEQ             reduce using rule 105 (expr_head -> index_access .)
    LT              reduce using rule 105 (expr_head -> index_access .)
    GT              reduce using rule 105 (expr_head -> index_access .)
    LE              reduce using rule 105 (expr_head -> index_access .)
    GE              reduce using rule 105 (expr_head -> index_access .)
    COLON           reduce using rule 105 (expr_head -> index_access .)
    AGENT           reduce using rule 105 (expr_head -> index_access .)
    CONNECT         reduce using rule 105 (expr_head -> index_access .)
    FUN             reduce using rule 105 (expr_head -> index_access .)
    FOR             reduce using rule 105 (expr_head -> index_access .)
    IF              reduce using rule 105 (expr_head -> index_access .)
    WHILE           reduce using rule 105 (expr_head -> index_access .)
    BREAK           reduce using rule 105 (expr_head -> index_access .)
    CONTINUE        reduce using rule 105 (expr_head -> index_access .)
    RETURN          reduce using rule 105 (expr_head -> index_access .)
    TYPE            reduce using rule 105 (expr_head -> index_access .)
    IDENTIFIER      reduce using rule 105 (expr_head -> index_access .)
    $end            reduce using rule 105 (expr_head -> index_access .)
    INPUT           reduce using rule 105 (expr_head -> index_access .)
    OUTPUT          reduce using rule 105 (expr_head -> index_access .)
    MODEL           reduce using rule 105 (expr_head -> index_access .)
    CHAT            reduce using rule 105 (expr_head -> index_access .)
    DEDENT          reduce using rule 105 (expr_head -> index_access .)
    RBRACKET        reduce using rule 105 (expr_head -> index_access .)
    COMMA           reduce using rule 105 (expr_head -> index_access .)
    RPAREN          reduce using rule 105 (expr_head -> index_access .)
    RBRACE          reduce using rule 105 (expr_head -> index_access .)


state 46

    (106) expr_head -> func_call .

    PLUS            reduce using rule 106 (expr_head -> func_call .)
    MINUS           reduce using rule 106 (expr_head -> func_call .)
    TIMES           reduce using rule 106 (expr_head -> func_call .)
    DIVIDE          reduce using rule 106 (expr_head -> func_call .)
    MOD             reduce using rule 106 (expr_head -> func_call .)
    EQ              reduce using rule 106 (expr_head -> func_call .)
    NEQ             reduce using rule 106 (expr_head -> func_call .)
    LT              reduce using rule 106 (expr_head -> func_call .)
    GT              reduce using rule 106 (expr_head -> func_call .)
    LE              reduce using rule 106 (expr_head -> func_call .)
    GE              reduce using rule 106 (expr_head -> func_call .)
    COLON           reduce using rule 106 (expr_head -> func_call .)
    AGENT           reduce using rule 106 (expr_head -> func_call .)
    CONNECT         reduce using rule 106 (expr_head -> func_call .)
    FUN             reduce using rule 106 (expr_head -> func_call .)
    FOR             reduce using rule 106 (expr_head -> func_call .)
    IF              reduce using rule 106 (expr_head -> func_call .)
    WHILE           reduce using rule 106 (expr_head -> func_call .)
    BREAK           reduce using rule 106 (expr_head -> func_call .)
    CONTINUE        reduce using rule 106 (expr_head -> func_call .)
    RETURN          reduce using rule 106 (expr_head -> func_call .)
    TYPE            reduce using rule 106 (expr_head -> func_call .)
    IDENTIFIER      reduce using rule 106 (expr_head -> func_call .)
    $end            reduce using rule 106 (expr_head -> func_call .)
    INPUT           reduce using rule 106 (expr_head -> func_call .)
    OUTPUT          reduce using rule 106 (expr_head -> func_call .)
    MODEL           reduce using rule 106 (expr_head -> func_call .)
    CHAT            reduce using rule 106 (expr_head -> func_call .)
    DEDENT          reduce using rule 106 (expr_head -> func_call .)
    RBRACKET        reduce using rule 106 (expr_head -> func_call .)
    COMMA           reduce using rule 106 (expr_head -> func_call .)
    RPAREN          reduce using rule 106 (expr_head -> func_call .)
    RBRACE          reduce using rule 106 (expr_head -> func_call .)


state 47

    (108) atom -> identifier .
    (125) field_access -> identifier . DOT identifier
    (124) index_access -> identifier . LBRACKET expr RBRACKET
    (126) func_call -> identifier . LPAREN arg_list RPAREN

    PLUS            reduce using rule 108 (atom -> identifier .)
    MINUS           reduce using rule 108 (atom -> identifier .)
    TIMES           reduce using rule 108 (atom -> identifier .)
    DIVIDE          reduce using rule 108 (atom -> identifier .)
    MOD             reduce using rule 108 (atom -> identifier .)
    EQ              reduce using rule 108 (atom -> identifier .)
    NEQ             reduce using rule 108 (atom -> identifier .)
    LT              reduce using rule 108 (atom -> identifier .)
    GT              reduce using rule 108 (atom -> identifier .)
    LE              reduce using rule 108 (atom -> identifier .)
    GE              reduce using rule 108 (atom -> identifier .)
    COLON           reduce using rule 108 (atom -> identifier .)
    AGENT           reduce using rule 108 (atom -> identifier .)
    CONNECT         reduce using rule 108 (atom -> identifier .)
    FUN             reduce using rule 108 (atom -> identifier .)
    FOR             reduce using rule 108 (atom -> identifier .)
    IF              reduce using rule 108 (atom -> identifier .)
    WHILE           reduce using rule 108 (atom -> identifier .)
    BREAK           reduce using rule 108 (atom -> identifier .)
    CONTINUE        reduce using rule 108 (atom -> identifier .)
    RETURN          reduce using rule 108 (atom -> identifier .)
    TYPE            reduce using rule 108 (atom -> identifier .)
    IDENTIFIER      reduce using rule 108 (atom -> identifier .)
    $end            reduce using rule 108 (atom -> identifier .)
    INPUT           reduce using rule 108 (atom -> identifier .)
    OUTPUT          reduce using rule 108 (atom -> identifier .)
    MODEL           reduce using rule 108 (atom -> identifier .)
    CHAT            reduce using rule 108 (atom -> identifier .)
    DEDENT          reduce using rule 108 (atom -> identifier .)
    RBRACKET        reduce using rule 108 (atom -> identifier .)
    COMMA           reduce using rule 108 (atom -> identifier .)
    RPAREN          reduce using rule 108 (atom -> identifier .)
    RBRACE          reduce using rule 108 (atom -> identifier .)
    DOT             shift and go to state 33
    LBRACKET        shift and go to state 34
    LPAREN          shift and go to state 79


state 48

    (109) atom -> constant .

    PLUS            reduce using rule 109 (atom -> constant .)
    MINUS           reduce using rule 109 (atom -> constant .)
    TIMES           reduce using rule 109 (atom -> constant .)
    DIVIDE          reduce using rule 109 (atom -> constant .)
    MOD             reduce using rule 109 (atom -> constant .)
    EQ              reduce using rule 109 (atom -> constant .)
    NEQ             reduce using rule 109 (atom -> constant .)
    LT              reduce using rule 109 (atom -> constant .)
    GT              reduce using rule 109 (atom -> constant .)
    LE              reduce using rule 109 (atom -> constant .)
    GE              reduce using rule 109 (atom -> constant .)
    COLON           reduce using rule 109 (atom -> constant .)
    AGENT           reduce using rule 109 (atom -> constant .)
    CONNECT         reduce using rule 109 (atom -> constant .)
    FUN             reduce using rule 109 (atom -> constant .)
    FOR             reduce using rule 109 (atom -> constant .)
    IF              reduce using rule 109 (atom -> constant .)
    WHILE           reduce using rule 109 (atom -> constant .)
    BREAK           reduce using rule 109 (atom -> constant .)
    CONTINUE        reduce using rule 109 (atom -> constant .)
    RETURN          reduce using rule 109 (atom -> constant .)
    TYPE            reduce using rule 109 (atom -> constant .)
    IDENTIFIER      reduce using rule 109 (atom -> constant .)
    $end            reduce using rule 109 (atom -> constant .)
    INPUT           reduce using rule 109 (atom -> constant .)
    OUTPUT          reduce using rule 109 (atom -> constant .)
    MODEL           reduce using rule 109 (atom -> constant .)
    CHAT            reduce using rule 109 (atom -> constant .)
    DEDENT          reduce using rule 109 (atom -> constant .)
    RBRACKET        reduce using rule 109 (atom -> constant .)
    COMMA           reduce using rule 109 (atom -> constant .)
    RPAREN          reduce using rule 109 (atom -> constant .)
    RBRACE          reduce using rule 109 (atom -> constant .)


state 49

    (113) list_expr -> LBRACKET . list_elements RBRACKET
    (114) list_elements -> . expr list_elements_tail
    (115) list_elements -> . expr
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    list_elements                  shift and go to state 80
    expr                           shift and go to state 81
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 50

    (118) record_expr -> LBRACE . record_elements RBRACE
    (119) record_elements -> . instance_assign record_elements_tail
    (120) record_elements -> . instance_assign
    (123) instance_assign -> . identifier EQUALS expr
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    record_elements                shift and go to state 82
    instance_assign                shift and go to state 83
    identifier                     shift and go to state 84

state 51

    (111) constant -> STRING .

    PLUS            reduce using rule 111 (constant -> STRING .)
    MINUS           reduce using rule 111 (constant -> STRING .)
    TIMES           reduce using rule 111 (constant -> STRING .)
    DIVIDE          reduce using rule 111 (constant -> STRING .)
    MOD             reduce using rule 111 (constant -> STRING .)
    EQ              reduce using rule 111 (constant -> STRING .)
    NEQ             reduce using rule 111 (constant -> STRING .)
    LT              reduce using rule 111 (constant -> STRING .)
    GT              reduce using rule 111 (constant -> STRING .)
    LE              reduce using rule 111 (constant -> STRING .)
    GE              reduce using rule 111 (constant -> STRING .)
    COLON           reduce using rule 111 (constant -> STRING .)
    AGENT           reduce using rule 111 (constant -> STRING .)
    CONNECT         reduce using rule 111 (constant -> STRING .)
    FUN             reduce using rule 111 (constant -> STRING .)
    FOR             reduce using rule 111 (constant -> STRING .)
    IF              reduce using rule 111 (constant -> STRING .)
    WHILE           reduce using rule 111 (constant -> STRING .)
    BREAK           reduce using rule 111 (constant -> STRING .)
    CONTINUE        reduce using rule 111 (constant -> STRING .)
    RETURN          reduce using rule 111 (constant -> STRING .)
    TYPE            reduce using rule 111 (constant -> STRING .)
    IDENTIFIER      reduce using rule 111 (constant -> STRING .)
    $end            reduce using rule 111 (constant -> STRING .)
    INPUT           reduce using rule 111 (constant -> STRING .)
    OUTPUT          reduce using rule 111 (constant -> STRING .)
    MODEL           reduce using rule 111 (constant -> STRING .)
    CHAT            reduce using rule 111 (constant -> STRING .)
    DEDENT          reduce using rule 111 (constant -> STRING .)
    RBRACKET        reduce using rule 111 (constant -> STRING .)
    COMMA           reduce using rule 111 (constant -> STRING .)
    RPAREN          reduce using rule 111 (constant -> STRING .)
    RBRACE          reduce using rule 111 (constant -> STRING .)


state 52

    (112) constant -> NUMBER .

    PLUS            reduce using rule 112 (constant -> NUMBER .)
    MINUS           reduce using rule 112 (constant -> NUMBER .)
    TIMES           reduce using rule 112 (constant -> NUMBER .)
    DIVIDE          reduce using rule 112 (constant -> NUMBER .)
    MOD             reduce using rule 112 (constant -> NUMBER .)
    EQ              reduce using rule 112 (constant -> NUMBER .)
    NEQ             reduce using rule 112 (constant -> NUMBER .)
    LT              reduce using rule 112 (constant -> NUMBER .)
    GT              reduce using rule 112 (constant -> NUMBER .)
    LE              reduce using rule 112 (constant -> NUMBER .)
    GE              reduce using rule 112 (constant -> NUMBER .)
    COLON           reduce using rule 112 (constant -> NUMBER .)
    AGENT           reduce using rule 112 (constant -> NUMBER .)
    CONNECT         reduce using rule 112 (constant -> NUMBER .)
    FUN             reduce using rule 112 (constant -> NUMBER .)
    FOR             reduce using rule 112 (constant -> NUMBER .)
    IF              reduce using rule 112 (constant -> NUMBER .)
    WHILE           reduce using rule 112 (constant -> NUMBER .)
    BREAK           reduce using rule 112 (constant -> NUMBER .)
    CONTINUE        reduce using rule 112 (constant -> NUMBER .)
    RETURN          reduce using rule 112 (constant -> NUMBER .)
    TYPE            reduce using rule 112 (constant -> NUMBER .)
    IDENTIFIER      reduce using rule 112 (constant -> NUMBER .)
    $end            reduce using rule 112 (constant -> NUMBER .)
    INPUT           reduce using rule 112 (constant -> NUMBER .)
    OUTPUT          reduce using rule 112 (constant -> NUMBER .)
    MODEL           reduce using rule 112 (constant -> NUMBER .)
    CHAT            reduce using rule 112 (constant -> NUMBER .)
    DEDENT          reduce using rule 112 (constant -> NUMBER .)
    RBRACKET        reduce using rule 112 (constant -> NUMBER .)
    COMMA           reduce using rule 112 (constant -> NUMBER .)
    RPAREN          reduce using rule 112 (constant -> NUMBER .)
    RBRACE          reduce using rule 112 (constant -> NUMBER .)


state 53

    (97) while_stmt -> WHILE expr . COLON stmt_block

    COLON           shift and go to state 85


state 54

    (98) while_stmt -> WHILE error . COLON stmt_block

    COLON           shift and go to state 86


state 55

    (81) assign_stmt -> assign_target COLON . type EQUALS expr
    (83) assign_stmt -> assign_target COLON . type EQUALS error
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 87
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 56

    (82) assign_stmt -> assign_target EQUALS . expr
    (84) assign_stmt -> assign_target EQUALS . error
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    error           shift and go to state 105
    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr                           shift and go to state 104
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 57

    (88) return_stmt -> RETURN expr .

    AGENT           reduce using rule 88 (return_stmt -> RETURN expr .)
    CONNECT         reduce using rule 88 (return_stmt -> RETURN expr .)
    FUN             reduce using rule 88 (return_stmt -> RETURN expr .)
    FOR             reduce using rule 88 (return_stmt -> RETURN expr .)
    IF              reduce using rule 88 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 88 (return_stmt -> RETURN expr .)
    BREAK           reduce using rule 88 (return_stmt -> RETURN expr .)
    CONTINUE        reduce using rule 88 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 88 (return_stmt -> RETURN expr .)
    TYPE            reduce using rule 88 (return_stmt -> RETURN expr .)
    IDENTIFIER      reduce using rule 88 (return_stmt -> RETURN expr .)
    $end            reduce using rule 88 (return_stmt -> RETURN expr .)
    INPUT           reduce using rule 88 (return_stmt -> RETURN expr .)
    OUTPUT          reduce using rule 88 (return_stmt -> RETURN expr .)
    MODEL           reduce using rule 88 (return_stmt -> RETURN expr .)
    CHAT            reduce using rule 88 (return_stmt -> RETURN expr .)
    DEDENT          reduce using rule 88 (return_stmt -> RETURN expr .)


state 58

    (80) type_def_stmt -> TYPE IDENTIFIER . EQUALS type

    EQUALS          shift and go to state 106


state 59

    (35) agent_def -> AGENT identifier COLON . INDENT agent_body DEDENT

    INDENT          shift and go to state 107


state 60

    (125) field_access -> identifier DOT identifier .

    COLON           reduce using rule 125 (field_access -> identifier DOT identifier .)
    EQUALS          reduce using rule 125 (field_access -> identifier DOT identifier .)
    PLUS            reduce using rule 125 (field_access -> identifier DOT identifier .)
    MINUS           reduce using rule 125 (field_access -> identifier DOT identifier .)
    TIMES           reduce using rule 125 (field_access -> identifier DOT identifier .)
    DIVIDE          reduce using rule 125 (field_access -> identifier DOT identifier .)
    MOD             reduce using rule 125 (field_access -> identifier DOT identifier .)
    EQ              reduce using rule 125 (field_access -> identifier DOT identifier .)
    NEQ             reduce using rule 125 (field_access -> identifier DOT identifier .)
    LT              reduce using rule 125 (field_access -> identifier DOT identifier .)
    GT              reduce using rule 125 (field_access -> identifier DOT identifier .)
    LE              reduce using rule 125 (field_access -> identifier DOT identifier .)
    GE              reduce using rule 125 (field_access -> identifier DOT identifier .)
    AGENT           reduce using rule 125 (field_access -> identifier DOT identifier .)
    CONNECT         reduce using rule 125 (field_access -> identifier DOT identifier .)
    FUN             reduce using rule 125 (field_access -> identifier DOT identifier .)
    FOR             reduce using rule 125 (field_access -> identifier DOT identifier .)
    IF              reduce using rule 125 (field_access -> identifier DOT identifier .)
    WHILE           reduce using rule 125 (field_access -> identifier DOT identifier .)
    BREAK           reduce using rule 125 (field_access -> identifier DOT identifier .)
    CONTINUE        reduce using rule 125 (field_access -> identifier DOT identifier .)
    RETURN          reduce using rule 125 (field_access -> identifier DOT identifier .)
    TYPE            reduce using rule 125 (field_access -> identifier DOT identifier .)
    IDENTIFIER      reduce using rule 125 (field_access -> identifier DOT identifier .)
    $end            reduce using rule 125 (field_access -> identifier DOT identifier .)
    INPUT           reduce using rule 125 (field_access -> identifier DOT identifier .)
    OUTPUT          reduce using rule 125 (field_access -> identifier DOT identifier .)
    MODEL           reduce using rule 125 (field_access -> identifier DOT identifier .)
    CHAT            reduce using rule 125 (field_access -> identifier DOT identifier .)
    DEDENT          reduce using rule 125 (field_access -> identifier DOT identifier .)
    RBRACKET        reduce using rule 125 (field_access -> identifier DOT identifier .)
    COMMA           reduce using rule 125 (field_access -> identifier DOT identifier .)
    RPAREN          reduce using rule 125 (field_access -> identifier DOT identifier .)
    RBRACE          reduce using rule 125 (field_access -> identifier DOT identifier .)


state 61

    (124) index_access -> identifier LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 108


state 62

    (51) connect_block -> CONNECT COLON INDENT . connection_list DEDENT
    (52) connection_list -> . connection connection_list
    (53) connection_list -> . connection
    (54) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    connection_list                shift and go to state 109
    connection                     shift and go to state 110
    identifier                     shift and go to state 111

state 63

    (60) func_def -> FUN identifier LPAREN . param_list RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN identifier LPAREN . param_list RPAREN COLON stmt_block
    (62) func_def -> FUN identifier LPAREN . error RPAREN ARROW type COLON stmt_block
    (63) func_def -> FUN identifier LPAREN . error RPAREN COLON stmt_block
    (64) param_list -> . param_decl param_list_tail
    (65) param_list -> . empty
    (68) param_decl -> . var_decl
    (142) empty -> .
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (110) identifier -> . IDENTIFIER

    error           shift and go to state 114
    RPAREN          reduce using rule 142 (empty -> .)
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 112
    param_list                     shift and go to state 113
    param_decl                     shift and go to state 115
    empty                          shift and go to state 116
    var_decl                       shift and go to state 117

state 64

    (89) for_stmt -> FOR identifier IN . expr COLON stmt_block
    (90) for_stmt -> FOR identifier IN . error COLON stmt_block
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    error           shift and go to state 119
    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    identifier                     shift and go to state 47
    expr                           shift and go to state 118
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    constant                       shift and go to state 48

state 65

    (93) if_stmt -> IF expr COLON . stmt_block ELSE COLON stmt_block
    (94) if_stmt -> IF expr COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 120

state 66

    (95) if_stmt -> IF error COLON . stmt_block ELSE COLON stmt_block
    (96) if_stmt -> IF error COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 122

state 67

    (99) expr -> expr_head bin_op . expr_tail
    (107) expr_tail -> . expr
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr_head                      shift and go to state 40
    expr_tail                      shift and go to state 123
    expr                           shift and go to state 124
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 68

    (131) bin_op -> PLUS .

    LBRACKET        reduce using rule 131 (bin_op -> PLUS .)
    LBRACE          reduce using rule 131 (bin_op -> PLUS .)
    IDENTIFIER      reduce using rule 131 (bin_op -> PLUS .)
    STRING          reduce using rule 131 (bin_op -> PLUS .)
    NUMBER          reduce using rule 131 (bin_op -> PLUS .)


state 69

    (132) bin_op -> MINUS .

    LBRACKET        reduce using rule 132 (bin_op -> MINUS .)
    LBRACE          reduce using rule 132 (bin_op -> MINUS .)
    IDENTIFIER      reduce using rule 132 (bin_op -> MINUS .)
    STRING          reduce using rule 132 (bin_op -> MINUS .)
    NUMBER          reduce using rule 132 (bin_op -> MINUS .)


state 70

    (133) bin_op -> TIMES .

    LBRACKET        reduce using rule 133 (bin_op -> TIMES .)
    LBRACE          reduce using rule 133 (bin_op -> TIMES .)
    IDENTIFIER      reduce using rule 133 (bin_op -> TIMES .)
    STRING          reduce using rule 133 (bin_op -> TIMES .)
    NUMBER          reduce using rule 133 (bin_op -> TIMES .)


state 71

    (134) bin_op -> DIVIDE .

    LBRACKET        reduce using rule 134 (bin_op -> DIVIDE .)
    LBRACE          reduce using rule 134 (bin_op -> DIVIDE .)
    IDENTIFIER      reduce using rule 134 (bin_op -> DIVIDE .)
    STRING          reduce using rule 134 (bin_op -> DIVIDE .)
    NUMBER          reduce using rule 134 (bin_op -> DIVIDE .)


state 72

    (135) bin_op -> MOD .

    LBRACKET        reduce using rule 135 (bin_op -> MOD .)
    LBRACE          reduce using rule 135 (bin_op -> MOD .)
    IDENTIFIER      reduce using rule 135 (bin_op -> MOD .)
    STRING          reduce using rule 135 (bin_op -> MOD .)
    NUMBER          reduce using rule 135 (bin_op -> MOD .)


state 73

    (136) bin_op -> EQ .

    LBRACKET        reduce using rule 136 (bin_op -> EQ .)
    LBRACE          reduce using rule 136 (bin_op -> EQ .)
    IDENTIFIER      reduce using rule 136 (bin_op -> EQ .)
    STRING          reduce using rule 136 (bin_op -> EQ .)
    NUMBER          reduce using rule 136 (bin_op -> EQ .)


state 74

    (137) bin_op -> NEQ .

    LBRACKET        reduce using rule 137 (bin_op -> NEQ .)
    LBRACE          reduce using rule 137 (bin_op -> NEQ .)
    IDENTIFIER      reduce using rule 137 (bin_op -> NEQ .)
    STRING          reduce using rule 137 (bin_op -> NEQ .)
    NUMBER          reduce using rule 137 (bin_op -> NEQ .)


state 75

    (138) bin_op -> LT .

    LBRACKET        reduce using rule 138 (bin_op -> LT .)
    LBRACE          reduce using rule 138 (bin_op -> LT .)
    IDENTIFIER      reduce using rule 138 (bin_op -> LT .)
    STRING          reduce using rule 138 (bin_op -> LT .)
    NUMBER          reduce using rule 138 (bin_op -> LT .)


state 76

    (139) bin_op -> GT .

    LBRACKET        reduce using rule 139 (bin_op -> GT .)
    LBRACE          reduce using rule 139 (bin_op -> GT .)
    IDENTIFIER      reduce using rule 139 (bin_op -> GT .)
    STRING          reduce using rule 139 (bin_op -> GT .)
    NUMBER          reduce using rule 139 (bin_op -> GT .)


state 77

    (140) bin_op -> LE .

    LBRACKET        reduce using rule 140 (bin_op -> LE .)
    LBRACE          reduce using rule 140 (bin_op -> LE .)
    IDENTIFIER      reduce using rule 140 (bin_op -> LE .)
    STRING          reduce using rule 140 (bin_op -> LE .)
    NUMBER          reduce using rule 140 (bin_op -> LE .)


state 78

    (141) bin_op -> GE .

    LBRACKET        reduce using rule 141 (bin_op -> GE .)
    LBRACE          reduce using rule 141 (bin_op -> GE .)
    IDENTIFIER      reduce using rule 141 (bin_op -> GE .)
    STRING          reduce using rule 141 (bin_op -> GE .)
    NUMBER          reduce using rule 141 (bin_op -> GE .)


state 79

    (126) func_call -> identifier LPAREN . arg_list RPAREN
    (127) arg_list -> . expr arg_list_tail
    (128) arg_list -> . empty
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (142) empty -> .
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    RPAREN          reduce using rule 142 (empty -> .)
    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    identifier                     shift and go to state 47
    arg_list                       shift and go to state 125
    expr                           shift and go to state 126
    empty                          shift and go to state 127
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    constant                       shift and go to state 48

state 80

    (113) list_expr -> LBRACKET list_elements . RBRACKET

    RBRACKET        shift and go to state 128


state 81

    (114) list_elements -> expr . list_elements_tail
    (115) list_elements -> expr .
    (116) list_elements_tail -> . COMMA expr list_elements_tail
    (117) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 115 (list_elements -> expr .)
    COMMA           shift and go to state 130

    list_elements_tail             shift and go to state 129

state 82

    (118) record_expr -> LBRACE record_elements . RBRACE

    RBRACE          shift and go to state 131


state 83

    (119) record_elements -> instance_assign . record_elements_tail
    (120) record_elements -> instance_assign .
    (121) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (122) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 120 (record_elements -> instance_assign .)
    COMMA           shift and go to state 133

    record_elements_tail           shift and go to state 132

state 84

    (123) instance_assign -> identifier . EQUALS expr

    EQUALS          shift and go to state 134


state 85

    (97) while_stmt -> WHILE expr COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 135

state 86

    (98) while_stmt -> WHILE error COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 136

state 87

    (81) assign_stmt -> assign_target COLON type . EQUALS expr
    (83) assign_stmt -> assign_target COLON type . EQUALS error

    EQUALS          shift and go to state 137


state 88

    (14) type -> base_type .

    EQUALS          reduce using rule 14 (type -> base_type .)
    COMMA           reduce using rule 14 (type -> base_type .)
    RPAREN          reduce using rule 14 (type -> base_type .)
    AGENT           reduce using rule 14 (type -> base_type .)
    CONNECT         reduce using rule 14 (type -> base_type .)
    FUN             reduce using rule 14 (type -> base_type .)
    FOR             reduce using rule 14 (type -> base_type .)
    IF              reduce using rule 14 (type -> base_type .)
    WHILE           reduce using rule 14 (type -> base_type .)
    BREAK           reduce using rule 14 (type -> base_type .)
    CONTINUE        reduce using rule 14 (type -> base_type .)
    RETURN          reduce using rule 14 (type -> base_type .)
    TYPE            reduce using rule 14 (type -> base_type .)
    IDENTIFIER      reduce using rule 14 (type -> base_type .)
    $end            reduce using rule 14 (type -> base_type .)
    INPUT           reduce using rule 14 (type -> base_type .)
    OUTPUT          reduce using rule 14 (type -> base_type .)
    MODEL           reduce using rule 14 (type -> base_type .)
    CHAT            reduce using rule 14 (type -> base_type .)
    DEDENT          reduce using rule 14 (type -> base_type .)
    RBRACKET        reduce using rule 14 (type -> base_type .)
    INDENT          reduce using rule 14 (type -> base_type .)
    COLON           reduce using rule 14 (type -> base_type .)
    RBRACE          reduce using rule 14 (type -> base_type .)


state 89

    (15) type -> list_type .

    EQUALS          reduce using rule 15 (type -> list_type .)
    COMMA           reduce using rule 15 (type -> list_type .)
    RPAREN          reduce using rule 15 (type -> list_type .)
    AGENT           reduce using rule 15 (type -> list_type .)
    CONNECT         reduce using rule 15 (type -> list_type .)
    FUN             reduce using rule 15 (type -> list_type .)
    FOR             reduce using rule 15 (type -> list_type .)
    IF              reduce using rule 15 (type -> list_type .)
    WHILE           reduce using rule 15 (type -> list_type .)
    BREAK           reduce using rule 15 (type -> list_type .)
    CONTINUE        reduce using rule 15 (type -> list_type .)
    RETURN          reduce using rule 15 (type -> list_type .)
    TYPE            reduce using rule 15 (type -> list_type .)
    IDENTIFIER      reduce using rule 15 (type -> list_type .)
    $end            reduce using rule 15 (type -> list_type .)
    INPUT           reduce using rule 15 (type -> list_type .)
    OUTPUT          reduce using rule 15 (type -> list_type .)
    MODEL           reduce using rule 15 (type -> list_type .)
    CHAT            reduce using rule 15 (type -> list_type .)
    DEDENT          reduce using rule 15 (type -> list_type .)
    RBRACKET        reduce using rule 15 (type -> list_type .)
    INDENT          reduce using rule 15 (type -> list_type .)
    COLON           reduce using rule 15 (type -> list_type .)
    RBRACE          reduce using rule 15 (type -> list_type .)


state 90

    (16) type -> record_type .

    EQUALS          reduce using rule 16 (type -> record_type .)
    COMMA           reduce using rule 16 (type -> record_type .)
    RPAREN          reduce using rule 16 (type -> record_type .)
    AGENT           reduce using rule 16 (type -> record_type .)
    CONNECT         reduce using rule 16 (type -> record_type .)
    FUN             reduce using rule 16 (type -> record_type .)
    FOR             reduce using rule 16 (type -> record_type .)
    IF              reduce using rule 16 (type -> record_type .)
    WHILE           reduce using rule 16 (type -> record_type .)
    BREAK           reduce using rule 16 (type -> record_type .)
    CONTINUE        reduce using rule 16 (type -> record_type .)
    RETURN          reduce using rule 16 (type -> record_type .)
    TYPE            reduce using rule 16 (type -> record_type .)
    IDENTIFIER      reduce using rule 16 (type -> record_type .)
    $end            reduce using rule 16 (type -> record_type .)
    INPUT           reduce using rule 16 (type -> record_type .)
    OUTPUT          reduce using rule 16 (type -> record_type .)
    MODEL           reduce using rule 16 (type -> record_type .)
    CHAT            reduce using rule 16 (type -> record_type .)
    DEDENT          reduce using rule 16 (type -> record_type .)
    RBRACKET        reduce using rule 16 (type -> record_type .)
    INDENT          reduce using rule 16 (type -> record_type .)
    COLON           reduce using rule 16 (type -> record_type .)
    RBRACE          reduce using rule 16 (type -> record_type .)


state 91

    (17) type -> func_ret_type .

    EQUALS          reduce using rule 17 (type -> func_ret_type .)
    COMMA           reduce using rule 17 (type -> func_ret_type .)
    RPAREN          reduce using rule 17 (type -> func_ret_type .)
    AGENT           reduce using rule 17 (type -> func_ret_type .)
    CONNECT         reduce using rule 17 (type -> func_ret_type .)
    FUN             reduce using rule 17 (type -> func_ret_type .)
    FOR             reduce using rule 17 (type -> func_ret_type .)
    IF              reduce using rule 17 (type -> func_ret_type .)
    WHILE           reduce using rule 17 (type -> func_ret_type .)
    BREAK           reduce using rule 17 (type -> func_ret_type .)
    CONTINUE        reduce using rule 17 (type -> func_ret_type .)
    RETURN          reduce using rule 17 (type -> func_ret_type .)
    TYPE            reduce using rule 17 (type -> func_ret_type .)
    IDENTIFIER      reduce using rule 17 (type -> func_ret_type .)
    $end            reduce using rule 17 (type -> func_ret_type .)
    INPUT           reduce using rule 17 (type -> func_ret_type .)
    OUTPUT          reduce using rule 17 (type -> func_ret_type .)
    MODEL           reduce using rule 17 (type -> func_ret_type .)
    CHAT            reduce using rule 17 (type -> func_ret_type .)
    DEDENT          reduce using rule 17 (type -> func_ret_type .)
    RBRACKET        reduce using rule 17 (type -> func_ret_type .)
    INDENT          reduce using rule 17 (type -> func_ret_type .)
    COLON           reduce using rule 17 (type -> func_ret_type .)
    RBRACE          reduce using rule 17 (type -> func_ret_type .)


state 92

    (18) type -> union_type .

    EQUALS          reduce using rule 18 (type -> union_type .)
    COMMA           reduce using rule 18 (type -> union_type .)
    RPAREN          reduce using rule 18 (type -> union_type .)
    AGENT           reduce using rule 18 (type -> union_type .)
    CONNECT         reduce using rule 18 (type -> union_type .)
    FUN             reduce using rule 18 (type -> union_type .)
    FOR             reduce using rule 18 (type -> union_type .)
    IF              reduce using rule 18 (type -> union_type .)
    WHILE           reduce using rule 18 (type -> union_type .)
    BREAK           reduce using rule 18 (type -> union_type .)
    CONTINUE        reduce using rule 18 (type -> union_type .)
    RETURN          reduce using rule 18 (type -> union_type .)
    TYPE            reduce using rule 18 (type -> union_type .)
    IDENTIFIER      reduce using rule 18 (type -> union_type .)
    $end            reduce using rule 18 (type -> union_type .)
    INPUT           reduce using rule 18 (type -> union_type .)
    OUTPUT          reduce using rule 18 (type -> union_type .)
    MODEL           reduce using rule 18 (type -> union_type .)
    CHAT            reduce using rule 18 (type -> union_type .)
    DEDENT          reduce using rule 18 (type -> union_type .)
    RBRACKET        reduce using rule 18 (type -> union_type .)
    INDENT          reduce using rule 18 (type -> union_type .)
    COLON           reduce using rule 18 (type -> union_type .)
    RBRACE          reduce using rule 18 (type -> union_type .)


state 93

    (19) type -> type_alias .

    EQUALS          reduce using rule 19 (type -> type_alias .)
    COMMA           reduce using rule 19 (type -> type_alias .)
    RPAREN          reduce using rule 19 (type -> type_alias .)
    AGENT           reduce using rule 19 (type -> type_alias .)
    CONNECT         reduce using rule 19 (type -> type_alias .)
    FUN             reduce using rule 19 (type -> type_alias .)
    FOR             reduce using rule 19 (type -> type_alias .)
    IF              reduce using rule 19 (type -> type_alias .)
    WHILE           reduce using rule 19 (type -> type_alias .)
    BREAK           reduce using rule 19 (type -> type_alias .)
    CONTINUE        reduce using rule 19 (type -> type_alias .)
    RETURN          reduce using rule 19 (type -> type_alias .)
    TYPE            reduce using rule 19 (type -> type_alias .)
    IDENTIFIER      reduce using rule 19 (type -> type_alias .)
    $end            reduce using rule 19 (type -> type_alias .)
    INPUT           reduce using rule 19 (type -> type_alias .)
    OUTPUT          reduce using rule 19 (type -> type_alias .)
    MODEL           reduce using rule 19 (type -> type_alias .)
    CHAT            reduce using rule 19 (type -> type_alias .)
    DEDENT          reduce using rule 19 (type -> type_alias .)
    RBRACKET        reduce using rule 19 (type -> type_alias .)
    INDENT          reduce using rule 19 (type -> type_alias .)
    COLON           reduce using rule 19 (type -> type_alias .)
    RBRACE          reduce using rule 19 (type -> type_alias .)


state 94

    (20) base_type -> TYPE_STR .

    EQUALS          reduce using rule 20 (base_type -> TYPE_STR .)
    COMMA           reduce using rule 20 (base_type -> TYPE_STR .)
    RPAREN          reduce using rule 20 (base_type -> TYPE_STR .)
    AGENT           reduce using rule 20 (base_type -> TYPE_STR .)
    CONNECT         reduce using rule 20 (base_type -> TYPE_STR .)
    FUN             reduce using rule 20 (base_type -> TYPE_STR .)
    FOR             reduce using rule 20 (base_type -> TYPE_STR .)
    IF              reduce using rule 20 (base_type -> TYPE_STR .)
    WHILE           reduce using rule 20 (base_type -> TYPE_STR .)
    BREAK           reduce using rule 20 (base_type -> TYPE_STR .)
    CONTINUE        reduce using rule 20 (base_type -> TYPE_STR .)
    RETURN          reduce using rule 20 (base_type -> TYPE_STR .)
    TYPE            reduce using rule 20 (base_type -> TYPE_STR .)
    IDENTIFIER      reduce using rule 20 (base_type -> TYPE_STR .)
    $end            reduce using rule 20 (base_type -> TYPE_STR .)
    INPUT           reduce using rule 20 (base_type -> TYPE_STR .)
    OUTPUT          reduce using rule 20 (base_type -> TYPE_STR .)
    MODEL           reduce using rule 20 (base_type -> TYPE_STR .)
    CHAT            reduce using rule 20 (base_type -> TYPE_STR .)
    DEDENT          reduce using rule 20 (base_type -> TYPE_STR .)
    RBRACKET        reduce using rule 20 (base_type -> TYPE_STR .)
    INDENT          reduce using rule 20 (base_type -> TYPE_STR .)
    COLON           reduce using rule 20 (base_type -> TYPE_STR .)
    RBRACE          reduce using rule 20 (base_type -> TYPE_STR .)


state 95

    (21) base_type -> TYPE_INT .

    EQUALS          reduce using rule 21 (base_type -> TYPE_INT .)
    COMMA           reduce using rule 21 (base_type -> TYPE_INT .)
    RPAREN          reduce using rule 21 (base_type -> TYPE_INT .)
    AGENT           reduce using rule 21 (base_type -> TYPE_INT .)
    CONNECT         reduce using rule 21 (base_type -> TYPE_INT .)
    FUN             reduce using rule 21 (base_type -> TYPE_INT .)
    FOR             reduce using rule 21 (base_type -> TYPE_INT .)
    IF              reduce using rule 21 (base_type -> TYPE_INT .)
    WHILE           reduce using rule 21 (base_type -> TYPE_INT .)
    BREAK           reduce using rule 21 (base_type -> TYPE_INT .)
    CONTINUE        reduce using rule 21 (base_type -> TYPE_INT .)
    RETURN          reduce using rule 21 (base_type -> TYPE_INT .)
    TYPE            reduce using rule 21 (base_type -> TYPE_INT .)
    IDENTIFIER      reduce using rule 21 (base_type -> TYPE_INT .)
    $end            reduce using rule 21 (base_type -> TYPE_INT .)
    INPUT           reduce using rule 21 (base_type -> TYPE_INT .)
    OUTPUT          reduce using rule 21 (base_type -> TYPE_INT .)
    MODEL           reduce using rule 21 (base_type -> TYPE_INT .)
    CHAT            reduce using rule 21 (base_type -> TYPE_INT .)
    DEDENT          reduce using rule 21 (base_type -> TYPE_INT .)
    RBRACKET        reduce using rule 21 (base_type -> TYPE_INT .)
    INDENT          reduce using rule 21 (base_type -> TYPE_INT .)
    COLON           reduce using rule 21 (base_type -> TYPE_INT .)
    RBRACE          reduce using rule 21 (base_type -> TYPE_INT .)


state 96

    (22) base_type -> TYPE_FLOAT .

    EQUALS          reduce using rule 22 (base_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 22 (base_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 22 (base_type -> TYPE_FLOAT .)
    AGENT           reduce using rule 22 (base_type -> TYPE_FLOAT .)
    CONNECT         reduce using rule 22 (base_type -> TYPE_FLOAT .)
    FUN             reduce using rule 22 (base_type -> TYPE_FLOAT .)
    FOR             reduce using rule 22 (base_type -> TYPE_FLOAT .)
    IF              reduce using rule 22 (base_type -> TYPE_FLOAT .)
    WHILE           reduce using rule 22 (base_type -> TYPE_FLOAT .)
    BREAK           reduce using rule 22 (base_type -> TYPE_FLOAT .)
    CONTINUE        reduce using rule 22 (base_type -> TYPE_FLOAT .)
    RETURN          reduce using rule 22 (base_type -> TYPE_FLOAT .)
    TYPE            reduce using rule 22 (base_type -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 22 (base_type -> TYPE_FLOAT .)
    $end            reduce using rule 22 (base_type -> TYPE_FLOAT .)
    INPUT           reduce using rule 22 (base_type -> TYPE_FLOAT .)
    OUTPUT          reduce using rule 22 (base_type -> TYPE_FLOAT .)
    MODEL           reduce using rule 22 (base_type -> TYPE_FLOAT .)
    CHAT            reduce using rule 22 (base_type -> TYPE_FLOAT .)
    DEDENT          reduce using rule 22 (base_type -> TYPE_FLOAT .)
    RBRACKET        reduce using rule 22 (base_type -> TYPE_FLOAT .)
    INDENT          reduce using rule 22 (base_type -> TYPE_FLOAT .)
    COLON           reduce using rule 22 (base_type -> TYPE_FLOAT .)
    RBRACE          reduce using rule 22 (base_type -> TYPE_FLOAT .)


state 97

    (23) base_type -> TYPE_BOOL .

    EQUALS          reduce using rule 23 (base_type -> TYPE_BOOL .)
    COMMA           reduce using rule 23 (base_type -> TYPE_BOOL .)
    RPAREN          reduce using rule 23 (base_type -> TYPE_BOOL .)
    AGENT           reduce using rule 23 (base_type -> TYPE_BOOL .)
    CONNECT         reduce using rule 23 (base_type -> TYPE_BOOL .)
    FUN             reduce using rule 23 (base_type -> TYPE_BOOL .)
    FOR             reduce using rule 23 (base_type -> TYPE_BOOL .)
    IF              reduce using rule 23 (base_type -> TYPE_BOOL .)
    WHILE           reduce using rule 23 (base_type -> TYPE_BOOL .)
    BREAK           reduce using rule 23 (base_type -> TYPE_BOOL .)
    CONTINUE        reduce using rule 23 (base_type -> TYPE_BOOL .)
    RETURN          reduce using rule 23 (base_type -> TYPE_BOOL .)
    TYPE            reduce using rule 23 (base_type -> TYPE_BOOL .)
    IDENTIFIER      reduce using rule 23 (base_type -> TYPE_BOOL .)
    $end            reduce using rule 23 (base_type -> TYPE_BOOL .)
    INPUT           reduce using rule 23 (base_type -> TYPE_BOOL .)
    OUTPUT          reduce using rule 23 (base_type -> TYPE_BOOL .)
    MODEL           reduce using rule 23 (base_type -> TYPE_BOOL .)
    CHAT            reduce using rule 23 (base_type -> TYPE_BOOL .)
    DEDENT          reduce using rule 23 (base_type -> TYPE_BOOL .)
    RBRACKET        reduce using rule 23 (base_type -> TYPE_BOOL .)
    INDENT          reduce using rule 23 (base_type -> TYPE_BOOL .)
    COLON           reduce using rule 23 (base_type -> TYPE_BOOL .)
    RBRACE          reduce using rule 23 (base_type -> TYPE_BOOL .)


state 98

    (24) base_type -> TYPE_UNIT .

    EQUALS          reduce using rule 24 (base_type -> TYPE_UNIT .)
    COMMA           reduce using rule 24 (base_type -> TYPE_UNIT .)
    RPAREN          reduce using rule 24 (base_type -> TYPE_UNIT .)
    AGENT           reduce using rule 24 (base_type -> TYPE_UNIT .)
    CONNECT         reduce using rule 24 (base_type -> TYPE_UNIT .)
    FUN             reduce using rule 24 (base_type -> TYPE_UNIT .)
    FOR             reduce using rule 24 (base_type -> TYPE_UNIT .)
    IF              reduce using rule 24 (base_type -> TYPE_UNIT .)
    WHILE           reduce using rule 24 (base_type -> TYPE_UNIT .)
    BREAK           reduce using rule 24 (base_type -> TYPE_UNIT .)
    CONTINUE        reduce using rule 24 (base_type -> TYPE_UNIT .)
    RETURN          reduce using rule 24 (base_type -> TYPE_UNIT .)
    TYPE            reduce using rule 24 (base_type -> TYPE_UNIT .)
    IDENTIFIER      reduce using rule 24 (base_type -> TYPE_UNIT .)
    $end            reduce using rule 24 (base_type -> TYPE_UNIT .)
    INPUT           reduce using rule 24 (base_type -> TYPE_UNIT .)
    OUTPUT          reduce using rule 24 (base_type -> TYPE_UNIT .)
    MODEL           reduce using rule 24 (base_type -> TYPE_UNIT .)
    CHAT            reduce using rule 24 (base_type -> TYPE_UNIT .)
    DEDENT          reduce using rule 24 (base_type -> TYPE_UNIT .)
    RBRACKET        reduce using rule 24 (base_type -> TYPE_UNIT .)
    INDENT          reduce using rule 24 (base_type -> TYPE_UNIT .)
    COLON           reduce using rule 24 (base_type -> TYPE_UNIT .)
    RBRACE          reduce using rule 24 (base_type -> TYPE_UNIT .)


state 99

    (30) list_type -> TYPE_LIST . LBRACKET type RBRACKET

    LBRACKET        shift and go to state 138


state 100

    (31) record_type -> TYPE_RECORD . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 139


state 101

    (27) func_ret_type -> LPAREN . type_list RPAREN
    (28) type_list -> . type
    (29) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type_list                      shift and go to state 140
    type                           shift and go to state 141
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 102

    (26) union_type -> TYPE_UNION . LBRACKET type_list RBRACKET

    LBRACKET        shift and go to state 142


state 103

    (25) type_alias -> IDENTIFIER .

    EQUALS          reduce using rule 25 (type_alias -> IDENTIFIER .)
    COMMA           reduce using rule 25 (type_alias -> IDENTIFIER .)
    RPAREN          reduce using rule 25 (type_alias -> IDENTIFIER .)
    AGENT           reduce using rule 25 (type_alias -> IDENTIFIER .)
    CONNECT         reduce using rule 25 (type_alias -> IDENTIFIER .)
    FUN             reduce using rule 25 (type_alias -> IDENTIFIER .)
    FOR             reduce using rule 25 (type_alias -> IDENTIFIER .)
    IF              reduce using rule 25 (type_alias -> IDENTIFIER .)
    WHILE           reduce using rule 25 (type_alias -> IDENTIFIER .)
    BREAK           reduce using rule 25 (type_alias -> IDENTIFIER .)
    CONTINUE        reduce using rule 25 (type_alias -> IDENTIFIER .)
    RETURN          reduce using rule 25 (type_alias -> IDENTIFIER .)
    TYPE            reduce using rule 25 (type_alias -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 25 (type_alias -> IDENTIFIER .)
    $end            reduce using rule 25 (type_alias -> IDENTIFIER .)
    INPUT           reduce using rule 25 (type_alias -> IDENTIFIER .)
    OUTPUT          reduce using rule 25 (type_alias -> IDENTIFIER .)
    MODEL           reduce using rule 25 (type_alias -> IDENTIFIER .)
    CHAT            reduce using rule 25 (type_alias -> IDENTIFIER .)
    DEDENT          reduce using rule 25 (type_alias -> IDENTIFIER .)
    RBRACKET        reduce using rule 25 (type_alias -> IDENTIFIER .)
    INDENT          reduce using rule 25 (type_alias -> IDENTIFIER .)
    COLON           reduce using rule 25 (type_alias -> IDENTIFIER .)
    RBRACE          reduce using rule 25 (type_alias -> IDENTIFIER .)


state 104

    (82) assign_stmt -> assign_target EQUALS expr .

    AGENT           reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    CONNECT         reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    FUN             reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    FOR             reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    IF              reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    WHILE           reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    BREAK           reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    CONTINUE        reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    RETURN          reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    TYPE            reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    IDENTIFIER      reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    $end            reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    INPUT           reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    OUTPUT          reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    MODEL           reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    CHAT            reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)
    DEDENT          reduce using rule 82 (assign_stmt -> assign_target EQUALS expr .)


state 105

    (84) assign_stmt -> assign_target EQUALS error .

    AGENT           reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    CONNECT         reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    FUN             reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    FOR             reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    IF              reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    WHILE           reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    BREAK           reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    CONTINUE        reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    RETURN          reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    TYPE            reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    IDENTIFIER      reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    $end            reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    INPUT           reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    OUTPUT          reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    MODEL           reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    CHAT            reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)
    DEDENT          reduce using rule 84 (assign_stmt -> assign_target EQUALS error .)


state 106

    (80) type_def_stmt -> TYPE IDENTIFIER EQUALS . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 143
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 107

    (35) agent_def -> AGENT identifier COLON INDENT . agent_body DEDENT
    (36) agent_body -> . agent_body_item agent_body
    (37) agent_body -> . agent_body_item
    (38) agent_body_item -> . input_block
    (39) agent_body_item -> . output_block
    (40) agent_body_item -> . model_block
    (41) agent_body_item -> . statement
    (42) agent_body_item -> . chat_block
    (43) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (44) input_block -> . INPUT COLON INDENT error DEDENT
    (45) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (46) output_block -> . OUTPUT COLON INDENT error DEDENT
    (47) model_block -> . MODEL COLON constant
    (48) model_block -> . MODEL COLON error
    (72) statement -> . for_stmt
    (73) statement -> . if_stmt
    (74) statement -> . while_stmt
    (75) statement -> . assign_stmt
    (76) statement -> . break_stmt
    (77) statement -> . continue_stmt
    (78) statement -> . return_stmt
    (79) statement -> . type_def_stmt
    (49) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (50) chat_block -> . CHAT COLON TRIPLE_STRING
    (89) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (90) for_stmt -> . FOR identifier IN error COLON stmt_block
    (93) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> . IF expr COLON stmt_block
    (95) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> . IF error COLON stmt_block
    (97) while_stmt -> . WHILE expr COLON stmt_block
    (98) while_stmt -> . WHILE error COLON stmt_block
    (81) assign_stmt -> . assign_target COLON type EQUALS expr
    (82) assign_stmt -> . assign_target EQUALS expr
    (83) assign_stmt -> . assign_target COLON type EQUALS error
    (84) assign_stmt -> . assign_target EQUALS error
    (91) break_stmt -> . BREAK
    (92) continue_stmt -> . CONTINUE
    (88) return_stmt -> . RETURN expr
    (80) type_def_stmt -> . TYPE IDENTIFIER EQUALS type
    (85) assign_target -> . identifier
    (86) assign_target -> . field_access
    (87) assign_target -> . index_access
    (110) identifier -> . IDENTIFIER
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET

    INPUT           shift and go to state 151
    OUTPUT          shift and go to state 152
    MODEL           shift and go to state 153
    CHAT            shift and go to state 154
    FOR             shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    TYPE            shift and go to state 27
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 17
    agent_body                     shift and go to state 144
    agent_body_item                shift and go to state 145
    input_block                    shift and go to state 146
    output_block                   shift and go to state 147
    model_block                    shift and go to state 148
    statement                      shift and go to state 149
    chat_block                     shift and go to state 150
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    type_def_stmt                  shift and go to state 15
    assign_target                  shift and go to state 23
    field_access                   shift and go to state 29
    index_access                   shift and go to state 30

state 108

    (124) index_access -> identifier LBRACKET expr RBRACKET .

    COLON           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    MOD             reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    EQ              reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    NEQ             reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    LT              reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    GT              reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    LE              reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    GE              reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    AGENT           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    CONNECT         reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    FUN             reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    FOR             reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    IF              reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    WHILE           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    BREAK           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    CONTINUE        reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    RETURN          reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    TYPE            reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    IDENTIFIER      reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    $end            reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    INPUT           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    OUTPUT          reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    MODEL           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    CHAT            reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    DEDENT          reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 124 (index_access -> identifier LBRACKET expr RBRACKET .)


state 109

    (51) connect_block -> CONNECT COLON INDENT connection_list . DEDENT

    DEDENT          shift and go to state 155


state 110

    (52) connection_list -> connection . connection_list
    (53) connection_list -> connection .
    (52) connection_list -> . connection connection_list
    (53) connection_list -> . connection
    (54) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (110) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 53 (connection_list -> connection .)
    IDENTIFIER      shift and go to state 28

    connection                     shift and go to state 110
    connection_list                shift and go to state 156
    identifier                     shift and go to state 111

state 111

    (54) connection -> identifier . COLON type INDENT agent_ref ARROW agent_ref DEDENT

    COLON           shift and go to state 157


state 112

    (10) var_decl -> identifier . COLON type EQUALS expr
    (11) var_decl -> identifier . COLON type
    (12) var_decl -> identifier . EQUALS expr
    (13) var_decl -> identifier .

    COLON           shift and go to state 158
    EQUALS          shift and go to state 159
    COMMA           reduce using rule 13 (var_decl -> identifier .)
    RPAREN          reduce using rule 13 (var_decl -> identifier .)
    IDENTIFIER      reduce using rule 13 (var_decl -> identifier .)
    DEDENT          reduce using rule 13 (var_decl -> identifier .)


state 113

    (60) func_def -> FUN identifier LPAREN param_list . RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN identifier LPAREN param_list . RPAREN COLON stmt_block

    RPAREN          shift and go to state 160


state 114

    (62) func_def -> FUN identifier LPAREN error . RPAREN ARROW type COLON stmt_block
    (63) func_def -> FUN identifier LPAREN error . RPAREN COLON stmt_block

    RPAREN          shift and go to state 161


state 115

    (64) param_list -> param_decl . param_list_tail
    (66) param_list_tail -> . COMMA param_decl param_list_tail
    (67) param_list_tail -> . empty
    (142) empty -> .

    COMMA           shift and go to state 163
    RPAREN          reduce using rule 142 (empty -> .)

    param_list_tail                shift and go to state 162
    empty                          shift and go to state 164

state 116

    (65) param_list -> empty .

    RPAREN          reduce using rule 65 (param_list -> empty .)


state 117

    (68) param_decl -> var_decl .

    COMMA           reduce using rule 68 (param_decl -> var_decl .)
    RPAREN          reduce using rule 68 (param_decl -> var_decl .)


state 118

    (89) for_stmt -> FOR identifier IN expr . COLON stmt_block

    COLON           shift and go to state 165


state 119

    (90) for_stmt -> FOR identifier IN error . COLON stmt_block

    COLON           shift and go to state 166


state 120

    (93) if_stmt -> IF expr COLON stmt_block . ELSE COLON stmt_block
    (94) if_stmt -> IF expr COLON stmt_block .

    ELSE            shift and go to state 167
    AGENT           reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    CONNECT         reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    FUN             reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    FOR             reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    IF              reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    WHILE           reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    BREAK           reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    CONTINUE        reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    RETURN          reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    TYPE            reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    $end            reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    INPUT           reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    OUTPUT          reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    MODEL           reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    CHAT            reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)
    DEDENT          reduce using rule 94 (if_stmt -> IF expr COLON stmt_block .)


state 121

    (69) stmt_block -> INDENT . statement_list DEDENT
    (70) statement_list -> . statement statement_list
    (71) statement_list -> . statement
    (72) statement -> . for_stmt
    (73) statement -> . if_stmt
    (74) statement -> . while_stmt
    (75) statement -> . assign_stmt
    (76) statement -> . break_stmt
    (77) statement -> . continue_stmt
    (78) statement -> . return_stmt
    (79) statement -> . type_def_stmt
    (89) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (90) for_stmt -> . FOR identifier IN error COLON stmt_block
    (93) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> . IF expr COLON stmt_block
    (95) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> . IF error COLON stmt_block
    (97) while_stmt -> . WHILE expr COLON stmt_block
    (98) while_stmt -> . WHILE error COLON stmt_block
    (81) assign_stmt -> . assign_target COLON type EQUALS expr
    (82) assign_stmt -> . assign_target EQUALS expr
    (83) assign_stmt -> . assign_target COLON type EQUALS error
    (84) assign_stmt -> . assign_target EQUALS error
    (91) break_stmt -> . BREAK
    (92) continue_stmt -> . CONTINUE
    (88) return_stmt -> . RETURN expr
    (80) type_def_stmt -> . TYPE IDENTIFIER EQUALS type
    (85) assign_target -> . identifier
    (86) assign_target -> . field_access
    (87) assign_target -> . index_access
    (110) identifier -> . IDENTIFIER
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET

    FOR             shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    TYPE            shift and go to state 27
    IDENTIFIER      shift and go to state 28

    statement_list                 shift and go to state 168
    statement                      shift and go to state 169
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    type_def_stmt                  shift and go to state 15
    identifier                     shift and go to state 17
    assign_target                  shift and go to state 23
    field_access                   shift and go to state 29
    index_access                   shift and go to state 30

state 122

    (95) if_stmt -> IF error COLON stmt_block . ELSE COLON stmt_block
    (96) if_stmt -> IF error COLON stmt_block .

    ELSE            shift and go to state 170
    AGENT           reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    CONNECT         reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    FUN             reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    FOR             reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    IF              reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    WHILE           reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    BREAK           reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    CONTINUE        reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    RETURN          reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    TYPE            reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    IDENTIFIER      reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    $end            reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    INPUT           reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    OUTPUT          reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    MODEL           reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    CHAT            reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)
    DEDENT          reduce using rule 96 (if_stmt -> IF error COLON stmt_block .)


state 123

    (99) expr -> expr_head bin_op expr_tail .

    COLON           reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    AGENT           reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    CONNECT         reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    FUN             reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    FOR             reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    IF              reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    WHILE           reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    BREAK           reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    CONTINUE        reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    RETURN          reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    TYPE            reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    IDENTIFIER      reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    $end            reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    INPUT           reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    OUTPUT          reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    MODEL           reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    CHAT            reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    DEDENT          reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    RBRACKET        reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    COMMA           reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    RPAREN          reduce using rule 99 (expr -> expr_head bin_op expr_tail .)
    RBRACE          reduce using rule 99 (expr -> expr_head bin_op expr_tail .)


state 124

    (107) expr_tail -> expr .

    COLON           reduce using rule 107 (expr_tail -> expr .)
    AGENT           reduce using rule 107 (expr_tail -> expr .)
    CONNECT         reduce using rule 107 (expr_tail -> expr .)
    FUN             reduce using rule 107 (expr_tail -> expr .)
    FOR             reduce using rule 107 (expr_tail -> expr .)
    IF              reduce using rule 107 (expr_tail -> expr .)
    WHILE           reduce using rule 107 (expr_tail -> expr .)
    BREAK           reduce using rule 107 (expr_tail -> expr .)
    CONTINUE        reduce using rule 107 (expr_tail -> expr .)
    RETURN          reduce using rule 107 (expr_tail -> expr .)
    TYPE            reduce using rule 107 (expr_tail -> expr .)
    IDENTIFIER      reduce using rule 107 (expr_tail -> expr .)
    $end            reduce using rule 107 (expr_tail -> expr .)
    INPUT           reduce using rule 107 (expr_tail -> expr .)
    OUTPUT          reduce using rule 107 (expr_tail -> expr .)
    MODEL           reduce using rule 107 (expr_tail -> expr .)
    CHAT            reduce using rule 107 (expr_tail -> expr .)
    DEDENT          reduce using rule 107 (expr_tail -> expr .)
    RBRACKET        reduce using rule 107 (expr_tail -> expr .)
    COMMA           reduce using rule 107 (expr_tail -> expr .)
    RPAREN          reduce using rule 107 (expr_tail -> expr .)
    RBRACE          reduce using rule 107 (expr_tail -> expr .)


state 125

    (126) func_call -> identifier LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 171


state 126

    (127) arg_list -> expr . arg_list_tail
    (129) arg_list_tail -> . COMMA expr arg_list_tail
    (130) arg_list_tail -> . empty
    (142) empty -> .

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 142 (empty -> .)

    arg_list_tail                  shift and go to state 172
    empty                          shift and go to state 174

state 127

    (128) arg_list -> empty .

    RPAREN          reduce using rule 128 (arg_list -> empty .)


state 128

    (113) list_expr -> LBRACKET list_elements RBRACKET .

    PLUS            reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    MINUS           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    TIMES           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    DIVIDE          reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    MOD             reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    EQ              reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    NEQ             reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    LT              reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    GT              reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    LE              reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    GE              reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    COLON           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    AGENT           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONNECT         reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    FUN             reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    FOR             reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    IF              reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    WHILE           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    BREAK           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONTINUE        reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    RETURN          reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    TYPE            reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    IDENTIFIER      reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    $end            reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    INPUT           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    OUTPUT          reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    MODEL           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    CHAT            reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    DEDENT          reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACKET        reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    COMMA           reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    RPAREN          reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACE          reduce using rule 113 (list_expr -> LBRACKET list_elements RBRACKET .)


state 129

    (114) list_elements -> expr list_elements_tail .

    RBRACKET        reduce using rule 114 (list_elements -> expr list_elements_tail .)


state 130

    (116) list_elements_tail -> COMMA . expr list_elements_tail
    (117) list_elements_tail -> COMMA . expr
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr                           shift and go to state 175
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 131

    (118) record_expr -> LBRACE record_elements RBRACE .

    PLUS            reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    MINUS           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    TIMES           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    DIVIDE          reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    MOD             reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    EQ              reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    NEQ             reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    LT              reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    GT              reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    LE              reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    GE              reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    COLON           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    AGENT           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    CONNECT         reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    FUN             reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    FOR             reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    IF              reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    WHILE           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    BREAK           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    CONTINUE        reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    RETURN          reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    TYPE            reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    IDENTIFIER      reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    $end            reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    INPUT           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    OUTPUT          reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    MODEL           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    CHAT            reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    DEDENT          reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACKET        reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    COMMA           reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    RPAREN          reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACE          reduce using rule 118 (record_expr -> LBRACE record_elements RBRACE .)


state 132

    (119) record_elements -> instance_assign record_elements_tail .

    RBRACE          reduce using rule 119 (record_elements -> instance_assign record_elements_tail .)


state 133

    (121) record_elements_tail -> COMMA . instance_assign record_elements_tail
    (122) record_elements_tail -> COMMA . instance_assign
    (123) instance_assign -> . identifier EQUALS expr
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    instance_assign                shift and go to state 176
    identifier                     shift and go to state 84

state 134

    (123) instance_assign -> identifier EQUALS . expr
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    identifier                     shift and go to state 47
    expr                           shift and go to state 177
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    constant                       shift and go to state 48

state 135

    (97) while_stmt -> WHILE expr COLON stmt_block .

    AGENT           reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    CONNECT         reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    FUN             reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    FOR             reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    IF              reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    WHILE           reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    BREAK           reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    CONTINUE        reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    RETURN          reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    TYPE            reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    $end            reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    INPUT           reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    OUTPUT          reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    MODEL           reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    CHAT            reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)
    DEDENT          reduce using rule 97 (while_stmt -> WHILE expr COLON stmt_block .)


state 136

    (98) while_stmt -> WHILE error COLON stmt_block .

    AGENT           reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    CONNECT         reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    FUN             reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    FOR             reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    IF              reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    WHILE           reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    BREAK           reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    CONTINUE        reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    RETURN          reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    TYPE            reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    IDENTIFIER      reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    $end            reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    INPUT           reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    OUTPUT          reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    MODEL           reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    CHAT            reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)
    DEDENT          reduce using rule 98 (while_stmt -> WHILE error COLON stmt_block .)


state 137

    (81) assign_stmt -> assign_target COLON type EQUALS . expr
    (83) assign_stmt -> assign_target COLON type EQUALS . error
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    error           shift and go to state 179
    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr                           shift and go to state 178
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 138

    (30) list_type -> TYPE_LIST LBRACKET . type RBRACKET
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 180
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 139

    (31) record_type -> TYPE_RECORD LBRACE . field_decl_list RBRACE
    (32) field_decl_list -> . field_decl COMMA field_decl_list
    (33) field_decl_list -> . field_decl
    (34) field_decl -> . identifier COLON type
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl_list                shift and go to state 181
    field_decl                     shift and go to state 182
    identifier                     shift and go to state 183

state 140

    (27) func_ret_type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 184


state 141

    (28) type_list -> type .
    (29) type_list -> type . COMMA type_list

    RPAREN          reduce using rule 28 (type_list -> type .)
    RBRACKET        reduce using rule 28 (type_list -> type .)
    COMMA           shift and go to state 185


state 142

    (26) union_type -> TYPE_UNION LBRACKET . type_list RBRACKET
    (28) type_list -> . type
    (29) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type_list                      shift and go to state 186
    type                           shift and go to state 141
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 143

    (80) type_def_stmt -> TYPE IDENTIFIER EQUALS type .

    AGENT           reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    CONNECT         reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    FUN             reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    FOR             reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    IF              reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    WHILE           reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    BREAK           reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    CONTINUE        reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    RETURN          reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    TYPE            reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    IDENTIFIER      reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    $end            reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    INPUT           reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    OUTPUT          reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    MODEL           reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    CHAT            reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)
    DEDENT          reduce using rule 80 (type_def_stmt -> TYPE IDENTIFIER EQUALS type .)


state 144

    (35) agent_def -> AGENT identifier COLON INDENT agent_body . DEDENT

    DEDENT          shift and go to state 187


state 145

    (36) agent_body -> agent_body_item . agent_body
    (37) agent_body -> agent_body_item .
    (36) agent_body -> . agent_body_item agent_body
    (37) agent_body -> . agent_body_item
    (38) agent_body_item -> . input_block
    (39) agent_body_item -> . output_block
    (40) agent_body_item -> . model_block
    (41) agent_body_item -> . statement
    (42) agent_body_item -> . chat_block
    (43) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (44) input_block -> . INPUT COLON INDENT error DEDENT
    (45) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (46) output_block -> . OUTPUT COLON INDENT error DEDENT
    (47) model_block -> . MODEL COLON constant
    (48) model_block -> . MODEL COLON error
    (72) statement -> . for_stmt
    (73) statement -> . if_stmt
    (74) statement -> . while_stmt
    (75) statement -> . assign_stmt
    (76) statement -> . break_stmt
    (77) statement -> . continue_stmt
    (78) statement -> . return_stmt
    (79) statement -> . type_def_stmt
    (49) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (50) chat_block -> . CHAT COLON TRIPLE_STRING
    (89) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (90) for_stmt -> . FOR identifier IN error COLON stmt_block
    (93) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> . IF expr COLON stmt_block
    (95) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> . IF error COLON stmt_block
    (97) while_stmt -> . WHILE expr COLON stmt_block
    (98) while_stmt -> . WHILE error COLON stmt_block
    (81) assign_stmt -> . assign_target COLON type EQUALS expr
    (82) assign_stmt -> . assign_target EQUALS expr
    (83) assign_stmt -> . assign_target COLON type EQUALS error
    (84) assign_stmt -> . assign_target EQUALS error
    (91) break_stmt -> . BREAK
    (92) continue_stmt -> . CONTINUE
    (88) return_stmt -> . RETURN expr
    (80) type_def_stmt -> . TYPE IDENTIFIER EQUALS type
    (85) assign_target -> . identifier
    (86) assign_target -> . field_access
    (87) assign_target -> . index_access
    (110) identifier -> . IDENTIFIER
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 37 (agent_body -> agent_body_item .)
    INPUT           shift and go to state 151
    OUTPUT          shift and go to state 152
    MODEL           shift and go to state 153
    CHAT            shift and go to state 154
    FOR             shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    TYPE            shift and go to state 27
    IDENTIFIER      shift and go to state 28

    agent_body_item                shift and go to state 145
    agent_body                     shift and go to state 188
    input_block                    shift and go to state 146
    output_block                   shift and go to state 147
    model_block                    shift and go to state 148
    statement                      shift and go to state 149
    chat_block                     shift and go to state 150
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    type_def_stmt                  shift and go to state 15
    identifier                     shift and go to state 17
    assign_target                  shift and go to state 23
    field_access                   shift and go to state 29
    index_access                   shift and go to state 30

state 146

    (38) agent_body_item -> input_block .

    INPUT           reduce using rule 38 (agent_body_item -> input_block .)
    OUTPUT          reduce using rule 38 (agent_body_item -> input_block .)
    MODEL           reduce using rule 38 (agent_body_item -> input_block .)
    CHAT            reduce using rule 38 (agent_body_item -> input_block .)
    FOR             reduce using rule 38 (agent_body_item -> input_block .)
    IF              reduce using rule 38 (agent_body_item -> input_block .)
    WHILE           reduce using rule 38 (agent_body_item -> input_block .)
    BREAK           reduce using rule 38 (agent_body_item -> input_block .)
    CONTINUE        reduce using rule 38 (agent_body_item -> input_block .)
    RETURN          reduce using rule 38 (agent_body_item -> input_block .)
    TYPE            reduce using rule 38 (agent_body_item -> input_block .)
    IDENTIFIER      reduce using rule 38 (agent_body_item -> input_block .)
    DEDENT          reduce using rule 38 (agent_body_item -> input_block .)


state 147

    (39) agent_body_item -> output_block .

    INPUT           reduce using rule 39 (agent_body_item -> output_block .)
    OUTPUT          reduce using rule 39 (agent_body_item -> output_block .)
    MODEL           reduce using rule 39 (agent_body_item -> output_block .)
    CHAT            reduce using rule 39 (agent_body_item -> output_block .)
    FOR             reduce using rule 39 (agent_body_item -> output_block .)
    IF              reduce using rule 39 (agent_body_item -> output_block .)
    WHILE           reduce using rule 39 (agent_body_item -> output_block .)
    BREAK           reduce using rule 39 (agent_body_item -> output_block .)
    CONTINUE        reduce using rule 39 (agent_body_item -> output_block .)
    RETURN          reduce using rule 39 (agent_body_item -> output_block .)
    TYPE            reduce using rule 39 (agent_body_item -> output_block .)
    IDENTIFIER      reduce using rule 39 (agent_body_item -> output_block .)
    DEDENT          reduce using rule 39 (agent_body_item -> output_block .)


state 148

    (40) agent_body_item -> model_block .

    INPUT           reduce using rule 40 (agent_body_item -> model_block .)
    OUTPUT          reduce using rule 40 (agent_body_item -> model_block .)
    MODEL           reduce using rule 40 (agent_body_item -> model_block .)
    CHAT            reduce using rule 40 (agent_body_item -> model_block .)
    FOR             reduce using rule 40 (agent_body_item -> model_block .)
    IF              reduce using rule 40 (agent_body_item -> model_block .)
    WHILE           reduce using rule 40 (agent_body_item -> model_block .)
    BREAK           reduce using rule 40 (agent_body_item -> model_block .)
    CONTINUE        reduce using rule 40 (agent_body_item -> model_block .)
    RETURN          reduce using rule 40 (agent_body_item -> model_block .)
    TYPE            reduce using rule 40 (agent_body_item -> model_block .)
    IDENTIFIER      reduce using rule 40 (agent_body_item -> model_block .)
    DEDENT          reduce using rule 40 (agent_body_item -> model_block .)


state 149

    (41) agent_body_item -> statement .

    INPUT           reduce using rule 41 (agent_body_item -> statement .)
    OUTPUT          reduce using rule 41 (agent_body_item -> statement .)
    MODEL           reduce using rule 41 (agent_body_item -> statement .)
    CHAT            reduce using rule 41 (agent_body_item -> statement .)
    FOR             reduce using rule 41 (agent_body_item -> statement .)
    IF              reduce using rule 41 (agent_body_item -> statement .)
    WHILE           reduce using rule 41 (agent_body_item -> statement .)
    BREAK           reduce using rule 41 (agent_body_item -> statement .)
    CONTINUE        reduce using rule 41 (agent_body_item -> statement .)
    RETURN          reduce using rule 41 (agent_body_item -> statement .)
    TYPE            reduce using rule 41 (agent_body_item -> statement .)
    IDENTIFIER      reduce using rule 41 (agent_body_item -> statement .)
    DEDENT          reduce using rule 41 (agent_body_item -> statement .)


state 150

    (42) agent_body_item -> chat_block .

    INPUT           reduce using rule 42 (agent_body_item -> chat_block .)
    OUTPUT          reduce using rule 42 (agent_body_item -> chat_block .)
    MODEL           reduce using rule 42 (agent_body_item -> chat_block .)
    CHAT            reduce using rule 42 (agent_body_item -> chat_block .)
    FOR             reduce using rule 42 (agent_body_item -> chat_block .)
    IF              reduce using rule 42 (agent_body_item -> chat_block .)
    WHILE           reduce using rule 42 (agent_body_item -> chat_block .)
    BREAK           reduce using rule 42 (agent_body_item -> chat_block .)
    CONTINUE        reduce using rule 42 (agent_body_item -> chat_block .)
    RETURN          reduce using rule 42 (agent_body_item -> chat_block .)
    TYPE            reduce using rule 42 (agent_body_item -> chat_block .)
    IDENTIFIER      reduce using rule 42 (agent_body_item -> chat_block .)
    DEDENT          reduce using rule 42 (agent_body_item -> chat_block .)


state 151

    (43) input_block -> INPUT . COLON INDENT var_decl_list DEDENT
    (44) input_block -> INPUT . COLON INDENT error DEDENT

    COLON           shift and go to state 189


state 152

    (45) output_block -> OUTPUT . COLON INDENT var_decl_list DEDENT
    (46) output_block -> OUTPUT . COLON INDENT error DEDENT

    COLON           shift and go to state 190


state 153

    (47) model_block -> MODEL . COLON constant
    (48) model_block -> MODEL . COLON error

    COLON           shift and go to state 191


state 154

    (49) chat_block -> CHAT . identifier COLON TRIPLE_STRING
    (50) chat_block -> CHAT . COLON TRIPLE_STRING
    (110) identifier -> . IDENTIFIER

    COLON           shift and go to state 193
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 192

state 155

    (51) connect_block -> CONNECT COLON INDENT connection_list DEDENT .

    AGENT           reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONNECT         reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FUN             reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FOR             reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IF              reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    WHILE           reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    BREAK           reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONTINUE        reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    RETURN          reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    TYPE            reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IDENTIFIER      reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    $end            reduce using rule 51 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)


state 156

    (52) connection_list -> connection connection_list .

    DEDENT          reduce using rule 52 (connection_list -> connection connection_list .)


state 157

    (54) connection -> identifier COLON . type INDENT agent_ref ARROW agent_ref DEDENT
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 194
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 158

    (10) var_decl -> identifier COLON . type EQUALS expr
    (11) var_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 195
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 159

    (12) var_decl -> identifier EQUALS . expr
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    identifier                     shift and go to state 47
    expr                           shift and go to state 196
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    constant                       shift and go to state 48

state 160

    (60) func_def -> FUN identifier LPAREN param_list RPAREN . ARROW type COLON stmt_block
    (61) func_def -> FUN identifier LPAREN param_list RPAREN . COLON stmt_block

    ARROW           shift and go to state 197
    COLON           shift and go to state 198


state 161

    (62) func_def -> FUN identifier LPAREN error RPAREN . ARROW type COLON stmt_block
    (63) func_def -> FUN identifier LPAREN error RPAREN . COLON stmt_block

    ARROW           shift and go to state 199
    COLON           shift and go to state 200


state 162

    (64) param_list -> param_decl param_list_tail .

    RPAREN          reduce using rule 64 (param_list -> param_decl param_list_tail .)


state 163

    (66) param_list_tail -> COMMA . param_decl param_list_tail
    (68) param_decl -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    param_decl                     shift and go to state 201
    var_decl                       shift and go to state 117
    identifier                     shift and go to state 112

state 164

    (67) param_list_tail -> empty .

    RPAREN          reduce using rule 67 (param_list_tail -> empty .)


state 165

    (89) for_stmt -> FOR identifier IN expr COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 202

state 166

    (90) for_stmt -> FOR identifier IN error COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 203

state 167

    (93) if_stmt -> IF expr COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 204


state 168

    (69) stmt_block -> INDENT statement_list . DEDENT

    DEDENT          shift and go to state 205


state 169

    (70) statement_list -> statement . statement_list
    (71) statement_list -> statement .
    (70) statement_list -> . statement statement_list
    (71) statement_list -> . statement
    (72) statement -> . for_stmt
    (73) statement -> . if_stmt
    (74) statement -> . while_stmt
    (75) statement -> . assign_stmt
    (76) statement -> . break_stmt
    (77) statement -> . continue_stmt
    (78) statement -> . return_stmt
    (79) statement -> . type_def_stmt
    (89) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (90) for_stmt -> . FOR identifier IN error COLON stmt_block
    (93) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (94) if_stmt -> . IF expr COLON stmt_block
    (95) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (96) if_stmt -> . IF error COLON stmt_block
    (97) while_stmt -> . WHILE expr COLON stmt_block
    (98) while_stmt -> . WHILE error COLON stmt_block
    (81) assign_stmt -> . assign_target COLON type EQUALS expr
    (82) assign_stmt -> . assign_target EQUALS expr
    (83) assign_stmt -> . assign_target COLON type EQUALS error
    (84) assign_stmt -> . assign_target EQUALS error
    (91) break_stmt -> . BREAK
    (92) continue_stmt -> . CONTINUE
    (88) return_stmt -> . RETURN expr
    (80) type_def_stmt -> . TYPE IDENTIFIER EQUALS type
    (85) assign_target -> . identifier
    (86) assign_target -> . field_access
    (87) assign_target -> . index_access
    (110) identifier -> . IDENTIFIER
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 71 (statement_list -> statement .)
    FOR             shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    BREAK           shift and go to state 24
    CONTINUE        shift and go to state 25
    RETURN          shift and go to state 26
    TYPE            shift and go to state 27
    IDENTIFIER      shift and go to state 28

    statement                      shift and go to state 169
    statement_list                 shift and go to state 206
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    type_def_stmt                  shift and go to state 15
    identifier                     shift and go to state 17
    assign_target                  shift and go to state 23
    field_access                   shift and go to state 29
    index_access                   shift and go to state 30

state 170

    (95) if_stmt -> IF error COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 207


state 171

    (126) func_call -> identifier LPAREN arg_list RPAREN .

    PLUS            reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    MOD             reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    EQ              reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    LT              reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    GT              reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    LE              reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    GE              reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    COLON           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    AGENT           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONNECT         reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    FUN             reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    FOR             reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    IF              reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    TYPE            reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    $end            reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    INPUT           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    OUTPUT          reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    MODEL           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    CHAT            reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    DEDENT          reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 126 (func_call -> identifier LPAREN arg_list RPAREN .)


state 172

    (127) arg_list -> expr arg_list_tail .

    RPAREN          reduce using rule 127 (arg_list -> expr arg_list_tail .)


state 173

    (129) arg_list_tail -> COMMA . expr arg_list_tail
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    expr                           shift and go to state 208
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    identifier                     shift and go to state 47
    constant                       shift and go to state 48

state 174

    (130) arg_list_tail -> empty .

    RPAREN          reduce using rule 130 (arg_list_tail -> empty .)


state 175

    (116) list_elements_tail -> COMMA expr . list_elements_tail
    (117) list_elements_tail -> COMMA expr .
    (116) list_elements_tail -> . COMMA expr list_elements_tail
    (117) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 117 (list_elements_tail -> COMMA expr .)
    COMMA           shift and go to state 130

    list_elements_tail             shift and go to state 209

state 176

    (121) record_elements_tail -> COMMA instance_assign . record_elements_tail
    (122) record_elements_tail -> COMMA instance_assign .
    (121) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (122) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 122 (record_elements_tail -> COMMA instance_assign .)
    COMMA           shift and go to state 133

    record_elements_tail           shift and go to state 210

state 177

    (123) instance_assign -> identifier EQUALS expr .

    COMMA           reduce using rule 123 (instance_assign -> identifier EQUALS expr .)
    RBRACE          reduce using rule 123 (instance_assign -> identifier EQUALS expr .)


state 178

    (81) assign_stmt -> assign_target COLON type EQUALS expr .

    AGENT           reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONNECT         reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FUN             reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FOR             reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IF              reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    WHILE           reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    BREAK           reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONTINUE        reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    RETURN          reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    TYPE            reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    $end            reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    INPUT           reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    OUTPUT          reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    MODEL           reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CHAT            reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)
    DEDENT          reduce using rule 81 (assign_stmt -> assign_target COLON type EQUALS expr .)


state 179

    (83) assign_stmt -> assign_target COLON type EQUALS error .

    AGENT           reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    CONNECT         reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    FUN             reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    FOR             reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    IF              reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    WHILE           reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    BREAK           reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    CONTINUE        reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    RETURN          reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    TYPE            reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    IDENTIFIER      reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    $end            reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    INPUT           reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    OUTPUT          reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    MODEL           reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    CHAT            reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)
    DEDENT          reduce using rule 83 (assign_stmt -> assign_target COLON type EQUALS error .)


state 180

    (30) list_type -> TYPE_LIST LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 211


state 181

    (31) record_type -> TYPE_RECORD LBRACE field_decl_list . RBRACE

    RBRACE          shift and go to state 212


state 182

    (32) field_decl_list -> field_decl . COMMA field_decl_list
    (33) field_decl_list -> field_decl .

    COMMA           shift and go to state 213
    RBRACE          reduce using rule 33 (field_decl_list -> field_decl .)


state 183

    (34) field_decl -> identifier . COLON type

    COLON           shift and go to state 214


state 184

    (27) func_ret_type -> LPAREN type_list RPAREN .

    EQUALS          reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    COMMA           reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    RPAREN          reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    AGENT           reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    CONNECT         reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    FUN             reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    FOR             reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    IF              reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    WHILE           reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    BREAK           reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    CONTINUE        reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    RETURN          reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    TYPE            reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    IDENTIFIER      reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    $end            reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    INPUT           reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    OUTPUT          reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    MODEL           reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    CHAT            reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    DEDENT          reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACKET        reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    INDENT          reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    COLON           reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACE          reduce using rule 27 (func_ret_type -> LPAREN type_list RPAREN .)


state 185

    (29) type_list -> type COMMA . type_list
    (28) type_list -> . type
    (29) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 141
    type_list                      shift and go to state 215
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 186

    (26) union_type -> TYPE_UNION LBRACKET type_list . RBRACKET

    RBRACKET        shift and go to state 216


state 187

    (35) agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .

    AGENT           reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONNECT         reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FUN             reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FOR             reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IF              reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    WHILE           reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    BREAK           reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONTINUE        reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    RETURN          reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    TYPE            reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IDENTIFIER      reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    $end            reduce using rule 35 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)


state 188

    (36) agent_body -> agent_body_item agent_body .

    DEDENT          reduce using rule 36 (agent_body -> agent_body_item agent_body .)


state 189

    (43) input_block -> INPUT COLON . INDENT var_decl_list DEDENT
    (44) input_block -> INPUT COLON . INDENT error DEDENT

    INDENT          shift and go to state 217


state 190

    (45) output_block -> OUTPUT COLON . INDENT var_decl_list DEDENT
    (46) output_block -> OUTPUT COLON . INDENT error DEDENT

    INDENT          shift and go to state 218


state 191

    (47) model_block -> MODEL COLON . constant
    (48) model_block -> MODEL COLON . error
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    error           shift and go to state 220
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    constant                       shift and go to state 219

state 192

    (49) chat_block -> CHAT identifier . COLON TRIPLE_STRING

    COLON           shift and go to state 221


state 193

    (50) chat_block -> CHAT COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 222


state 194

    (54) connection -> identifier COLON type . INDENT agent_ref ARROW agent_ref DEDENT

    INDENT          shift and go to state 223


state 195

    (10) var_decl -> identifier COLON type . EQUALS expr
    (11) var_decl -> identifier COLON type .

    EQUALS          shift and go to state 224
    COMMA           reduce using rule 11 (var_decl -> identifier COLON type .)
    RPAREN          reduce using rule 11 (var_decl -> identifier COLON type .)
    IDENTIFIER      reduce using rule 11 (var_decl -> identifier COLON type .)
    DEDENT          reduce using rule 11 (var_decl -> identifier COLON type .)


state 196

    (12) var_decl -> identifier EQUALS expr .

    COMMA           reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    RPAREN          reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    IDENTIFIER      reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    DEDENT          reduce using rule 12 (var_decl -> identifier EQUALS expr .)


state 197

    (60) func_def -> FUN identifier LPAREN param_list RPAREN ARROW . type COLON stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 225
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 198

    (61) func_def -> FUN identifier LPAREN param_list RPAREN COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 226

state 199

    (62) func_def -> FUN identifier LPAREN error RPAREN ARROW . type COLON stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 227
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 200

    (63) func_def -> FUN identifier LPAREN error RPAREN COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 228

state 201

    (66) param_list_tail -> COMMA param_decl . param_list_tail
    (66) param_list_tail -> . COMMA param_decl param_list_tail
    (67) param_list_tail -> . empty
    (142) empty -> .

    COMMA           shift and go to state 163
    RPAREN          reduce using rule 142 (empty -> .)

    param_list_tail                shift and go to state 229
    empty                          shift and go to state 164

state 202

    (89) for_stmt -> FOR identifier IN expr COLON stmt_block .

    AGENT           reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONNECT         reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FUN             reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FOR             reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IF              reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    WHILE           reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    BREAK           reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONTINUE        reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    RETURN          reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    TYPE            reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    $end            reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    INPUT           reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    OUTPUT          reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    MODEL           reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CHAT            reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    DEDENT          reduce using rule 89 (for_stmt -> FOR identifier IN expr COLON stmt_block .)


state 203

    (90) for_stmt -> FOR identifier IN error COLON stmt_block .

    AGENT           reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    CONNECT         reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    FUN             reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    FOR             reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    IF              reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    WHILE           reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    BREAK           reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    CONTINUE        reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    RETURN          reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    TYPE            reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    IDENTIFIER      reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    $end            reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    INPUT           reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    OUTPUT          reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    MODEL           reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    CHAT            reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    DEDENT          reduce using rule 90 (for_stmt -> FOR identifier IN error COLON stmt_block .)


state 204

    (93) if_stmt -> IF expr COLON stmt_block ELSE COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 230

state 205

    (69) stmt_block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    AGENT           reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    CONNECT         reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    FUN             reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    BREAK           reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    CONTINUE        reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    TYPE            reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    IDENTIFIER      reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    INPUT           reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    OUTPUT          reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    MODEL           reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    CHAT            reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 69 (stmt_block -> INDENT statement_list DEDENT .)


state 206

    (70) statement_list -> statement statement_list .

    DEDENT          reduce using rule 70 (statement_list -> statement statement_list .)


state 207

    (95) if_stmt -> IF error COLON stmt_block ELSE COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 231

state 208

    (129) arg_list_tail -> COMMA expr . arg_list_tail
    (129) arg_list_tail -> . COMMA expr arg_list_tail
    (130) arg_list_tail -> . empty
    (142) empty -> .

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 142 (empty -> .)

    arg_list_tail                  shift and go to state 232
    empty                          shift and go to state 174

state 209

    (116) list_elements_tail -> COMMA expr list_elements_tail .

    RBRACKET        reduce using rule 116 (list_elements_tail -> COMMA expr list_elements_tail .)


state 210

    (121) record_elements_tail -> COMMA instance_assign record_elements_tail .

    RBRACE          reduce using rule 121 (record_elements_tail -> COMMA instance_assign record_elements_tail .)


state 211

    (30) list_type -> TYPE_LIST LBRACKET type RBRACKET .

    EQUALS          reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COMMA           reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    AGENT           reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    CONNECT         reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    FUN             reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    FOR             reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    IF              reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    WHILE           reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    BREAK           reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    CONTINUE        reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RETURN          reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    TYPE            reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    IDENTIFIER      reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    $end            reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    INPUT           reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    OUTPUT          reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    MODEL           reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    CHAT            reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    DEDENT          reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    INDENT          reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COLON           reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACE          reduce using rule 30 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)


state 212

    (31) record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .

    EQUALS          reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COMMA           reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RPAREN          reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    AGENT           reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    CONNECT         reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    FUN             reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    FOR             reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IF              reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    WHILE           reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    BREAK           reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    CONTINUE        reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RETURN          reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    TYPE            reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IDENTIFIER      reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    $end            reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    INPUT           reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    OUTPUT          reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    MODEL           reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    CHAT            reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    DEDENT          reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACKET        reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    INDENT          reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COLON           reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACE          reduce using rule 31 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)


state 213

    (32) field_decl_list -> field_decl COMMA . field_decl_list
    (32) field_decl_list -> . field_decl COMMA field_decl_list
    (33) field_decl_list -> . field_decl
    (34) field_decl -> . identifier COLON type
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl                     shift and go to state 182
    field_decl_list                shift and go to state 233
    identifier                     shift and go to state 183

state 214

    (34) field_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) type -> . type_alias
    (20) base_type -> . TYPE_STR
    (21) base_type -> . TYPE_INT
    (22) base_type -> . TYPE_FLOAT
    (23) base_type -> . TYPE_BOOL
    (24) base_type -> . TYPE_UNIT
    (30) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (31) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (27) func_ret_type -> . LPAREN type_list RPAREN
    (26) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET
    (25) type_alias -> . IDENTIFIER

    TYPE_STR        shift and go to state 94
    TYPE_INT        shift and go to state 95
    TYPE_FLOAT      shift and go to state 96
    TYPE_BOOL       shift and go to state 97
    TYPE_UNIT       shift and go to state 98
    TYPE_LIST       shift and go to state 99
    TYPE_RECORD     shift and go to state 100
    LPAREN          shift and go to state 101
    TYPE_UNION      shift and go to state 102
    IDENTIFIER      shift and go to state 103

    type                           shift and go to state 234
    base_type                      shift and go to state 88
    list_type                      shift and go to state 89
    record_type                    shift and go to state 90
    func_ret_type                  shift and go to state 91
    union_type                     shift and go to state 92
    type_alias                     shift and go to state 93

state 215

    (29) type_list -> type COMMA type_list .

    RPAREN          reduce using rule 29 (type_list -> type COMMA type_list .)
    RBRACKET        reduce using rule 29 (type_list -> type COMMA type_list .)


state 216

    (26) union_type -> TYPE_UNION LBRACKET type_list RBRACKET .

    EQUALS          reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    COMMA           reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RPAREN          reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    AGENT           reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    CONNECT         reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    FUN             reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    FOR             reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    IF              reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    WHILE           reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    BREAK           reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    CONTINUE        reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RETURN          reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    TYPE            reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    IDENTIFIER      reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    $end            reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    INPUT           reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    OUTPUT          reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    MODEL           reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    CHAT            reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    DEDENT          reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RBRACKET        reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    INDENT          reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    COLON           reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RBRACE          reduce using rule 26 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)


state 217

    (43) input_block -> INPUT COLON INDENT . var_decl_list DEDENT
    (44) input_block -> INPUT COLON INDENT . error DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (110) identifier -> . IDENTIFIER

    error           shift and go to state 236
    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 235
    var_decl                       shift and go to state 237
    identifier                     shift and go to state 112

state 218

    (45) output_block -> OUTPUT COLON INDENT . var_decl_list DEDENT
    (46) output_block -> OUTPUT COLON INDENT . error DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (110) identifier -> . IDENTIFIER

    error           shift and go to state 239
    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 238
    var_decl                       shift and go to state 237
    identifier                     shift and go to state 112

state 219

    (47) model_block -> MODEL COLON constant .

    INPUT           reduce using rule 47 (model_block -> MODEL COLON constant .)
    OUTPUT          reduce using rule 47 (model_block -> MODEL COLON constant .)
    MODEL           reduce using rule 47 (model_block -> MODEL COLON constant .)
    CHAT            reduce using rule 47 (model_block -> MODEL COLON constant .)
    FOR             reduce using rule 47 (model_block -> MODEL COLON constant .)
    IF              reduce using rule 47 (model_block -> MODEL COLON constant .)
    WHILE           reduce using rule 47 (model_block -> MODEL COLON constant .)
    BREAK           reduce using rule 47 (model_block -> MODEL COLON constant .)
    CONTINUE        reduce using rule 47 (model_block -> MODEL COLON constant .)
    RETURN          reduce using rule 47 (model_block -> MODEL COLON constant .)
    TYPE            reduce using rule 47 (model_block -> MODEL COLON constant .)
    IDENTIFIER      reduce using rule 47 (model_block -> MODEL COLON constant .)
    DEDENT          reduce using rule 47 (model_block -> MODEL COLON constant .)


state 220

    (48) model_block -> MODEL COLON error .

    INPUT           reduce using rule 48 (model_block -> MODEL COLON error .)
    OUTPUT          reduce using rule 48 (model_block -> MODEL COLON error .)
    MODEL           reduce using rule 48 (model_block -> MODEL COLON error .)
    CHAT            reduce using rule 48 (model_block -> MODEL COLON error .)
    FOR             reduce using rule 48 (model_block -> MODEL COLON error .)
    IF              reduce using rule 48 (model_block -> MODEL COLON error .)
    WHILE           reduce using rule 48 (model_block -> MODEL COLON error .)
    BREAK           reduce using rule 48 (model_block -> MODEL COLON error .)
    CONTINUE        reduce using rule 48 (model_block -> MODEL COLON error .)
    RETURN          reduce using rule 48 (model_block -> MODEL COLON error .)
    TYPE            reduce using rule 48 (model_block -> MODEL COLON error .)
    IDENTIFIER      reduce using rule 48 (model_block -> MODEL COLON error .)
    DEDENT          reduce using rule 48 (model_block -> MODEL COLON error .)


state 221

    (49) chat_block -> CHAT identifier COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 240


state 222

    (50) chat_block -> CHAT COLON TRIPLE_STRING .

    INPUT           reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    MODEL           reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CHAT            reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    FOR             reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IF              reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    WHILE           reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    BREAK           reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    RETURN          reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    TYPE            reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 50 (chat_block -> CHAT COLON TRIPLE_STRING .)


state 223

    (54) connection -> identifier COLON type INDENT . agent_ref ARROW agent_ref DEDENT
    (55) agent_ref -> . identifier agent_ref_tail
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 241
    agent_ref                      shift and go to state 242

state 224

    (10) var_decl -> identifier COLON type EQUALS . expr
    (99) expr -> . expr_head bin_op expr_tail
    (100) expr -> . expr_head
    (101) expr_head -> . atom
    (102) expr_head -> . list_expr
    (103) expr_head -> . record_expr
    (104) expr_head -> . field_access
    (105) expr_head -> . index_access
    (106) expr_head -> . func_call
    (108) atom -> . identifier
    (109) atom -> . constant
    (113) list_expr -> . LBRACKET list_elements RBRACKET
    (118) record_expr -> . LBRACE record_elements RBRACE
    (125) field_access -> . identifier DOT identifier
    (124) index_access -> . identifier LBRACKET expr RBRACKET
    (126) func_call -> . identifier LPAREN arg_list RPAREN
    (110) identifier -> . IDENTIFIER
    (111) constant -> . STRING
    (112) constant -> . NUMBER

    LBRACKET        shift and go to state 49
    LBRACE          shift and go to state 50
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52

    identifier                     shift and go to state 47
    expr                           shift and go to state 243
    expr_head                      shift and go to state 40
    atom                           shift and go to state 41
    list_expr                      shift and go to state 42
    record_expr                    shift and go to state 43
    field_access                   shift and go to state 44
    index_access                   shift and go to state 45
    func_call                      shift and go to state 46
    constant                       shift and go to state 48

state 225

    (60) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type . COLON stmt_block

    COLON           shift and go to state 244


state 226

    (61) func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .

    AGENT           reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FUN             reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FOR             reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IF              reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    WHILE           reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    BREAK           reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    RETURN          reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    TYPE            reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    $end            reduce using rule 61 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)


state 227

    (62) func_def -> FUN identifier LPAREN error RPAREN ARROW type . COLON stmt_block

    COLON           shift and go to state 245


state 228

    (63) func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .

    AGENT           reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    FUN             reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    FOR             reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    IF              reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    WHILE           reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    BREAK           reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    RETURN          reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    TYPE            reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    $end            reduce using rule 63 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)


state 229

    (66) param_list_tail -> COMMA param_decl param_list_tail .

    RPAREN          reduce using rule 66 (param_list_tail -> COMMA param_decl param_list_tail .)


state 230

    (93) if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FUN             reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    TYPE            reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 93 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)


state 231

    (95) if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    FUN             reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    TYPE            reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 95 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)


state 232

    (129) arg_list_tail -> COMMA expr arg_list_tail .

    RPAREN          reduce using rule 129 (arg_list_tail -> COMMA expr arg_list_tail .)


state 233

    (32) field_decl_list -> field_decl COMMA field_decl_list .

    RBRACE          reduce using rule 32 (field_decl_list -> field_decl COMMA field_decl_list .)


state 234

    (34) field_decl -> identifier COLON type .

    COMMA           reduce using rule 34 (field_decl -> identifier COLON type .)
    RBRACE          reduce using rule 34 (field_decl -> identifier COLON type .)


state 235

    (43) input_block -> INPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 246


state 236

    (44) input_block -> INPUT COLON INDENT error . DEDENT

    DEDENT          shift and go to state 247


state 237

    (8) var_decl_list -> var_decl . var_decl_list
    (9) var_decl_list -> var_decl .
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (110) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 9 (var_decl_list -> var_decl .)
    IDENTIFIER      shift and go to state 28

    var_decl                       shift and go to state 237
    var_decl_list                  shift and go to state 248
    identifier                     shift and go to state 112

state 238

    (45) output_block -> OUTPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 249


state 239

    (46) output_block -> OUTPUT COLON INDENT error . DEDENT

    DEDENT          shift and go to state 250


state 240

    (49) chat_block -> CHAT identifier COLON TRIPLE_STRING .

    INPUT           reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    MODEL           reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CHAT            reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    FOR             reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IF              reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    WHILE           reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    BREAK           reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    RETURN          reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    TYPE            reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 49 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)


state 241

    (55) agent_ref -> identifier . agent_ref_tail
    (56) agent_ref_tail -> . DOT identifier agent_ref_tail
    (57) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (58) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (59) agent_ref_tail -> . empty
    (142) empty -> .

    DOT             shift and go to state 252
    ARROW           reduce using rule 142 (empty -> .)
    DEDENT          reduce using rule 142 (empty -> .)

    agent_ref_tail                 shift and go to state 251
    empty                          shift and go to state 253

state 242

    (54) connection -> identifier COLON type INDENT agent_ref . ARROW agent_ref DEDENT

    ARROW           shift and go to state 254


state 243

    (10) var_decl -> identifier COLON type EQUALS expr .

    COMMA           reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    RPAREN          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    DEDENT          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)


state 244

    (60) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 255

state 245

    (62) func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON . stmt_block
    (69) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 121

    stmt_block                     shift and go to state 256

state 246

    (43) input_block -> INPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    TYPE            reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 43 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)


state 247

    (44) input_block -> INPUT COLON INDENT error DEDENT .

    INPUT           reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    OUTPUT          reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    MODEL           reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    CHAT            reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    FOR             reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    IF              reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    WHILE           reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    BREAK           reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    CONTINUE        reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    RETURN          reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    TYPE            reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    IDENTIFIER      reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)
    DEDENT          reduce using rule 44 (input_block -> INPUT COLON INDENT error DEDENT .)


state 248

    (8) var_decl_list -> var_decl var_decl_list .

    DEDENT          reduce using rule 8 (var_decl_list -> var_decl var_decl_list .)


state 249

    (45) output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    TYPE            reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 45 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)


state 250

    (46) output_block -> OUTPUT COLON INDENT error DEDENT .

    INPUT           reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    OUTPUT          reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    MODEL           reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    CHAT            reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    FOR             reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    IF              reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    WHILE           reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    BREAK           reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    CONTINUE        reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    RETURN          reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    TYPE            reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    IDENTIFIER      reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    DEDENT          reduce using rule 46 (output_block -> OUTPUT COLON INDENT error DEDENT .)


state 251

    (55) agent_ref -> identifier agent_ref_tail .

    ARROW           reduce using rule 55 (agent_ref -> identifier agent_ref_tail .)
    DEDENT          reduce using rule 55 (agent_ref -> identifier agent_ref_tail .)


state 252

    (56) agent_ref_tail -> DOT . identifier agent_ref_tail
    (57) agent_ref_tail -> DOT . OUTPUT agent_ref_tail
    (58) agent_ref_tail -> DOT . INPUT agent_ref_tail
    (110) identifier -> . IDENTIFIER

    OUTPUT          shift and go to state 258
    INPUT           shift and go to state 259
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 257

state 253

    (59) agent_ref_tail -> empty .

    ARROW           reduce using rule 59 (agent_ref_tail -> empty .)
    DEDENT          reduce using rule 59 (agent_ref_tail -> empty .)


state 254

    (54) connection -> identifier COLON type INDENT agent_ref ARROW . agent_ref DEDENT
    (55) agent_ref -> . identifier agent_ref_tail
    (110) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 241
    agent_ref                      shift and go to state 260

state 255

    (60) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .

    AGENT           reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONNECT         reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FUN             reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FOR             reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IF              reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    WHILE           reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    BREAK           reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONTINUE        reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    RETURN          reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    TYPE            reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IDENTIFIER      reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    $end            reduce using rule 60 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)


state 256

    (62) func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .

    AGENT           reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    CONNECT         reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    FUN             reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    FOR             reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    IF              reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    WHILE           reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    BREAK           reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    CONTINUE        reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    RETURN          reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    TYPE            reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    IDENTIFIER      reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    $end            reduce using rule 62 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)


state 257

    (56) agent_ref_tail -> DOT identifier . agent_ref_tail
    (56) agent_ref_tail -> . DOT identifier agent_ref_tail
    (57) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (58) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (59) agent_ref_tail -> . empty
    (142) empty -> .

    DOT             shift and go to state 252
    ARROW           reduce using rule 142 (empty -> .)
    DEDENT          reduce using rule 142 (empty -> .)

    agent_ref_tail                 shift and go to state 261
    empty                          shift and go to state 253

state 258

    (57) agent_ref_tail -> DOT OUTPUT . agent_ref_tail
    (56) agent_ref_tail -> . DOT identifier agent_ref_tail
    (57) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (58) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (59) agent_ref_tail -> . empty
    (142) empty -> .

    DOT             shift and go to state 252
    ARROW           reduce using rule 142 (empty -> .)
    DEDENT          reduce using rule 142 (empty -> .)

    agent_ref_tail                 shift and go to state 262
    empty                          shift and go to state 253

state 259

    (58) agent_ref_tail -> DOT INPUT . agent_ref_tail
    (56) agent_ref_tail -> . DOT identifier agent_ref_tail
    (57) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (58) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (59) agent_ref_tail -> . empty
    (142) empty -> .

    DOT             shift and go to state 252
    ARROW           reduce using rule 142 (empty -> .)
    DEDENT          reduce using rule 142 (empty -> .)

    agent_ref_tail                 shift and go to state 263
    empty                          shift and go to state 253

state 260

    (54) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref . DEDENT

    DEDENT          shift and go to state 264


state 261

    (56) agent_ref_tail -> DOT identifier agent_ref_tail .

    ARROW           reduce using rule 56 (agent_ref_tail -> DOT identifier agent_ref_tail .)
    DEDENT          reduce using rule 56 (agent_ref_tail -> DOT identifier agent_ref_tail .)


state 262

    (57) agent_ref_tail -> DOT OUTPUT agent_ref_tail .

    ARROW           reduce using rule 57 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)
    DEDENT          reduce using rule 57 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)


state 263

    (58) agent_ref_tail -> DOT INPUT agent_ref_tail .

    ARROW           reduce using rule 58 (agent_ref_tail -> DOT INPUT agent_ref_tail .)
    DEDENT          reduce using rule 58 (agent_ref_tail -> DOT INPUT agent_ref_tail .)


state 264

    (54) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .

    IDENTIFIER      reduce using rule 54 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)
    DEDENT          reduce using rule 54 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)

