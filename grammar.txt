program         ::= global_block? program_body
program_body    ::= (statement | agent_def | connect_block | func_def)+
global_block    ::= "global" ":" INDENT var_decl_list DEDENT
agent_def       ::= "agent" IDENTIFIER ":" INDENT agent_body DEDENT
agent_body      ::= (input_block | output_block | memory_block | model_block | statement | chat_block)+
input_block     ::= "input" ":" INDENT var_decl_list DEDENT
output_block    ::= "output" ":" INDENT var_decl_list DEDENT
memory_block    ::= "memory" ":" INDENT var_decl_list DEDENT
model_block     ::= "model" ":" STRING
chat_block      ::= "chat" IDENTIFIER ":" TRIPLE_STRING
connect_block   ::= "connect" ":" INDENT connection+ DEDENT
connection      ::= IDENTIFIER ":" type agent_ref "->" agent_ref
agent_ref       ::= IDENTIFIER ("." IDENTIFIER)+
func_def        ::= "def" IDENTIFIER "(" param_list? ")" (":" type)? ":" INDENT stmt_block DEDENT
param_list      ::= param_decl ("," param_decl)*
param_decl      ::= var_decl
var_decl_list   ::= var_decl+
var_decl        ::= IDENTIFIER (":" type)? ("=" expr)?
type            ::= base_type | list_type | record_type | tuple_type
base_type       ::= "str" | "int" | "float" | "bool" | IDENTIFIER
list_type       ::= "list[" type "]"
record_type     ::= "record" "{" field_decl ("," field_decl)* "}"
field_decl      ::= IDENTIFIER ":" type
tuple_type      ::= "tuple" "[" type ("," type)* "]"
IDENTIFIER      ::= /[a-zA-Z_][a-zA-Z0-9_]*/
STRING          ::= /"[^"]*"/
TRIPLE_STRING   ::= /""".*?"""/s
NUMBER          ::= /\d+(\.\d+)?/
INDENT, DEDENT  ::= handled by parser (e.g. Lark's PythonIndenter)
stmt_block      ::= INDENT statement+ DEDENT
statement       ::= for_stmt | if_stmt | while_stmt | assign_stmt | expr_stmt | break_stmt | continue_stmt | return_stmt
assign_stmt     ::= IDENTIFIER (":" type)? "=" expr
expr_stmt       ::= expr
return_stmt     ::= "return" expr?
for_stmt        ::= "for" IDENTIFIER "in" expr ":" stmt_block
break_stmt      ::= "break"
continue_stmt   ::= "continue"
if_stmt         ::= "if" expr ":" stmt_block
                    ("elif" expr ":" stmt_block)*
                    ("else" ":" stmt_block)?
while_stmt      ::= "while" expr ":" stmt_block
expr            ::= atom | expr bin_op expr | list_expr | record_expr | tuple_expr | field_access | func_call
atom            ::= IDENTIFIER | STRING | NUMBER | "(" expr ")"
list_expr       ::= "[" (expr ("," expr)*)? "]"
record_expr     ::= "{" field_assign ("," field_assign)* "}"
field_assign    ::= IDENTIFIER "=" expr
tuple_expr      ::= "(" expr ("," expr)* ")"
field_access    ::= expr "." IDENTIFIER
func_call       ::= IDENTIFIER "(" arg_list? ")"
arg_list        ::= expr ("," expr)*
bin_op          ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">="
