> program         ::= program_body
> program_body    ::= (statement | agent_def | connect_block | func_def)+
> agent_def       ::= "agent" IDENTIFIER ":" INDENT agent_body DEDENT
> agent_body      ::= (input_block | output_block | model_block | statement | chat_block)+
> input_block     ::= "input" ":" INDENT var_decl_list DEDENT
> output_block    ::= "output" ":" INDENT var_decl_list DEDENT
> model_block     ::= "model" ":" STRING
> chat_block      ::= "chat" IDENTIFIER? ":" TRIPLE_STRING
> connect_block   ::= "connect" ":" INDENT connection+ DEDENT
> connection      ::= IDENTIFIER ":" type INDENT agent_ref "->" agent_ref DEDENT
> agent_ref       ::= IDENTIFIER ("." IDENTIFIER)+
> func_def        ::= "def" IDENTIFIER "(" param_list? ")" (":" type)? ":" stmt_block
> param_list      ::= param_decl ("," param_decl)*
> param_decl      ::= var_decl
> var_decl_list   ::= var_decl+
> var_decl        ::= IDENTIFIER (":" type)? ("=" expr)?
> type            ::= base_type | list_type | record_type | union_type
> base_type       ::= "str" | "int" | "float" | "bool" 
> list_type       ::= "list[" type "]"
> record_type     ::= "record" "{" field_decl ("," field_decl)* "}"
> union_type      ::= "union[" type_list "]
> field_decl      ::= IDENTIFIER ":" type
> stmt_block      ::= INDENT statement+ DEDENT
> statement       ::= for_stmt | if_stmt | while_stmt | assign_stmt | break_stmt | continue_stmt | return_stmt
> assign_stmt     ::= assign_target (":" type)? "=" expr
> return_stmt     ::= "return" expr
> for_stmt        ::= "for" IDENTIFIER "in" expr ":" stmt_block
> break_stmt      ::= "break"
> continue_stmt   ::= "continue"
> if_stmt         ::= "if" expr ":" stmt_block "else" ":" stmt_block
> while_stmt      ::= "while" expr ":" stmt_block
> expr            ::= expr_head expr_tail*
> expr_head       ::= atom | list_expr | record_expr | field_access | func_call
> expr_tail       ::= bin_op expr_head expr_tail
> assign_target   ::= IDENTIFIER | field_access | index_access
> atom            ::= IDENTIFIER | STRING | NUMBER | "(" expr ")"
> list_expr       ::= "[" (expr ("," expr)*)? "]"
> record_expr     ::= "{" instance_assign ("," instance_assign)* "}"
> instance_assign ::= IDENTIFIER "=" expr
> index_access    ::= IDENTIFIER "[" expr "]"
> field_access    ::= IDENTIFIER "." IDENTIFIER
> func_call       ::= IDENTIFIER "(" arg_list? ")"
> arg_list        ::= expr ("," expr)*
> bin_op          ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">="

IDENTIFIER      ::= /[a-zA-Z_][a-zA-Z0-9_]*/
STRING          ::= /"[^"]*"/
TRIPLE_STRING   ::= /""".*?"""/s
NUMBER          ::= /\d+(\.\d+)?/
INDENT, DEDENT  ::= handled by parser