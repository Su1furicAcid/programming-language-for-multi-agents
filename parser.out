Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TYPE_TUPLE

Grammar

Rule 0     S' -> program
Rule 1     program -> program_body
Rule 2     program_body -> program_body_item program_body
Rule 3     program_body -> program_body_item
Rule 4     program_body_item -> statement
Rule 5     program_body_item -> agent_def
Rule 6     program_body_item -> connect_block
Rule 7     program_body_item -> func_def
Rule 8     var_decl_list -> var_decl var_decl_list
Rule 9     var_decl_list -> var_decl
Rule 10    var_decl -> IDENTIFIER COLON type EQUALS expr
Rule 11    var_decl -> IDENTIFIER COLON type
Rule 12    var_decl -> IDENTIFIER EQUALS expr
Rule 13    var_decl -> IDENTIFIER
Rule 14    type -> base_type
Rule 15    type -> list_type
Rule 16    type -> record_type
Rule 17    base_type -> TYPE_STR
Rule 18    base_type -> TYPE_INT
Rule 19    base_type -> TYPE_FLOAT
Rule 20    base_type -> TYPE_BOOL
Rule 21    list_type -> TYPE_LIST LBRACE type RBRACE
Rule 22    record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE
Rule 23    field_decl_list -> field_decl field_decl_list
Rule 24    field_decl_list -> field_decl
Rule 25    field_decl -> IDENTIFIER COLON type
Rule 26    agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT
Rule 27    agent_body -> agent_body_item agent_body
Rule 28    agent_body -> agent_body_item
Rule 29    agent_body_item -> input_block
Rule 30    agent_body_item -> output_block
Rule 31    agent_body_item -> model_block
Rule 32    agent_body_item -> statement
Rule 33    agent_body_item -> chat_block
Rule 34    input_block -> INPUT COLON INDENT var_decl_list DEDENT
Rule 35    output_block -> OUTPUT COLON INDENT var_decl_list DEDENT
Rule 36    model_block -> MODEL COLON STRING
Rule 37    chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING
Rule 38    chat_block -> CHAT COLON TRIPLE_STRING
Rule 39    connect_block -> CONNECT COLON INDENT connection_list DEDENT
Rule 40    connection_list -> connection connection_list
Rule 41    connection_list -> connection
Rule 42    connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT
Rule 43    agent_ref -> IDENTIFIER agent_ref_tail
Rule 44    agent_ref_tail -> DOT IDENTIFIER agent_ref_tail
Rule 45    agent_ref_tail -> DOT OUTPUT agent_ref_tail
Rule 46    agent_ref_tail -> DOT INPUT agent_ref_tail
Rule 47    agent_ref_tail -> empty
Rule 48    func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
Rule 49    func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block
Rule 50    param_list -> param_decl param_list_tail
Rule 51    param_list -> empty
Rule 52    param_list_tail -> COMMA param_decl param_list_tail
Rule 53    param_list_tail -> empty
Rule 54    param_decl -> var_decl
Rule 55    stmt_block -> INDENT statement_list DEDENT
Rule 56    statement_list -> statement statement_list
Rule 57    statement_list -> statement
Rule 58    statement -> for_stmt
Rule 59    statement -> if_stmt
Rule 60    statement -> while_stmt
Rule 61    statement -> assign_stmt
Rule 62    statement -> break_stmt
Rule 63    statement -> continue_stmt
Rule 64    statement -> return_stmt
Rule 65    assign_stmt -> IDENTIFIER COLON type EQUALS expr
Rule 66    assign_stmt -> IDENTIFIER EQUALS expr
Rule 67    return_stmt -> RETURN expr
Rule 68    for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block
Rule 69    break_stmt -> BREAK
Rule 70    continue_stmt -> CONTINUE
Rule 71    if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block
Rule 72    if_stmt -> IF expr COLON stmt_block
Rule 73    while_stmt -> WHILE expr COLON stmt_block
Rule 74    expr -> expr_head bin_op expr_tail
Rule 75    expr -> expr_head
Rule 76    expr_head -> atom
Rule 77    expr_head -> list_expr
Rule 78    expr_head -> record_expr
Rule 79    expr_head -> field_access
Rule 80    expr_head -> func_call
Rule 81    expr_tail -> expr
Rule 82    atom -> IDENTIFIER
Rule 83    atom -> STRING
Rule 84    atom -> NUMBER
Rule 85    list_expr -> LBRACE list_elements RBRACE
Rule 86    list_elements -> expr list_elements_tail
Rule 87    list_elements -> expr
Rule 88    list_elements_tail -> COMMA expr list_elements_tail
Rule 89    list_elements_tail -> COMMA expr
Rule 90    record_expr -> LBRACE record_elements RBRACE
Rule 91    record_elements -> field_assign record_elements_tail
Rule 92    record_elements -> field_assign
Rule 93    record_elements_tail -> COMMA field_assign record_elements_tail
Rule 94    record_elements_tail -> COMMA field_assign
Rule 95    field_assign -> IDENTIFIER DOT IDENTIFIER EQUALS expr
Rule 96    field_access -> IDENTIFIER DOT IDENTIFIER
Rule 97    func_call -> IDENTIFIER LPAREN arg_list RPAREN
Rule 98    arg_list -> expr arg_list_tail
Rule 99    arg_list -> empty
Rule 100   arg_list_tail -> COMMA expr arg_list_tail
Rule 101   arg_list_tail -> empty
Rule 102   bin_op -> PLUS
Rule 103   bin_op -> MINUS
Rule 104   bin_op -> TIMES
Rule 105   bin_op -> DIVIDE
Rule 106   bin_op -> MOD
Rule 107   bin_op -> EQ
Rule 108   bin_op -> NEQ
Rule 109   bin_op -> LT
Rule 110   bin_op -> GT
Rule 111   bin_op -> LE
Rule 112   bin_op -> GE
Rule 113   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 26
ARROW                : 42
BREAK                : 69
CHAT                 : 37 38
COLON                : 10 11 25 26 34 35 36 37 38 39 42 48 48 49 65 68 71 71 72 73
COMMA                : 52 88 89 93 94 100
CONNECT              : 39
CONTINUE             : 70
DEDENT               : 26 34 35 39 42 55
DEF                  : 48 49
DIVIDE               : 105
DOT                  : 44 45 46 95 96
ELSE                 : 71
EQ                   : 107
EQUALS               : 10 12 65 66 95
FOR                  : 68
GE                   : 112
GT                   : 110
IDENTIFIER           : 10 11 12 13 25 26 37 42 43 44 48 49 65 66 68 82 95 95 96 96 97
IF                   : 71 72
IN                   : 68
INDENT               : 26 34 35 39 42 55
INPUT                : 34 46
LBRACE               : 21 22 85 90
LE                   : 111
LPAREN               : 48 49 97
LT                   : 109
MINUS                : 103
MOD                  : 106
MODEL                : 36
NEQ                  : 108
NEWLINE              : 
NUMBER               : 84
OUTPUT               : 35 45
PLUS                 : 102
RBRACE               : 21 22 85 90
RETURN               : 67
RPAREN               : 48 49 97
STRING               : 36 83
TIMES                : 104
TRIPLE_STRING        : 37 38
TYPE_BOOL            : 20
TYPE_FLOAT           : 19
TYPE_INT             : 18
TYPE_LIST            : 21
TYPE_RECORD          : 22
TYPE_STR             : 17
TYPE_TUPLE           : 
WHILE                : 73
error                : 

Nonterminals, with rules where they appear

agent_body           : 26 27
agent_body_item      : 27 28
agent_def            : 5
agent_ref            : 42 42
agent_ref_tail       : 43 44 45 46
arg_list             : 97
arg_list_tail        : 98 100
assign_stmt          : 61
atom                 : 76
base_type            : 14
bin_op               : 74
break_stmt           : 62
chat_block           : 33
connect_block        : 6
connection           : 40 41
connection_list      : 39 40
continue_stmt        : 63
empty                : 47 51 53 99 101
expr                 : 10 12 65 66 67 68 71 72 73 81 86 87 88 89 95 98 100
expr_head            : 74 75
expr_tail            : 74
field_access         : 79
field_assign         : 91 92 93 94
field_decl           : 23 24
field_decl_list      : 22 23
for_stmt             : 58
func_call            : 80
func_def             : 7
if_stmt              : 59
input_block          : 29
list_elements        : 85
list_elements_tail   : 86 88
list_expr            : 77
list_type            : 15
model_block          : 31
output_block         : 30
param_decl           : 50 52
param_list           : 48 49
param_list_tail      : 50 52
program              : 0
program_body         : 1 2
program_body_item    : 2 3
record_elements      : 90
record_elements_tail : 91 93
record_expr          : 78
record_type          : 16
return_stmt          : 64
statement            : 4 32 56 57
statement_list       : 55 56
stmt_block           : 48 49 68 71 71 72 73
type                 : 10 11 21 25 42 48 65
var_decl             : 8 9 54
var_decl_list        : 8 34 35
while_stmt           : 60


state 0

    (0) S' -> . program
    (1) program -> . program_body
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (58) statement -> . for_stmt
    (59) statement -> . if_stmt
    (60) statement -> . while_stmt
    (61) statement -> . assign_stmt
    (62) statement -> . break_stmt
    (63) statement -> . continue_stmt
    (64) statement -> . return_stmt
    (26) agent_def -> . AGENT IDENTIFIER COLON INDENT agent_body DEDENT
    (39) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (48) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
    (49) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block
    (68) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (71) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> . IF expr COLON stmt_block
    (73) while_stmt -> . WHILE expr COLON stmt_block
    (65) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (66) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) break_stmt -> . BREAK
    (70) continue_stmt -> . CONTINUE
    (67) return_stmt -> . RETURN expr

    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    DEF             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    program                        shift and go to state 1
    program_body                   shift and go to state 2
    program_body_item              shift and go to state 3
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> program_body .

    $end            reduce using rule 1 (program -> program_body .)


state 3

    (2) program_body -> program_body_item . program_body
    (3) program_body -> program_body_item .
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (58) statement -> . for_stmt
    (59) statement -> . if_stmt
    (60) statement -> . while_stmt
    (61) statement -> . assign_stmt
    (62) statement -> . break_stmt
    (63) statement -> . continue_stmt
    (64) statement -> . return_stmt
    (26) agent_def -> . AGENT IDENTIFIER COLON INDENT agent_body DEDENT
    (39) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (48) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
    (49) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block
    (68) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (71) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> . IF expr COLON stmt_block
    (73) while_stmt -> . WHILE expr COLON stmt_block
    (65) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (66) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) break_stmt -> . BREAK
    (70) continue_stmt -> . CONTINUE
    (67) return_stmt -> . RETURN expr

    $end            reduce using rule 3 (program_body -> program_body_item .)
    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    DEF             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    program_body_item              shift and go to state 3
    program_body                   shift and go to state 25
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 4

    (4) program_body_item -> statement .

    AGENT           reduce using rule 4 (program_body_item -> statement .)
    CONNECT         reduce using rule 4 (program_body_item -> statement .)
    DEF             reduce using rule 4 (program_body_item -> statement .)
    FOR             reduce using rule 4 (program_body_item -> statement .)
    IF              reduce using rule 4 (program_body_item -> statement .)
    WHILE           reduce using rule 4 (program_body_item -> statement .)
    IDENTIFIER      reduce using rule 4 (program_body_item -> statement .)
    BREAK           reduce using rule 4 (program_body_item -> statement .)
    CONTINUE        reduce using rule 4 (program_body_item -> statement .)
    RETURN          reduce using rule 4 (program_body_item -> statement .)
    $end            reduce using rule 4 (program_body_item -> statement .)


state 5

    (5) program_body_item -> agent_def .

    AGENT           reduce using rule 5 (program_body_item -> agent_def .)
    CONNECT         reduce using rule 5 (program_body_item -> agent_def .)
    DEF             reduce using rule 5 (program_body_item -> agent_def .)
    FOR             reduce using rule 5 (program_body_item -> agent_def .)
    IF              reduce using rule 5 (program_body_item -> agent_def .)
    WHILE           reduce using rule 5 (program_body_item -> agent_def .)
    IDENTIFIER      reduce using rule 5 (program_body_item -> agent_def .)
    BREAK           reduce using rule 5 (program_body_item -> agent_def .)
    CONTINUE        reduce using rule 5 (program_body_item -> agent_def .)
    RETURN          reduce using rule 5 (program_body_item -> agent_def .)
    $end            reduce using rule 5 (program_body_item -> agent_def .)


state 6

    (6) program_body_item -> connect_block .

    AGENT           reduce using rule 6 (program_body_item -> connect_block .)
    CONNECT         reduce using rule 6 (program_body_item -> connect_block .)
    DEF             reduce using rule 6 (program_body_item -> connect_block .)
    FOR             reduce using rule 6 (program_body_item -> connect_block .)
    IF              reduce using rule 6 (program_body_item -> connect_block .)
    WHILE           reduce using rule 6 (program_body_item -> connect_block .)
    IDENTIFIER      reduce using rule 6 (program_body_item -> connect_block .)
    BREAK           reduce using rule 6 (program_body_item -> connect_block .)
    CONTINUE        reduce using rule 6 (program_body_item -> connect_block .)
    RETURN          reduce using rule 6 (program_body_item -> connect_block .)
    $end            reduce using rule 6 (program_body_item -> connect_block .)


state 7

    (7) program_body_item -> func_def .

    AGENT           reduce using rule 7 (program_body_item -> func_def .)
    CONNECT         reduce using rule 7 (program_body_item -> func_def .)
    DEF             reduce using rule 7 (program_body_item -> func_def .)
    FOR             reduce using rule 7 (program_body_item -> func_def .)
    IF              reduce using rule 7 (program_body_item -> func_def .)
    WHILE           reduce using rule 7 (program_body_item -> func_def .)
    IDENTIFIER      reduce using rule 7 (program_body_item -> func_def .)
    BREAK           reduce using rule 7 (program_body_item -> func_def .)
    CONTINUE        reduce using rule 7 (program_body_item -> func_def .)
    RETURN          reduce using rule 7 (program_body_item -> func_def .)
    $end            reduce using rule 7 (program_body_item -> func_def .)


state 8

    (58) statement -> for_stmt .

    AGENT           reduce using rule 58 (statement -> for_stmt .)
    CONNECT         reduce using rule 58 (statement -> for_stmt .)
    DEF             reduce using rule 58 (statement -> for_stmt .)
    FOR             reduce using rule 58 (statement -> for_stmt .)
    IF              reduce using rule 58 (statement -> for_stmt .)
    WHILE           reduce using rule 58 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 58 (statement -> for_stmt .)
    BREAK           reduce using rule 58 (statement -> for_stmt .)
    CONTINUE        reduce using rule 58 (statement -> for_stmt .)
    RETURN          reduce using rule 58 (statement -> for_stmt .)
    $end            reduce using rule 58 (statement -> for_stmt .)
    INPUT           reduce using rule 58 (statement -> for_stmt .)
    OUTPUT          reduce using rule 58 (statement -> for_stmt .)
    MODEL           reduce using rule 58 (statement -> for_stmt .)
    CHAT            reduce using rule 58 (statement -> for_stmt .)
    DEDENT          reduce using rule 58 (statement -> for_stmt .)


state 9

    (59) statement -> if_stmt .

    AGENT           reduce using rule 59 (statement -> if_stmt .)
    CONNECT         reduce using rule 59 (statement -> if_stmt .)
    DEF             reduce using rule 59 (statement -> if_stmt .)
    FOR             reduce using rule 59 (statement -> if_stmt .)
    IF              reduce using rule 59 (statement -> if_stmt .)
    WHILE           reduce using rule 59 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 59 (statement -> if_stmt .)
    BREAK           reduce using rule 59 (statement -> if_stmt .)
    CONTINUE        reduce using rule 59 (statement -> if_stmt .)
    RETURN          reduce using rule 59 (statement -> if_stmt .)
    $end            reduce using rule 59 (statement -> if_stmt .)
    INPUT           reduce using rule 59 (statement -> if_stmt .)
    OUTPUT          reduce using rule 59 (statement -> if_stmt .)
    MODEL           reduce using rule 59 (statement -> if_stmt .)
    CHAT            reduce using rule 59 (statement -> if_stmt .)
    DEDENT          reduce using rule 59 (statement -> if_stmt .)


state 10

    (60) statement -> while_stmt .

    AGENT           reduce using rule 60 (statement -> while_stmt .)
    CONNECT         reduce using rule 60 (statement -> while_stmt .)
    DEF             reduce using rule 60 (statement -> while_stmt .)
    FOR             reduce using rule 60 (statement -> while_stmt .)
    IF              reduce using rule 60 (statement -> while_stmt .)
    WHILE           reduce using rule 60 (statement -> while_stmt .)
    IDENTIFIER      reduce using rule 60 (statement -> while_stmt .)
    BREAK           reduce using rule 60 (statement -> while_stmt .)
    CONTINUE        reduce using rule 60 (statement -> while_stmt .)
    RETURN          reduce using rule 60 (statement -> while_stmt .)
    $end            reduce using rule 60 (statement -> while_stmt .)
    INPUT           reduce using rule 60 (statement -> while_stmt .)
    OUTPUT          reduce using rule 60 (statement -> while_stmt .)
    MODEL           reduce using rule 60 (statement -> while_stmt .)
    CHAT            reduce using rule 60 (statement -> while_stmt .)
    DEDENT          reduce using rule 60 (statement -> while_stmt .)


state 11

    (61) statement -> assign_stmt .

    AGENT           reduce using rule 61 (statement -> assign_stmt .)
    CONNECT         reduce using rule 61 (statement -> assign_stmt .)
    DEF             reduce using rule 61 (statement -> assign_stmt .)
    FOR             reduce using rule 61 (statement -> assign_stmt .)
    IF              reduce using rule 61 (statement -> assign_stmt .)
    WHILE           reduce using rule 61 (statement -> assign_stmt .)
    IDENTIFIER      reduce using rule 61 (statement -> assign_stmt .)
    BREAK           reduce using rule 61 (statement -> assign_stmt .)
    CONTINUE        reduce using rule 61 (statement -> assign_stmt .)
    RETURN          reduce using rule 61 (statement -> assign_stmt .)
    $end            reduce using rule 61 (statement -> assign_stmt .)
    INPUT           reduce using rule 61 (statement -> assign_stmt .)
    OUTPUT          reduce using rule 61 (statement -> assign_stmt .)
    MODEL           reduce using rule 61 (statement -> assign_stmt .)
    CHAT            reduce using rule 61 (statement -> assign_stmt .)
    DEDENT          reduce using rule 61 (statement -> assign_stmt .)


state 12

    (62) statement -> break_stmt .

    AGENT           reduce using rule 62 (statement -> break_stmt .)
    CONNECT         reduce using rule 62 (statement -> break_stmt .)
    DEF             reduce using rule 62 (statement -> break_stmt .)
    FOR             reduce using rule 62 (statement -> break_stmt .)
    IF              reduce using rule 62 (statement -> break_stmt .)
    WHILE           reduce using rule 62 (statement -> break_stmt .)
    IDENTIFIER      reduce using rule 62 (statement -> break_stmt .)
    BREAK           reduce using rule 62 (statement -> break_stmt .)
    CONTINUE        reduce using rule 62 (statement -> break_stmt .)
    RETURN          reduce using rule 62 (statement -> break_stmt .)
    $end            reduce using rule 62 (statement -> break_stmt .)
    INPUT           reduce using rule 62 (statement -> break_stmt .)
    OUTPUT          reduce using rule 62 (statement -> break_stmt .)
    MODEL           reduce using rule 62 (statement -> break_stmt .)
    CHAT            reduce using rule 62 (statement -> break_stmt .)
    DEDENT          reduce using rule 62 (statement -> break_stmt .)


state 13

    (63) statement -> continue_stmt .

    AGENT           reduce using rule 63 (statement -> continue_stmt .)
    CONNECT         reduce using rule 63 (statement -> continue_stmt .)
    DEF             reduce using rule 63 (statement -> continue_stmt .)
    FOR             reduce using rule 63 (statement -> continue_stmt .)
    IF              reduce using rule 63 (statement -> continue_stmt .)
    WHILE           reduce using rule 63 (statement -> continue_stmt .)
    IDENTIFIER      reduce using rule 63 (statement -> continue_stmt .)
    BREAK           reduce using rule 63 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 63 (statement -> continue_stmt .)
    RETURN          reduce using rule 63 (statement -> continue_stmt .)
    $end            reduce using rule 63 (statement -> continue_stmt .)
    INPUT           reduce using rule 63 (statement -> continue_stmt .)
    OUTPUT          reduce using rule 63 (statement -> continue_stmt .)
    MODEL           reduce using rule 63 (statement -> continue_stmt .)
    CHAT            reduce using rule 63 (statement -> continue_stmt .)
    DEDENT          reduce using rule 63 (statement -> continue_stmt .)


state 14

    (64) statement -> return_stmt .

    AGENT           reduce using rule 64 (statement -> return_stmt .)
    CONNECT         reduce using rule 64 (statement -> return_stmt .)
    DEF             reduce using rule 64 (statement -> return_stmt .)
    FOR             reduce using rule 64 (statement -> return_stmt .)
    IF              reduce using rule 64 (statement -> return_stmt .)
    WHILE           reduce using rule 64 (statement -> return_stmt .)
    IDENTIFIER      reduce using rule 64 (statement -> return_stmt .)
    BREAK           reduce using rule 64 (statement -> return_stmt .)
    CONTINUE        reduce using rule 64 (statement -> return_stmt .)
    RETURN          reduce using rule 64 (statement -> return_stmt .)
    $end            reduce using rule 64 (statement -> return_stmt .)
    INPUT           reduce using rule 64 (statement -> return_stmt .)
    OUTPUT          reduce using rule 64 (statement -> return_stmt .)
    MODEL           reduce using rule 64 (statement -> return_stmt .)
    CHAT            reduce using rule 64 (statement -> return_stmt .)
    DEDENT          reduce using rule 64 (statement -> return_stmt .)


state 15

    (26) agent_def -> AGENT . IDENTIFIER COLON INDENT agent_body DEDENT

    IDENTIFIER      shift and go to state 26


state 16

    (65) assign_stmt -> IDENTIFIER . COLON type EQUALS expr
    (66) assign_stmt -> IDENTIFIER . EQUALS expr

    COLON           shift and go to state 27
    EQUALS          shift and go to state 28


state 17

    (39) connect_block -> CONNECT . COLON INDENT connection_list DEDENT

    COLON           shift and go to state 29


state 18

    (48) func_def -> DEF . IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
    (49) func_def -> DEF . IDENTIFIER LPAREN param_list RPAREN COLON stmt_block

    IDENTIFIER      shift and go to state 30


state 19

    (68) for_stmt -> FOR . IDENTIFIER IN expr COLON stmt_block

    IDENTIFIER      shift and go to state 31


state 20

    (71) if_stmt -> IF . expr COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> IF . expr COLON stmt_block
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 32
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 21

    (73) while_stmt -> WHILE . expr COLON stmt_block
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 43
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 22

    (69) break_stmt -> BREAK .

    AGENT           reduce using rule 69 (break_stmt -> BREAK .)
    CONNECT         reduce using rule 69 (break_stmt -> BREAK .)
    DEF             reduce using rule 69 (break_stmt -> BREAK .)
    FOR             reduce using rule 69 (break_stmt -> BREAK .)
    IF              reduce using rule 69 (break_stmt -> BREAK .)
    WHILE           reduce using rule 69 (break_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 69 (break_stmt -> BREAK .)
    BREAK           reduce using rule 69 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 69 (break_stmt -> BREAK .)
    RETURN          reduce using rule 69 (break_stmt -> BREAK .)
    $end            reduce using rule 69 (break_stmt -> BREAK .)
    INPUT           reduce using rule 69 (break_stmt -> BREAK .)
    OUTPUT          reduce using rule 69 (break_stmt -> BREAK .)
    MODEL           reduce using rule 69 (break_stmt -> BREAK .)
    CHAT            reduce using rule 69 (break_stmt -> BREAK .)
    DEDENT          reduce using rule 69 (break_stmt -> BREAK .)


state 23

    (70) continue_stmt -> CONTINUE .

    AGENT           reduce using rule 70 (continue_stmt -> CONTINUE .)
    CONNECT         reduce using rule 70 (continue_stmt -> CONTINUE .)
    DEF             reduce using rule 70 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 70 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 70 (continue_stmt -> CONTINUE .)
    WHILE           reduce using rule 70 (continue_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 70 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 70 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 70 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 70 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 70 (continue_stmt -> CONTINUE .)
    INPUT           reduce using rule 70 (continue_stmt -> CONTINUE .)
    OUTPUT          reduce using rule 70 (continue_stmt -> CONTINUE .)
    MODEL           reduce using rule 70 (continue_stmt -> CONTINUE .)
    CHAT            reduce using rule 70 (continue_stmt -> CONTINUE .)
    DEDENT          reduce using rule 70 (continue_stmt -> CONTINUE .)


state 24

    (67) return_stmt -> RETURN . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 44
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 25

    (2) program_body -> program_body_item program_body .

    $end            reduce using rule 2 (program_body -> program_body_item program_body .)


state 26

    (26) agent_def -> AGENT IDENTIFIER . COLON INDENT agent_body DEDENT

    COLON           shift and go to state 45


state 27

    (65) assign_stmt -> IDENTIFIER COLON . type EQUALS expr
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 46
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 28

    (66) assign_stmt -> IDENTIFIER EQUALS . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 56
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 29

    (39) connect_block -> CONNECT COLON . INDENT connection_list DEDENT

    INDENT          shift and go to state 57


state 30

    (48) func_def -> DEF IDENTIFIER . LPAREN param_list RPAREN COLON type COLON stmt_block
    (49) func_def -> DEF IDENTIFIER . LPAREN param_list RPAREN COLON stmt_block

    LPAREN          shift and go to state 58


state 31

    (68) for_stmt -> FOR IDENTIFIER . IN expr COLON stmt_block

    IN              shift and go to state 59


state 32

    (71) if_stmt -> IF expr . COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> IF expr . COLON stmt_block

    COLON           shift and go to state 60


state 33

    (74) expr -> expr_head . bin_op expr_tail
    (75) expr -> expr_head .
    (102) bin_op -> . PLUS
    (103) bin_op -> . MINUS
    (104) bin_op -> . TIMES
    (105) bin_op -> . DIVIDE
    (106) bin_op -> . MOD
    (107) bin_op -> . EQ
    (108) bin_op -> . NEQ
    (109) bin_op -> . LT
    (110) bin_op -> . GT
    (111) bin_op -> . LE
    (112) bin_op -> . GE

    COLON           reduce using rule 75 (expr -> expr_head .)
    AGENT           reduce using rule 75 (expr -> expr_head .)
    CONNECT         reduce using rule 75 (expr -> expr_head .)
    DEF             reduce using rule 75 (expr -> expr_head .)
    FOR             reduce using rule 75 (expr -> expr_head .)
    IF              reduce using rule 75 (expr -> expr_head .)
    WHILE           reduce using rule 75 (expr -> expr_head .)
    IDENTIFIER      reduce using rule 75 (expr -> expr_head .)
    BREAK           reduce using rule 75 (expr -> expr_head .)
    CONTINUE        reduce using rule 75 (expr -> expr_head .)
    RETURN          reduce using rule 75 (expr -> expr_head .)
    $end            reduce using rule 75 (expr -> expr_head .)
    INPUT           reduce using rule 75 (expr -> expr_head .)
    OUTPUT          reduce using rule 75 (expr -> expr_head .)
    MODEL           reduce using rule 75 (expr -> expr_head .)
    CHAT            reduce using rule 75 (expr -> expr_head .)
    DEDENT          reduce using rule 75 (expr -> expr_head .)
    COMMA           reduce using rule 75 (expr -> expr_head .)
    RBRACE          reduce using rule 75 (expr -> expr_head .)
    RPAREN          reduce using rule 75 (expr -> expr_head .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65
    MOD             shift and go to state 66
    EQ              shift and go to state 67
    NEQ             shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72

    bin_op                         shift and go to state 61

state 34

    (76) expr_head -> atom .

    PLUS            reduce using rule 76 (expr_head -> atom .)
    MINUS           reduce using rule 76 (expr_head -> atom .)
    TIMES           reduce using rule 76 (expr_head -> atom .)
    DIVIDE          reduce using rule 76 (expr_head -> atom .)
    MOD             reduce using rule 76 (expr_head -> atom .)
    EQ              reduce using rule 76 (expr_head -> atom .)
    NEQ             reduce using rule 76 (expr_head -> atom .)
    LT              reduce using rule 76 (expr_head -> atom .)
    GT              reduce using rule 76 (expr_head -> atom .)
    LE              reduce using rule 76 (expr_head -> atom .)
    GE              reduce using rule 76 (expr_head -> atom .)
    COLON           reduce using rule 76 (expr_head -> atom .)
    AGENT           reduce using rule 76 (expr_head -> atom .)
    CONNECT         reduce using rule 76 (expr_head -> atom .)
    DEF             reduce using rule 76 (expr_head -> atom .)
    FOR             reduce using rule 76 (expr_head -> atom .)
    IF              reduce using rule 76 (expr_head -> atom .)
    WHILE           reduce using rule 76 (expr_head -> atom .)
    IDENTIFIER      reduce using rule 76 (expr_head -> atom .)
    BREAK           reduce using rule 76 (expr_head -> atom .)
    CONTINUE        reduce using rule 76 (expr_head -> atom .)
    RETURN          reduce using rule 76 (expr_head -> atom .)
    $end            reduce using rule 76 (expr_head -> atom .)
    INPUT           reduce using rule 76 (expr_head -> atom .)
    OUTPUT          reduce using rule 76 (expr_head -> atom .)
    MODEL           reduce using rule 76 (expr_head -> atom .)
    CHAT            reduce using rule 76 (expr_head -> atom .)
    DEDENT          reduce using rule 76 (expr_head -> atom .)
    COMMA           reduce using rule 76 (expr_head -> atom .)
    RBRACE          reduce using rule 76 (expr_head -> atom .)
    RPAREN          reduce using rule 76 (expr_head -> atom .)


state 35

    (77) expr_head -> list_expr .

    PLUS            reduce using rule 77 (expr_head -> list_expr .)
    MINUS           reduce using rule 77 (expr_head -> list_expr .)
    TIMES           reduce using rule 77 (expr_head -> list_expr .)
    DIVIDE          reduce using rule 77 (expr_head -> list_expr .)
    MOD             reduce using rule 77 (expr_head -> list_expr .)
    EQ              reduce using rule 77 (expr_head -> list_expr .)
    NEQ             reduce using rule 77 (expr_head -> list_expr .)
    LT              reduce using rule 77 (expr_head -> list_expr .)
    GT              reduce using rule 77 (expr_head -> list_expr .)
    LE              reduce using rule 77 (expr_head -> list_expr .)
    GE              reduce using rule 77 (expr_head -> list_expr .)
    COLON           reduce using rule 77 (expr_head -> list_expr .)
    AGENT           reduce using rule 77 (expr_head -> list_expr .)
    CONNECT         reduce using rule 77 (expr_head -> list_expr .)
    DEF             reduce using rule 77 (expr_head -> list_expr .)
    FOR             reduce using rule 77 (expr_head -> list_expr .)
    IF              reduce using rule 77 (expr_head -> list_expr .)
    WHILE           reduce using rule 77 (expr_head -> list_expr .)
    IDENTIFIER      reduce using rule 77 (expr_head -> list_expr .)
    BREAK           reduce using rule 77 (expr_head -> list_expr .)
    CONTINUE        reduce using rule 77 (expr_head -> list_expr .)
    RETURN          reduce using rule 77 (expr_head -> list_expr .)
    $end            reduce using rule 77 (expr_head -> list_expr .)
    INPUT           reduce using rule 77 (expr_head -> list_expr .)
    OUTPUT          reduce using rule 77 (expr_head -> list_expr .)
    MODEL           reduce using rule 77 (expr_head -> list_expr .)
    CHAT            reduce using rule 77 (expr_head -> list_expr .)
    DEDENT          reduce using rule 77 (expr_head -> list_expr .)
    COMMA           reduce using rule 77 (expr_head -> list_expr .)
    RBRACE          reduce using rule 77 (expr_head -> list_expr .)
    RPAREN          reduce using rule 77 (expr_head -> list_expr .)


state 36

    (78) expr_head -> record_expr .

    PLUS            reduce using rule 78 (expr_head -> record_expr .)
    MINUS           reduce using rule 78 (expr_head -> record_expr .)
    TIMES           reduce using rule 78 (expr_head -> record_expr .)
    DIVIDE          reduce using rule 78 (expr_head -> record_expr .)
    MOD             reduce using rule 78 (expr_head -> record_expr .)
    EQ              reduce using rule 78 (expr_head -> record_expr .)
    NEQ             reduce using rule 78 (expr_head -> record_expr .)
    LT              reduce using rule 78 (expr_head -> record_expr .)
    GT              reduce using rule 78 (expr_head -> record_expr .)
    LE              reduce using rule 78 (expr_head -> record_expr .)
    GE              reduce using rule 78 (expr_head -> record_expr .)
    COLON           reduce using rule 78 (expr_head -> record_expr .)
    AGENT           reduce using rule 78 (expr_head -> record_expr .)
    CONNECT         reduce using rule 78 (expr_head -> record_expr .)
    DEF             reduce using rule 78 (expr_head -> record_expr .)
    FOR             reduce using rule 78 (expr_head -> record_expr .)
    IF              reduce using rule 78 (expr_head -> record_expr .)
    WHILE           reduce using rule 78 (expr_head -> record_expr .)
    IDENTIFIER      reduce using rule 78 (expr_head -> record_expr .)
    BREAK           reduce using rule 78 (expr_head -> record_expr .)
    CONTINUE        reduce using rule 78 (expr_head -> record_expr .)
    RETURN          reduce using rule 78 (expr_head -> record_expr .)
    $end            reduce using rule 78 (expr_head -> record_expr .)
    INPUT           reduce using rule 78 (expr_head -> record_expr .)
    OUTPUT          reduce using rule 78 (expr_head -> record_expr .)
    MODEL           reduce using rule 78 (expr_head -> record_expr .)
    CHAT            reduce using rule 78 (expr_head -> record_expr .)
    DEDENT          reduce using rule 78 (expr_head -> record_expr .)
    COMMA           reduce using rule 78 (expr_head -> record_expr .)
    RBRACE          reduce using rule 78 (expr_head -> record_expr .)
    RPAREN          reduce using rule 78 (expr_head -> record_expr .)


state 37

    (79) expr_head -> field_access .

    PLUS            reduce using rule 79 (expr_head -> field_access .)
    MINUS           reduce using rule 79 (expr_head -> field_access .)
    TIMES           reduce using rule 79 (expr_head -> field_access .)
    DIVIDE          reduce using rule 79 (expr_head -> field_access .)
    MOD             reduce using rule 79 (expr_head -> field_access .)
    EQ              reduce using rule 79 (expr_head -> field_access .)
    NEQ             reduce using rule 79 (expr_head -> field_access .)
    LT              reduce using rule 79 (expr_head -> field_access .)
    GT              reduce using rule 79 (expr_head -> field_access .)
    LE              reduce using rule 79 (expr_head -> field_access .)
    GE              reduce using rule 79 (expr_head -> field_access .)
    COLON           reduce using rule 79 (expr_head -> field_access .)
    AGENT           reduce using rule 79 (expr_head -> field_access .)
    CONNECT         reduce using rule 79 (expr_head -> field_access .)
    DEF             reduce using rule 79 (expr_head -> field_access .)
    FOR             reduce using rule 79 (expr_head -> field_access .)
    IF              reduce using rule 79 (expr_head -> field_access .)
    WHILE           reduce using rule 79 (expr_head -> field_access .)
    IDENTIFIER      reduce using rule 79 (expr_head -> field_access .)
    BREAK           reduce using rule 79 (expr_head -> field_access .)
    CONTINUE        reduce using rule 79 (expr_head -> field_access .)
    RETURN          reduce using rule 79 (expr_head -> field_access .)
    $end            reduce using rule 79 (expr_head -> field_access .)
    INPUT           reduce using rule 79 (expr_head -> field_access .)
    OUTPUT          reduce using rule 79 (expr_head -> field_access .)
    MODEL           reduce using rule 79 (expr_head -> field_access .)
    CHAT            reduce using rule 79 (expr_head -> field_access .)
    DEDENT          reduce using rule 79 (expr_head -> field_access .)
    COMMA           reduce using rule 79 (expr_head -> field_access .)
    RBRACE          reduce using rule 79 (expr_head -> field_access .)
    RPAREN          reduce using rule 79 (expr_head -> field_access .)


state 38

    (80) expr_head -> func_call .

    PLUS            reduce using rule 80 (expr_head -> func_call .)
    MINUS           reduce using rule 80 (expr_head -> func_call .)
    TIMES           reduce using rule 80 (expr_head -> func_call .)
    DIVIDE          reduce using rule 80 (expr_head -> func_call .)
    MOD             reduce using rule 80 (expr_head -> func_call .)
    EQ              reduce using rule 80 (expr_head -> func_call .)
    NEQ             reduce using rule 80 (expr_head -> func_call .)
    LT              reduce using rule 80 (expr_head -> func_call .)
    GT              reduce using rule 80 (expr_head -> func_call .)
    LE              reduce using rule 80 (expr_head -> func_call .)
    GE              reduce using rule 80 (expr_head -> func_call .)
    COLON           reduce using rule 80 (expr_head -> func_call .)
    AGENT           reduce using rule 80 (expr_head -> func_call .)
    CONNECT         reduce using rule 80 (expr_head -> func_call .)
    DEF             reduce using rule 80 (expr_head -> func_call .)
    FOR             reduce using rule 80 (expr_head -> func_call .)
    IF              reduce using rule 80 (expr_head -> func_call .)
    WHILE           reduce using rule 80 (expr_head -> func_call .)
    IDENTIFIER      reduce using rule 80 (expr_head -> func_call .)
    BREAK           reduce using rule 80 (expr_head -> func_call .)
    CONTINUE        reduce using rule 80 (expr_head -> func_call .)
    RETURN          reduce using rule 80 (expr_head -> func_call .)
    $end            reduce using rule 80 (expr_head -> func_call .)
    INPUT           reduce using rule 80 (expr_head -> func_call .)
    OUTPUT          reduce using rule 80 (expr_head -> func_call .)
    MODEL           reduce using rule 80 (expr_head -> func_call .)
    CHAT            reduce using rule 80 (expr_head -> func_call .)
    DEDENT          reduce using rule 80 (expr_head -> func_call .)
    COMMA           reduce using rule 80 (expr_head -> func_call .)
    RBRACE          reduce using rule 80 (expr_head -> func_call .)
    RPAREN          reduce using rule 80 (expr_head -> func_call .)


state 39

    (82) atom -> IDENTIFIER .
    (96) field_access -> IDENTIFIER . DOT IDENTIFIER
    (97) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    PLUS            reduce using rule 82 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 82 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 82 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (atom -> IDENTIFIER .)
    MOD             reduce using rule 82 (atom -> IDENTIFIER .)
    EQ              reduce using rule 82 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 82 (atom -> IDENTIFIER .)
    LT              reduce using rule 82 (atom -> IDENTIFIER .)
    GT              reduce using rule 82 (atom -> IDENTIFIER .)
    LE              reduce using rule 82 (atom -> IDENTIFIER .)
    GE              reduce using rule 82 (atom -> IDENTIFIER .)
    COLON           reduce using rule 82 (atom -> IDENTIFIER .)
    AGENT           reduce using rule 82 (atom -> IDENTIFIER .)
    CONNECT         reduce using rule 82 (atom -> IDENTIFIER .)
    DEF             reduce using rule 82 (atom -> IDENTIFIER .)
    FOR             reduce using rule 82 (atom -> IDENTIFIER .)
    IF              reduce using rule 82 (atom -> IDENTIFIER .)
    WHILE           reduce using rule 82 (atom -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 82 (atom -> IDENTIFIER .)
    BREAK           reduce using rule 82 (atom -> IDENTIFIER .)
    CONTINUE        reduce using rule 82 (atom -> IDENTIFIER .)
    RETURN          reduce using rule 82 (atom -> IDENTIFIER .)
    $end            reduce using rule 82 (atom -> IDENTIFIER .)
    INPUT           reduce using rule 82 (atom -> IDENTIFIER .)
    OUTPUT          reduce using rule 82 (atom -> IDENTIFIER .)
    MODEL           reduce using rule 82 (atom -> IDENTIFIER .)
    CHAT            reduce using rule 82 (atom -> IDENTIFIER .)
    DEDENT          reduce using rule 82 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 82 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 82 (atom -> IDENTIFIER .)
    RPAREN          reduce using rule 82 (atom -> IDENTIFIER .)
    DOT             shift and go to state 73
    LPAREN          shift and go to state 74


state 40

    (83) atom -> STRING .

    PLUS            reduce using rule 83 (atom -> STRING .)
    MINUS           reduce using rule 83 (atom -> STRING .)
    TIMES           reduce using rule 83 (atom -> STRING .)
    DIVIDE          reduce using rule 83 (atom -> STRING .)
    MOD             reduce using rule 83 (atom -> STRING .)
    EQ              reduce using rule 83 (atom -> STRING .)
    NEQ             reduce using rule 83 (atom -> STRING .)
    LT              reduce using rule 83 (atom -> STRING .)
    GT              reduce using rule 83 (atom -> STRING .)
    LE              reduce using rule 83 (atom -> STRING .)
    GE              reduce using rule 83 (atom -> STRING .)
    COLON           reduce using rule 83 (atom -> STRING .)
    AGENT           reduce using rule 83 (atom -> STRING .)
    CONNECT         reduce using rule 83 (atom -> STRING .)
    DEF             reduce using rule 83 (atom -> STRING .)
    FOR             reduce using rule 83 (atom -> STRING .)
    IF              reduce using rule 83 (atom -> STRING .)
    WHILE           reduce using rule 83 (atom -> STRING .)
    IDENTIFIER      reduce using rule 83 (atom -> STRING .)
    BREAK           reduce using rule 83 (atom -> STRING .)
    CONTINUE        reduce using rule 83 (atom -> STRING .)
    RETURN          reduce using rule 83 (atom -> STRING .)
    $end            reduce using rule 83 (atom -> STRING .)
    INPUT           reduce using rule 83 (atom -> STRING .)
    OUTPUT          reduce using rule 83 (atom -> STRING .)
    MODEL           reduce using rule 83 (atom -> STRING .)
    CHAT            reduce using rule 83 (atom -> STRING .)
    DEDENT          reduce using rule 83 (atom -> STRING .)
    COMMA           reduce using rule 83 (atom -> STRING .)
    RBRACE          reduce using rule 83 (atom -> STRING .)
    RPAREN          reduce using rule 83 (atom -> STRING .)


state 41

    (84) atom -> NUMBER .

    PLUS            reduce using rule 84 (atom -> NUMBER .)
    MINUS           reduce using rule 84 (atom -> NUMBER .)
    TIMES           reduce using rule 84 (atom -> NUMBER .)
    DIVIDE          reduce using rule 84 (atom -> NUMBER .)
    MOD             reduce using rule 84 (atom -> NUMBER .)
    EQ              reduce using rule 84 (atom -> NUMBER .)
    NEQ             reduce using rule 84 (atom -> NUMBER .)
    LT              reduce using rule 84 (atom -> NUMBER .)
    GT              reduce using rule 84 (atom -> NUMBER .)
    LE              reduce using rule 84 (atom -> NUMBER .)
    GE              reduce using rule 84 (atom -> NUMBER .)
    COLON           reduce using rule 84 (atom -> NUMBER .)
    AGENT           reduce using rule 84 (atom -> NUMBER .)
    CONNECT         reduce using rule 84 (atom -> NUMBER .)
    DEF             reduce using rule 84 (atom -> NUMBER .)
    FOR             reduce using rule 84 (atom -> NUMBER .)
    IF              reduce using rule 84 (atom -> NUMBER .)
    WHILE           reduce using rule 84 (atom -> NUMBER .)
    IDENTIFIER      reduce using rule 84 (atom -> NUMBER .)
    BREAK           reduce using rule 84 (atom -> NUMBER .)
    CONTINUE        reduce using rule 84 (atom -> NUMBER .)
    RETURN          reduce using rule 84 (atom -> NUMBER .)
    $end            reduce using rule 84 (atom -> NUMBER .)
    INPUT           reduce using rule 84 (atom -> NUMBER .)
    OUTPUT          reduce using rule 84 (atom -> NUMBER .)
    MODEL           reduce using rule 84 (atom -> NUMBER .)
    CHAT            reduce using rule 84 (atom -> NUMBER .)
    DEDENT          reduce using rule 84 (atom -> NUMBER .)
    COMMA           reduce using rule 84 (atom -> NUMBER .)
    RBRACE          reduce using rule 84 (atom -> NUMBER .)
    RPAREN          reduce using rule 84 (atom -> NUMBER .)


state 42

    (85) list_expr -> LBRACE . list_elements RBRACE
    (90) record_expr -> LBRACE . record_elements RBRACE
    (86) list_elements -> . expr list_elements_tail
    (87) list_elements -> . expr
    (91) record_elements -> . field_assign record_elements_tail
    (92) record_elements -> . field_assign
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (95) field_assign -> . IDENTIFIER DOT IDENTIFIER EQUALS expr
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 79
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    list_elements                  shift and go to state 75
    record_elements                shift and go to state 76
    expr                           shift and go to state 77
    field_assign                   shift and go to state 78
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 43

    (73) while_stmt -> WHILE expr . COLON stmt_block

    COLON           shift and go to state 80


state 44

    (67) return_stmt -> RETURN expr .

    AGENT           reduce using rule 67 (return_stmt -> RETURN expr .)
    CONNECT         reduce using rule 67 (return_stmt -> RETURN expr .)
    DEF             reduce using rule 67 (return_stmt -> RETURN expr .)
    FOR             reduce using rule 67 (return_stmt -> RETURN expr .)
    IF              reduce using rule 67 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 67 (return_stmt -> RETURN expr .)
    IDENTIFIER      reduce using rule 67 (return_stmt -> RETURN expr .)
    BREAK           reduce using rule 67 (return_stmt -> RETURN expr .)
    CONTINUE        reduce using rule 67 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 67 (return_stmt -> RETURN expr .)
    $end            reduce using rule 67 (return_stmt -> RETURN expr .)
    INPUT           reduce using rule 67 (return_stmt -> RETURN expr .)
    OUTPUT          reduce using rule 67 (return_stmt -> RETURN expr .)
    MODEL           reduce using rule 67 (return_stmt -> RETURN expr .)
    CHAT            reduce using rule 67 (return_stmt -> RETURN expr .)
    DEDENT          reduce using rule 67 (return_stmt -> RETURN expr .)


state 45

    (26) agent_def -> AGENT IDENTIFIER COLON . INDENT agent_body DEDENT

    INDENT          shift and go to state 81


state 46

    (65) assign_stmt -> IDENTIFIER COLON type . EQUALS expr

    EQUALS          shift and go to state 82


state 47

    (14) type -> base_type .

    EQUALS          reduce using rule 14 (type -> base_type .)
    RBRACE          reduce using rule 14 (type -> base_type .)
    INDENT          reduce using rule 14 (type -> base_type .)
    COMMA           reduce using rule 14 (type -> base_type .)
    RPAREN          reduce using rule 14 (type -> base_type .)
    IDENTIFIER      reduce using rule 14 (type -> base_type .)
    DEDENT          reduce using rule 14 (type -> base_type .)
    COLON           reduce using rule 14 (type -> base_type .)


state 48

    (15) type -> list_type .

    EQUALS          reduce using rule 15 (type -> list_type .)
    RBRACE          reduce using rule 15 (type -> list_type .)
    INDENT          reduce using rule 15 (type -> list_type .)
    COMMA           reduce using rule 15 (type -> list_type .)
    RPAREN          reduce using rule 15 (type -> list_type .)
    IDENTIFIER      reduce using rule 15 (type -> list_type .)
    DEDENT          reduce using rule 15 (type -> list_type .)
    COLON           reduce using rule 15 (type -> list_type .)


state 49

    (16) type -> record_type .

    EQUALS          reduce using rule 16 (type -> record_type .)
    RBRACE          reduce using rule 16 (type -> record_type .)
    INDENT          reduce using rule 16 (type -> record_type .)
    COMMA           reduce using rule 16 (type -> record_type .)
    RPAREN          reduce using rule 16 (type -> record_type .)
    IDENTIFIER      reduce using rule 16 (type -> record_type .)
    DEDENT          reduce using rule 16 (type -> record_type .)
    COLON           reduce using rule 16 (type -> record_type .)


state 50

    (17) base_type -> TYPE_STR .

    EQUALS          reduce using rule 17 (base_type -> TYPE_STR .)
    RBRACE          reduce using rule 17 (base_type -> TYPE_STR .)
    INDENT          reduce using rule 17 (base_type -> TYPE_STR .)
    COMMA           reduce using rule 17 (base_type -> TYPE_STR .)
    RPAREN          reduce using rule 17 (base_type -> TYPE_STR .)
    IDENTIFIER      reduce using rule 17 (base_type -> TYPE_STR .)
    DEDENT          reduce using rule 17 (base_type -> TYPE_STR .)
    COLON           reduce using rule 17 (base_type -> TYPE_STR .)


state 51

    (18) base_type -> TYPE_INT .

    EQUALS          reduce using rule 18 (base_type -> TYPE_INT .)
    RBRACE          reduce using rule 18 (base_type -> TYPE_INT .)
    INDENT          reduce using rule 18 (base_type -> TYPE_INT .)
    COMMA           reduce using rule 18 (base_type -> TYPE_INT .)
    RPAREN          reduce using rule 18 (base_type -> TYPE_INT .)
    IDENTIFIER      reduce using rule 18 (base_type -> TYPE_INT .)
    DEDENT          reduce using rule 18 (base_type -> TYPE_INT .)
    COLON           reduce using rule 18 (base_type -> TYPE_INT .)


state 52

    (19) base_type -> TYPE_FLOAT .

    EQUALS          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    RBRACE          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    INDENT          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 19 (base_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 19 (base_type -> TYPE_FLOAT .)
    DEDENT          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    COLON           reduce using rule 19 (base_type -> TYPE_FLOAT .)


state 53

    (20) base_type -> TYPE_BOOL .

    EQUALS          reduce using rule 20 (base_type -> TYPE_BOOL .)
    RBRACE          reduce using rule 20 (base_type -> TYPE_BOOL .)
    INDENT          reduce using rule 20 (base_type -> TYPE_BOOL .)
    COMMA           reduce using rule 20 (base_type -> TYPE_BOOL .)
    RPAREN          reduce using rule 20 (base_type -> TYPE_BOOL .)
    IDENTIFIER      reduce using rule 20 (base_type -> TYPE_BOOL .)
    DEDENT          reduce using rule 20 (base_type -> TYPE_BOOL .)
    COLON           reduce using rule 20 (base_type -> TYPE_BOOL .)


state 54

    (21) list_type -> TYPE_LIST . LBRACE type RBRACE

    LBRACE          shift and go to state 83


state 55

    (22) record_type -> TYPE_RECORD . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 84


state 56

    (66) assign_stmt -> IDENTIFIER EQUALS expr .

    AGENT           reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CONNECT         reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    DEF             reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    FOR             reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    IF              reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    WHILE           reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    IDENTIFIER      reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    BREAK           reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CONTINUE        reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    RETURN          reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    $end            reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    INPUT           reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    OUTPUT          reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    MODEL           reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CHAT            reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)
    DEDENT          reduce using rule 66 (assign_stmt -> IDENTIFIER EQUALS expr .)


state 57

    (39) connect_block -> CONNECT COLON INDENT . connection_list DEDENT
    (40) connection_list -> . connection connection_list
    (41) connection_list -> . connection
    (42) connection -> . IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT

    IDENTIFIER      shift and go to state 87

    connection_list                shift and go to state 85
    connection                     shift and go to state 86

state 58

    (48) func_def -> DEF IDENTIFIER LPAREN . param_list RPAREN COLON type COLON stmt_block
    (49) func_def -> DEF IDENTIFIER LPAREN . param_list RPAREN COLON stmt_block
    (50) param_list -> . param_decl param_list_tail
    (51) param_list -> . empty
    (54) param_decl -> . var_decl
    (113) empty -> .
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    RPAREN          reduce using rule 113 (empty -> .)
    IDENTIFIER      shift and go to state 88

    param_list                     shift and go to state 89
    param_decl                     shift and go to state 90
    empty                          shift and go to state 91
    var_decl                       shift and go to state 92

state 59

    (68) for_stmt -> FOR IDENTIFIER IN . expr COLON stmt_block
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 93
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 60

    (71) if_stmt -> IF expr COLON . stmt_block ELSE COLON stmt_block
    (72) if_stmt -> IF expr COLON . stmt_block
    (55) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 94

state 61

    (74) expr -> expr_head bin_op . expr_tail
    (81) expr_tail -> . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr_head                      shift and go to state 33
    expr_tail                      shift and go to state 96
    expr                           shift and go to state 97
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 62

    (102) bin_op -> PLUS .

    IDENTIFIER      reduce using rule 102 (bin_op -> PLUS .)
    STRING          reduce using rule 102 (bin_op -> PLUS .)
    NUMBER          reduce using rule 102 (bin_op -> PLUS .)
    LBRACE          reduce using rule 102 (bin_op -> PLUS .)


state 63

    (103) bin_op -> MINUS .

    IDENTIFIER      reduce using rule 103 (bin_op -> MINUS .)
    STRING          reduce using rule 103 (bin_op -> MINUS .)
    NUMBER          reduce using rule 103 (bin_op -> MINUS .)
    LBRACE          reduce using rule 103 (bin_op -> MINUS .)


state 64

    (104) bin_op -> TIMES .

    IDENTIFIER      reduce using rule 104 (bin_op -> TIMES .)
    STRING          reduce using rule 104 (bin_op -> TIMES .)
    NUMBER          reduce using rule 104 (bin_op -> TIMES .)
    LBRACE          reduce using rule 104 (bin_op -> TIMES .)


state 65

    (105) bin_op -> DIVIDE .

    IDENTIFIER      reduce using rule 105 (bin_op -> DIVIDE .)
    STRING          reduce using rule 105 (bin_op -> DIVIDE .)
    NUMBER          reduce using rule 105 (bin_op -> DIVIDE .)
    LBRACE          reduce using rule 105 (bin_op -> DIVIDE .)


state 66

    (106) bin_op -> MOD .

    IDENTIFIER      reduce using rule 106 (bin_op -> MOD .)
    STRING          reduce using rule 106 (bin_op -> MOD .)
    NUMBER          reduce using rule 106 (bin_op -> MOD .)
    LBRACE          reduce using rule 106 (bin_op -> MOD .)


state 67

    (107) bin_op -> EQ .

    IDENTIFIER      reduce using rule 107 (bin_op -> EQ .)
    STRING          reduce using rule 107 (bin_op -> EQ .)
    NUMBER          reduce using rule 107 (bin_op -> EQ .)
    LBRACE          reduce using rule 107 (bin_op -> EQ .)


state 68

    (108) bin_op -> NEQ .

    IDENTIFIER      reduce using rule 108 (bin_op -> NEQ .)
    STRING          reduce using rule 108 (bin_op -> NEQ .)
    NUMBER          reduce using rule 108 (bin_op -> NEQ .)
    LBRACE          reduce using rule 108 (bin_op -> NEQ .)


state 69

    (109) bin_op -> LT .

    IDENTIFIER      reduce using rule 109 (bin_op -> LT .)
    STRING          reduce using rule 109 (bin_op -> LT .)
    NUMBER          reduce using rule 109 (bin_op -> LT .)
    LBRACE          reduce using rule 109 (bin_op -> LT .)


state 70

    (110) bin_op -> GT .

    IDENTIFIER      reduce using rule 110 (bin_op -> GT .)
    STRING          reduce using rule 110 (bin_op -> GT .)
    NUMBER          reduce using rule 110 (bin_op -> GT .)
    LBRACE          reduce using rule 110 (bin_op -> GT .)


state 71

    (111) bin_op -> LE .

    IDENTIFIER      reduce using rule 111 (bin_op -> LE .)
    STRING          reduce using rule 111 (bin_op -> LE .)
    NUMBER          reduce using rule 111 (bin_op -> LE .)
    LBRACE          reduce using rule 111 (bin_op -> LE .)


state 72

    (112) bin_op -> GE .

    IDENTIFIER      reduce using rule 112 (bin_op -> GE .)
    STRING          reduce using rule 112 (bin_op -> GE .)
    NUMBER          reduce using rule 112 (bin_op -> GE .)
    LBRACE          reduce using rule 112 (bin_op -> GE .)


state 73

    (96) field_access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 98


state 74

    (97) func_call -> IDENTIFIER LPAREN . arg_list RPAREN
    (98) arg_list -> . expr arg_list_tail
    (99) arg_list -> . empty
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (113) empty -> .
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    RPAREN          reduce using rule 113 (empty -> .)
    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    arg_list                       shift and go to state 99
    expr                           shift and go to state 100
    empty                          shift and go to state 101
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 75

    (85) list_expr -> LBRACE list_elements . RBRACE

    RBRACE          shift and go to state 102


state 76

    (90) record_expr -> LBRACE record_elements . RBRACE

    RBRACE          shift and go to state 103


state 77

    (86) list_elements -> expr . list_elements_tail
    (87) list_elements -> expr .
    (88) list_elements_tail -> . COMMA expr list_elements_tail
    (89) list_elements_tail -> . COMMA expr

    RBRACE          reduce using rule 87 (list_elements -> expr .)
    COMMA           shift and go to state 105

    list_elements_tail             shift and go to state 104

state 78

    (91) record_elements -> field_assign . record_elements_tail
    (92) record_elements -> field_assign .
    (93) record_elements_tail -> . COMMA field_assign record_elements_tail
    (94) record_elements_tail -> . COMMA field_assign

    RBRACE          reduce using rule 92 (record_elements -> field_assign .)
    COMMA           shift and go to state 107

    record_elements_tail           shift and go to state 106

state 79

    (95) field_assign -> IDENTIFIER . DOT IDENTIFIER EQUALS expr
    (82) atom -> IDENTIFIER .
    (96) field_access -> IDENTIFIER . DOT IDENTIFIER
    (97) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    DOT             shift and go to state 108
    PLUS            reduce using rule 82 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 82 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 82 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (atom -> IDENTIFIER .)
    MOD             reduce using rule 82 (atom -> IDENTIFIER .)
    EQ              reduce using rule 82 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 82 (atom -> IDENTIFIER .)
    LT              reduce using rule 82 (atom -> IDENTIFIER .)
    GT              reduce using rule 82 (atom -> IDENTIFIER .)
    LE              reduce using rule 82 (atom -> IDENTIFIER .)
    GE              reduce using rule 82 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 82 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 82 (atom -> IDENTIFIER .)
    LPAREN          shift and go to state 74


state 80

    (73) while_stmt -> WHILE expr COLON . stmt_block
    (55) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 109

state 81

    (26) agent_def -> AGENT IDENTIFIER COLON INDENT . agent_body DEDENT
    (27) agent_body -> . agent_body_item agent_body
    (28) agent_body -> . agent_body_item
    (29) agent_body_item -> . input_block
    (30) agent_body_item -> . output_block
    (31) agent_body_item -> . model_block
    (32) agent_body_item -> . statement
    (33) agent_body_item -> . chat_block
    (34) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (35) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (36) model_block -> . MODEL COLON STRING
    (58) statement -> . for_stmt
    (59) statement -> . if_stmt
    (60) statement -> . while_stmt
    (61) statement -> . assign_stmt
    (62) statement -> . break_stmt
    (63) statement -> . continue_stmt
    (64) statement -> . return_stmt
    (37) chat_block -> . CHAT IDENTIFIER COLON TRIPLE_STRING
    (38) chat_block -> . CHAT COLON TRIPLE_STRING
    (68) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (71) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> . IF expr COLON stmt_block
    (73) while_stmt -> . WHILE expr COLON stmt_block
    (65) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (66) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) break_stmt -> . BREAK
    (70) continue_stmt -> . CONTINUE
    (67) return_stmt -> . RETURN expr

    INPUT           shift and go to state 117
    OUTPUT          shift and go to state 118
    MODEL           shift and go to state 119
    CHAT            shift and go to state 120
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    agent_body                     shift and go to state 110
    agent_body_item                shift and go to state 111
    input_block                    shift and go to state 112
    output_block                   shift and go to state 113
    model_block                    shift and go to state 114
    statement                      shift and go to state 115
    chat_block                     shift and go to state 116
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 82

    (65) assign_stmt -> IDENTIFIER COLON type EQUALS . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 121
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 83

    (21) list_type -> TYPE_LIST LBRACE . type RBRACE
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 122
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 84

    (22) record_type -> TYPE_RECORD LBRACE . field_decl_list RBRACE
    (23) field_decl_list -> . field_decl field_decl_list
    (24) field_decl_list -> . field_decl
    (25) field_decl -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 125

    field_decl_list                shift and go to state 123
    field_decl                     shift and go to state 124

state 85

    (39) connect_block -> CONNECT COLON INDENT connection_list . DEDENT

    DEDENT          shift and go to state 126


state 86

    (40) connection_list -> connection . connection_list
    (41) connection_list -> connection .
    (40) connection_list -> . connection connection_list
    (41) connection_list -> . connection
    (42) connection -> . IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT

    DEDENT          reduce using rule 41 (connection_list -> connection .)
    IDENTIFIER      shift and go to state 87

    connection                     shift and go to state 86
    connection_list                shift and go to state 127

state 87

    (42) connection -> IDENTIFIER . COLON type INDENT agent_ref ARROW agent_ref DEDENT

    COLON           shift and go to state 128


state 88

    (10) var_decl -> IDENTIFIER . COLON type EQUALS expr
    (11) var_decl -> IDENTIFIER . COLON type
    (12) var_decl -> IDENTIFIER . EQUALS expr
    (13) var_decl -> IDENTIFIER .

    COLON           shift and go to state 129
    EQUALS          shift and go to state 130
    COMMA           reduce using rule 13 (var_decl -> IDENTIFIER .)
    RPAREN          reduce using rule 13 (var_decl -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 13 (var_decl -> IDENTIFIER .)
    DEDENT          reduce using rule 13 (var_decl -> IDENTIFIER .)


state 89

    (48) func_def -> DEF IDENTIFIER LPAREN param_list . RPAREN COLON type COLON stmt_block
    (49) func_def -> DEF IDENTIFIER LPAREN param_list . RPAREN COLON stmt_block

    RPAREN          shift and go to state 131


state 90

    (50) param_list -> param_decl . param_list_tail
    (52) param_list_tail -> . COMMA param_decl param_list_tail
    (53) param_list_tail -> . empty
    (113) empty -> .

    COMMA           shift and go to state 133
    RPAREN          reduce using rule 113 (empty -> .)

    param_list_tail                shift and go to state 132
    empty                          shift and go to state 134

state 91

    (51) param_list -> empty .

    RPAREN          reduce using rule 51 (param_list -> empty .)


state 92

    (54) param_decl -> var_decl .

    COMMA           reduce using rule 54 (param_decl -> var_decl .)
    RPAREN          reduce using rule 54 (param_decl -> var_decl .)


state 93

    (68) for_stmt -> FOR IDENTIFIER IN expr . COLON stmt_block

    COLON           shift and go to state 135


state 94

    (71) if_stmt -> IF expr COLON stmt_block . ELSE COLON stmt_block
    (72) if_stmt -> IF expr COLON stmt_block .

    ELSE            shift and go to state 136
    AGENT           reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    CONNECT         reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    DEF             reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    FOR             reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    IF              reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    WHILE           reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    BREAK           reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    CONTINUE        reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    RETURN          reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    $end            reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    INPUT           reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    OUTPUT          reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    MODEL           reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    CHAT            reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)
    DEDENT          reduce using rule 72 (if_stmt -> IF expr COLON stmt_block .)


state 95

    (55) stmt_block -> INDENT . statement_list DEDENT
    (56) statement_list -> . statement statement_list
    (57) statement_list -> . statement
    (58) statement -> . for_stmt
    (59) statement -> . if_stmt
    (60) statement -> . while_stmt
    (61) statement -> . assign_stmt
    (62) statement -> . break_stmt
    (63) statement -> . continue_stmt
    (64) statement -> . return_stmt
    (68) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (71) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> . IF expr COLON stmt_block
    (73) while_stmt -> . WHILE expr COLON stmt_block
    (65) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (66) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) break_stmt -> . BREAK
    (70) continue_stmt -> . CONTINUE
    (67) return_stmt -> . RETURN expr

    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    statement_list                 shift and go to state 137
    statement                      shift and go to state 138
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 96

    (74) expr -> expr_head bin_op expr_tail .

    COLON           reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    AGENT           reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    CONNECT         reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    DEF             reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    FOR             reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    IF              reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    WHILE           reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    IDENTIFIER      reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    BREAK           reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    CONTINUE        reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    RETURN          reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    $end            reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    INPUT           reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    OUTPUT          reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    MODEL           reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    CHAT            reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    DEDENT          reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    COMMA           reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    RBRACE          reduce using rule 74 (expr -> expr_head bin_op expr_tail .)
    RPAREN          reduce using rule 74 (expr -> expr_head bin_op expr_tail .)


state 97

    (81) expr_tail -> expr .

    COLON           reduce using rule 81 (expr_tail -> expr .)
    AGENT           reduce using rule 81 (expr_tail -> expr .)
    CONNECT         reduce using rule 81 (expr_tail -> expr .)
    DEF             reduce using rule 81 (expr_tail -> expr .)
    FOR             reduce using rule 81 (expr_tail -> expr .)
    IF              reduce using rule 81 (expr_tail -> expr .)
    WHILE           reduce using rule 81 (expr_tail -> expr .)
    IDENTIFIER      reduce using rule 81 (expr_tail -> expr .)
    BREAK           reduce using rule 81 (expr_tail -> expr .)
    CONTINUE        reduce using rule 81 (expr_tail -> expr .)
    RETURN          reduce using rule 81 (expr_tail -> expr .)
    $end            reduce using rule 81 (expr_tail -> expr .)
    INPUT           reduce using rule 81 (expr_tail -> expr .)
    OUTPUT          reduce using rule 81 (expr_tail -> expr .)
    MODEL           reduce using rule 81 (expr_tail -> expr .)
    CHAT            reduce using rule 81 (expr_tail -> expr .)
    DEDENT          reduce using rule 81 (expr_tail -> expr .)
    COMMA           reduce using rule 81 (expr_tail -> expr .)
    RBRACE          reduce using rule 81 (expr_tail -> expr .)
    RPAREN          reduce using rule 81 (expr_tail -> expr .)


state 98

    (96) field_access -> IDENTIFIER DOT IDENTIFIER .

    PLUS            reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    NEQ             reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    AGENT           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CONNECT         reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DEF             reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    FOR             reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    IF              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    WHILE           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    BREAK           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CONTINUE        reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RETURN          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    $end            reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    INPUT           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    OUTPUT          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MODEL           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CHAT            reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DEDENT          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RBRACE          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RPAREN          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)


state 99

    (97) func_call -> IDENTIFIER LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 139


state 100

    (98) arg_list -> expr . arg_list_tail
    (100) arg_list_tail -> . COMMA expr arg_list_tail
    (101) arg_list_tail -> . empty
    (113) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 113 (empty -> .)

    arg_list_tail                  shift and go to state 140
    empty                          shift and go to state 142

state 101

    (99) arg_list -> empty .

    RPAREN          reduce using rule 99 (arg_list -> empty .)


state 102

    (85) list_expr -> LBRACE list_elements RBRACE .

    PLUS            reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    MINUS           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    TIMES           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    DIVIDE          reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    MOD             reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    EQ              reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    NEQ             reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    LT              reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    GT              reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    LE              reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    GE              reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    COLON           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    AGENT           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    CONNECT         reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    DEF             reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    FOR             reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    IF              reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    WHILE           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    IDENTIFIER      reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    BREAK           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    CONTINUE        reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    RETURN          reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    $end            reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    INPUT           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    OUTPUT          reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    MODEL           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    CHAT            reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    DEDENT          reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    COMMA           reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    RBRACE          reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)
    RPAREN          reduce using rule 85 (list_expr -> LBRACE list_elements RBRACE .)


state 103

    (90) record_expr -> LBRACE record_elements RBRACE .

    PLUS            reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    MINUS           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    TIMES           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    DIVIDE          reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    MOD             reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    EQ              reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    NEQ             reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    LT              reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    GT              reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    LE              reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    GE              reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    COLON           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    AGENT           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    CONNECT         reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    DEF             reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    FOR             reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    IF              reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    WHILE           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    IDENTIFIER      reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    BREAK           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    CONTINUE        reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    RETURN          reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    $end            reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    INPUT           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    OUTPUT          reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    MODEL           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    CHAT            reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    DEDENT          reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    COMMA           reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACE          reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)
    RPAREN          reduce using rule 90 (record_expr -> LBRACE record_elements RBRACE .)


state 104

    (86) list_elements -> expr list_elements_tail .

    RBRACE          reduce using rule 86 (list_elements -> expr list_elements_tail .)


state 105

    (88) list_elements_tail -> COMMA . expr list_elements_tail
    (89) list_elements_tail -> COMMA . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 143
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 106

    (91) record_elements -> field_assign record_elements_tail .

    RBRACE          reduce using rule 91 (record_elements -> field_assign record_elements_tail .)


state 107

    (93) record_elements_tail -> COMMA . field_assign record_elements_tail
    (94) record_elements_tail -> COMMA . field_assign
    (95) field_assign -> . IDENTIFIER DOT IDENTIFIER EQUALS expr

    IDENTIFIER      shift and go to state 145

    field_assign                   shift and go to state 144

state 108

    (95) field_assign -> IDENTIFIER DOT . IDENTIFIER EQUALS expr
    (96) field_access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 146


state 109

    (73) while_stmt -> WHILE expr COLON stmt_block .

    AGENT           reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    CONNECT         reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    DEF             reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    FOR             reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    IF              reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    WHILE           reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    BREAK           reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    CONTINUE        reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    RETURN          reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    $end            reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    INPUT           reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    OUTPUT          reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    MODEL           reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    CHAT            reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)
    DEDENT          reduce using rule 73 (while_stmt -> WHILE expr COLON stmt_block .)


state 110

    (26) agent_def -> AGENT IDENTIFIER COLON INDENT agent_body . DEDENT

    DEDENT          shift and go to state 147


state 111

    (27) agent_body -> agent_body_item . agent_body
    (28) agent_body -> agent_body_item .
    (27) agent_body -> . agent_body_item agent_body
    (28) agent_body -> . agent_body_item
    (29) agent_body_item -> . input_block
    (30) agent_body_item -> . output_block
    (31) agent_body_item -> . model_block
    (32) agent_body_item -> . statement
    (33) agent_body_item -> . chat_block
    (34) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (35) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (36) model_block -> . MODEL COLON STRING
    (58) statement -> . for_stmt
    (59) statement -> . if_stmt
    (60) statement -> . while_stmt
    (61) statement -> . assign_stmt
    (62) statement -> . break_stmt
    (63) statement -> . continue_stmt
    (64) statement -> . return_stmt
    (37) chat_block -> . CHAT IDENTIFIER COLON TRIPLE_STRING
    (38) chat_block -> . CHAT COLON TRIPLE_STRING
    (68) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (71) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> . IF expr COLON stmt_block
    (73) while_stmt -> . WHILE expr COLON stmt_block
    (65) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (66) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) break_stmt -> . BREAK
    (70) continue_stmt -> . CONTINUE
    (67) return_stmt -> . RETURN expr

    DEDENT          reduce using rule 28 (agent_body -> agent_body_item .)
    INPUT           shift and go to state 117
    OUTPUT          shift and go to state 118
    MODEL           shift and go to state 119
    CHAT            shift and go to state 120
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    agent_body_item                shift and go to state 111
    agent_body                     shift and go to state 148
    input_block                    shift and go to state 112
    output_block                   shift and go to state 113
    model_block                    shift and go to state 114
    statement                      shift and go to state 115
    chat_block                     shift and go to state 116
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 112

    (29) agent_body_item -> input_block .

    INPUT           reduce using rule 29 (agent_body_item -> input_block .)
    OUTPUT          reduce using rule 29 (agent_body_item -> input_block .)
    MODEL           reduce using rule 29 (agent_body_item -> input_block .)
    CHAT            reduce using rule 29 (agent_body_item -> input_block .)
    FOR             reduce using rule 29 (agent_body_item -> input_block .)
    IF              reduce using rule 29 (agent_body_item -> input_block .)
    WHILE           reduce using rule 29 (agent_body_item -> input_block .)
    IDENTIFIER      reduce using rule 29 (agent_body_item -> input_block .)
    BREAK           reduce using rule 29 (agent_body_item -> input_block .)
    CONTINUE        reduce using rule 29 (agent_body_item -> input_block .)
    RETURN          reduce using rule 29 (agent_body_item -> input_block .)
    DEDENT          reduce using rule 29 (agent_body_item -> input_block .)


state 113

    (30) agent_body_item -> output_block .

    INPUT           reduce using rule 30 (agent_body_item -> output_block .)
    OUTPUT          reduce using rule 30 (agent_body_item -> output_block .)
    MODEL           reduce using rule 30 (agent_body_item -> output_block .)
    CHAT            reduce using rule 30 (agent_body_item -> output_block .)
    FOR             reduce using rule 30 (agent_body_item -> output_block .)
    IF              reduce using rule 30 (agent_body_item -> output_block .)
    WHILE           reduce using rule 30 (agent_body_item -> output_block .)
    IDENTIFIER      reduce using rule 30 (agent_body_item -> output_block .)
    BREAK           reduce using rule 30 (agent_body_item -> output_block .)
    CONTINUE        reduce using rule 30 (agent_body_item -> output_block .)
    RETURN          reduce using rule 30 (agent_body_item -> output_block .)
    DEDENT          reduce using rule 30 (agent_body_item -> output_block .)


state 114

    (31) agent_body_item -> model_block .

    INPUT           reduce using rule 31 (agent_body_item -> model_block .)
    OUTPUT          reduce using rule 31 (agent_body_item -> model_block .)
    MODEL           reduce using rule 31 (agent_body_item -> model_block .)
    CHAT            reduce using rule 31 (agent_body_item -> model_block .)
    FOR             reduce using rule 31 (agent_body_item -> model_block .)
    IF              reduce using rule 31 (agent_body_item -> model_block .)
    WHILE           reduce using rule 31 (agent_body_item -> model_block .)
    IDENTIFIER      reduce using rule 31 (agent_body_item -> model_block .)
    BREAK           reduce using rule 31 (agent_body_item -> model_block .)
    CONTINUE        reduce using rule 31 (agent_body_item -> model_block .)
    RETURN          reduce using rule 31 (agent_body_item -> model_block .)
    DEDENT          reduce using rule 31 (agent_body_item -> model_block .)


state 115

    (32) agent_body_item -> statement .

    INPUT           reduce using rule 32 (agent_body_item -> statement .)
    OUTPUT          reduce using rule 32 (agent_body_item -> statement .)
    MODEL           reduce using rule 32 (agent_body_item -> statement .)
    CHAT            reduce using rule 32 (agent_body_item -> statement .)
    FOR             reduce using rule 32 (agent_body_item -> statement .)
    IF              reduce using rule 32 (agent_body_item -> statement .)
    WHILE           reduce using rule 32 (agent_body_item -> statement .)
    IDENTIFIER      reduce using rule 32 (agent_body_item -> statement .)
    BREAK           reduce using rule 32 (agent_body_item -> statement .)
    CONTINUE        reduce using rule 32 (agent_body_item -> statement .)
    RETURN          reduce using rule 32 (agent_body_item -> statement .)
    DEDENT          reduce using rule 32 (agent_body_item -> statement .)


state 116

    (33) agent_body_item -> chat_block .

    INPUT           reduce using rule 33 (agent_body_item -> chat_block .)
    OUTPUT          reduce using rule 33 (agent_body_item -> chat_block .)
    MODEL           reduce using rule 33 (agent_body_item -> chat_block .)
    CHAT            reduce using rule 33 (agent_body_item -> chat_block .)
    FOR             reduce using rule 33 (agent_body_item -> chat_block .)
    IF              reduce using rule 33 (agent_body_item -> chat_block .)
    WHILE           reduce using rule 33 (agent_body_item -> chat_block .)
    IDENTIFIER      reduce using rule 33 (agent_body_item -> chat_block .)
    BREAK           reduce using rule 33 (agent_body_item -> chat_block .)
    CONTINUE        reduce using rule 33 (agent_body_item -> chat_block .)
    RETURN          reduce using rule 33 (agent_body_item -> chat_block .)
    DEDENT          reduce using rule 33 (agent_body_item -> chat_block .)


state 117

    (34) input_block -> INPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 149


state 118

    (35) output_block -> OUTPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 150


state 119

    (36) model_block -> MODEL . COLON STRING

    COLON           shift and go to state 151


state 120

    (37) chat_block -> CHAT . IDENTIFIER COLON TRIPLE_STRING
    (38) chat_block -> CHAT . COLON TRIPLE_STRING

    IDENTIFIER      shift and go to state 152
    COLON           shift and go to state 153


state 121

    (65) assign_stmt -> IDENTIFIER COLON type EQUALS expr .

    AGENT           reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CONNECT         reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    DEF             reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    FOR             reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    IF              reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    WHILE           reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    BREAK           reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CONTINUE        reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    RETURN          reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    $end            reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    INPUT           reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    OUTPUT          reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    MODEL           reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CHAT            reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    DEDENT          reduce using rule 65 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)


state 122

    (21) list_type -> TYPE_LIST LBRACE type . RBRACE

    RBRACE          shift and go to state 154


state 123

    (22) record_type -> TYPE_RECORD LBRACE field_decl_list . RBRACE

    RBRACE          shift and go to state 155


state 124

    (23) field_decl_list -> field_decl . field_decl_list
    (24) field_decl_list -> field_decl .
    (23) field_decl_list -> . field_decl field_decl_list
    (24) field_decl_list -> . field_decl
    (25) field_decl -> . IDENTIFIER COLON type

    RBRACE          reduce using rule 24 (field_decl_list -> field_decl .)
    IDENTIFIER      shift and go to state 125

    field_decl                     shift and go to state 124
    field_decl_list                shift and go to state 156

state 125

    (25) field_decl -> IDENTIFIER . COLON type

    COLON           shift and go to state 157


state 126

    (39) connect_block -> CONNECT COLON INDENT connection_list DEDENT .

    AGENT           reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONNECT         reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    DEF             reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FOR             reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IF              reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    WHILE           reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IDENTIFIER      reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    BREAK           reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONTINUE        reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    RETURN          reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    $end            reduce using rule 39 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)


state 127

    (40) connection_list -> connection connection_list .

    DEDENT          reduce using rule 40 (connection_list -> connection connection_list .)


state 128

    (42) connection -> IDENTIFIER COLON . type INDENT agent_ref ARROW agent_ref DEDENT
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 158
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 129

    (10) var_decl -> IDENTIFIER COLON . type EQUALS expr
    (11) var_decl -> IDENTIFIER COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 159
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 130

    (12) var_decl -> IDENTIFIER EQUALS . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 160
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 131

    (48) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN . COLON type COLON stmt_block
    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN . COLON stmt_block

    COLON           shift and go to state 161


state 132

    (50) param_list -> param_decl param_list_tail .

    RPAREN          reduce using rule 50 (param_list -> param_decl param_list_tail .)


state 133

    (52) param_list_tail -> COMMA . param_decl param_list_tail
    (54) param_decl -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 88

    param_decl                     shift and go to state 162
    var_decl                       shift and go to state 92

state 134

    (53) param_list_tail -> empty .

    RPAREN          reduce using rule 53 (param_list_tail -> empty .)


state 135

    (68) for_stmt -> FOR IDENTIFIER IN expr COLON . stmt_block
    (55) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 163

state 136

    (71) if_stmt -> IF expr COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 164


state 137

    (55) stmt_block -> INDENT statement_list . DEDENT

    DEDENT          shift and go to state 165


state 138

    (56) statement_list -> statement . statement_list
    (57) statement_list -> statement .
    (56) statement_list -> . statement statement_list
    (57) statement_list -> . statement
    (58) statement -> . for_stmt
    (59) statement -> . if_stmt
    (60) statement -> . while_stmt
    (61) statement -> . assign_stmt
    (62) statement -> . break_stmt
    (63) statement -> . continue_stmt
    (64) statement -> . return_stmt
    (68) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (71) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (72) if_stmt -> . IF expr COLON stmt_block
    (73) while_stmt -> . WHILE expr COLON stmt_block
    (65) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (66) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) break_stmt -> . BREAK
    (70) continue_stmt -> . CONTINUE
    (67) return_stmt -> . RETURN expr

    DEDENT          reduce using rule 57 (statement_list -> statement .)
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    statement                      shift and go to state 138
    statement_list                 shift and go to state 166
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 139

    (97) func_call -> IDENTIFIER LPAREN arg_list RPAREN .

    PLUS            reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LE              reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GE              reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COLON           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    AGENT           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CONNECT         reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DEF             reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    FOR             reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IF              reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    $end            reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    INPUT           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    OUTPUT          reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MODEL           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CHAT            reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DEDENT          reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 97 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)


state 140

    (98) arg_list -> expr arg_list_tail .

    RPAREN          reduce using rule 98 (arg_list -> expr arg_list_tail .)


state 141

    (100) arg_list_tail -> COMMA . expr arg_list_tail
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 167
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 142

    (101) arg_list_tail -> empty .

    RPAREN          reduce using rule 101 (arg_list_tail -> empty .)


state 143

    (88) list_elements_tail -> COMMA expr . list_elements_tail
    (89) list_elements_tail -> COMMA expr .
    (88) list_elements_tail -> . COMMA expr list_elements_tail
    (89) list_elements_tail -> . COMMA expr

    RBRACE          reduce using rule 89 (list_elements_tail -> COMMA expr .)
    COMMA           shift and go to state 105

    list_elements_tail             shift and go to state 168

state 144

    (93) record_elements_tail -> COMMA field_assign . record_elements_tail
    (94) record_elements_tail -> COMMA field_assign .
    (93) record_elements_tail -> . COMMA field_assign record_elements_tail
    (94) record_elements_tail -> . COMMA field_assign

    RBRACE          reduce using rule 94 (record_elements_tail -> COMMA field_assign .)
    COMMA           shift and go to state 107

    record_elements_tail           shift and go to state 169

state 145

    (95) field_assign -> IDENTIFIER . DOT IDENTIFIER EQUALS expr

    DOT             shift and go to state 170


state 146

    (95) field_assign -> IDENTIFIER DOT IDENTIFIER . EQUALS expr
    (96) field_access -> IDENTIFIER DOT IDENTIFIER .

    EQUALS          shift and go to state 171
    PLUS            reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    NEQ             reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RBRACE          reduce using rule 96 (field_access -> IDENTIFIER DOT IDENTIFIER .)


state 147

    (26) agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .

    AGENT           reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    CONNECT         reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    DEF             reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    FOR             reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    IF              reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    WHILE           reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    IDENTIFIER      reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    BREAK           reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    CONTINUE        reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    RETURN          reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    $end            reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)


state 148

    (27) agent_body -> agent_body_item agent_body .

    DEDENT          reduce using rule 27 (agent_body -> agent_body_item agent_body .)


state 149

    (34) input_block -> INPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 172


state 150

    (35) output_block -> OUTPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 173


state 151

    (36) model_block -> MODEL COLON . STRING

    STRING          shift and go to state 174


state 152

    (37) chat_block -> CHAT IDENTIFIER . COLON TRIPLE_STRING

    COLON           shift and go to state 175


state 153

    (38) chat_block -> CHAT COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 176


state 154

    (21) list_type -> TYPE_LIST LBRACE type RBRACE .

    EQUALS          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    RBRACE          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    INDENT          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    COMMA           reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    RPAREN          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    IDENTIFIER      reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    DEDENT          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    COLON           reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)


state 155

    (22) record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .

    EQUALS          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACE          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    INDENT          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COMMA           reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RPAREN          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IDENTIFIER      reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    DEDENT          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COLON           reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)


state 156

    (23) field_decl_list -> field_decl field_decl_list .

    RBRACE          reduce using rule 23 (field_decl_list -> field_decl field_decl_list .)


state 157

    (25) field_decl -> IDENTIFIER COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 177
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 158

    (42) connection -> IDENTIFIER COLON type . INDENT agent_ref ARROW agent_ref DEDENT

    INDENT          shift and go to state 178


state 159

    (10) var_decl -> IDENTIFIER COLON type . EQUALS expr
    (11) var_decl -> IDENTIFIER COLON type .

    EQUALS          shift and go to state 179
    COMMA           reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)
    RPAREN          reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)
    IDENTIFIER      reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)
    DEDENT          reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)


state 160

    (12) var_decl -> IDENTIFIER EQUALS expr .

    COMMA           reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)
    RPAREN          reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)
    IDENTIFIER      reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)
    DEDENT          reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)


state 161

    (48) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON . type COLON stmt_block
    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON . stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (55) stmt_block -> . INDENT statement_list DEDENT
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    INDENT          shift and go to state 95
    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 180
    stmt_block                     shift and go to state 181
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 162

    (52) param_list_tail -> COMMA param_decl . param_list_tail
    (52) param_list_tail -> . COMMA param_decl param_list_tail
    (53) param_list_tail -> . empty
    (113) empty -> .

    COMMA           shift and go to state 133
    RPAREN          reduce using rule 113 (empty -> .)

    param_list_tail                shift and go to state 182
    empty                          shift and go to state 134

state 163

    (68) for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .

    AGENT           reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CONNECT         reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    DEF             reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    FOR             reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    IF              reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    WHILE           reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    BREAK           reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CONTINUE        reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    RETURN          reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    $end            reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    INPUT           reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    OUTPUT          reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    MODEL           reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CHAT            reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    DEDENT          reduce using rule 68 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)


state 164

    (71) if_stmt -> IF expr COLON stmt_block ELSE COLON . stmt_block
    (55) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 183

state 165

    (55) stmt_block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    AGENT           reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    CONNECT         reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    DEF             reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    IDENTIFIER      reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    BREAK           reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    CONTINUE        reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    INPUT           reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    OUTPUT          reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    MODEL           reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    CHAT            reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 55 (stmt_block -> INDENT statement_list DEDENT .)


state 166

    (56) statement_list -> statement statement_list .

    DEDENT          reduce using rule 56 (statement_list -> statement statement_list .)


state 167

    (100) arg_list_tail -> COMMA expr . arg_list_tail
    (100) arg_list_tail -> . COMMA expr arg_list_tail
    (101) arg_list_tail -> . empty
    (113) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 113 (empty -> .)

    arg_list_tail                  shift and go to state 184
    empty                          shift and go to state 142

state 168

    (88) list_elements_tail -> COMMA expr list_elements_tail .

    RBRACE          reduce using rule 88 (list_elements_tail -> COMMA expr list_elements_tail .)


state 169

    (93) record_elements_tail -> COMMA field_assign record_elements_tail .

    RBRACE          reduce using rule 93 (record_elements_tail -> COMMA field_assign record_elements_tail .)


state 170

    (95) field_assign -> IDENTIFIER DOT . IDENTIFIER EQUALS expr

    IDENTIFIER      shift and go to state 185


state 171

    (95) field_assign -> IDENTIFIER DOT IDENTIFIER EQUALS . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 186
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 172

    (34) input_block -> INPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 88

    var_decl_list                  shift and go to state 187
    var_decl                       shift and go to state 188

state 173

    (35) output_block -> OUTPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 88

    var_decl_list                  shift and go to state 189
    var_decl                       shift and go to state 188

state 174

    (36) model_block -> MODEL COLON STRING .

    INPUT           reduce using rule 36 (model_block -> MODEL COLON STRING .)
    OUTPUT          reduce using rule 36 (model_block -> MODEL COLON STRING .)
    MODEL           reduce using rule 36 (model_block -> MODEL COLON STRING .)
    CHAT            reduce using rule 36 (model_block -> MODEL COLON STRING .)
    FOR             reduce using rule 36 (model_block -> MODEL COLON STRING .)
    IF              reduce using rule 36 (model_block -> MODEL COLON STRING .)
    WHILE           reduce using rule 36 (model_block -> MODEL COLON STRING .)
    IDENTIFIER      reduce using rule 36 (model_block -> MODEL COLON STRING .)
    BREAK           reduce using rule 36 (model_block -> MODEL COLON STRING .)
    CONTINUE        reduce using rule 36 (model_block -> MODEL COLON STRING .)
    RETURN          reduce using rule 36 (model_block -> MODEL COLON STRING .)
    DEDENT          reduce using rule 36 (model_block -> MODEL COLON STRING .)


state 175

    (37) chat_block -> CHAT IDENTIFIER COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 190


state 176

    (38) chat_block -> CHAT COLON TRIPLE_STRING .

    INPUT           reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    MODEL           reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CHAT            reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    FOR             reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IF              reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    WHILE           reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    BREAK           reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    RETURN          reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 38 (chat_block -> CHAT COLON TRIPLE_STRING .)


state 177

    (25) field_decl -> IDENTIFIER COLON type .

    IDENTIFIER      reduce using rule 25 (field_decl -> IDENTIFIER COLON type .)
    RBRACE          reduce using rule 25 (field_decl -> IDENTIFIER COLON type .)


state 178

    (42) connection -> IDENTIFIER COLON type INDENT . agent_ref ARROW agent_ref DEDENT
    (43) agent_ref -> . IDENTIFIER agent_ref_tail

    IDENTIFIER      shift and go to state 191

    agent_ref                      shift and go to state 192

state 179

    (10) var_decl -> IDENTIFIER COLON type EQUALS . expr
    (74) expr -> . expr_head bin_op expr_tail
    (75) expr -> . expr_head
    (76) expr_head -> . atom
    (77) expr_head -> . list_expr
    (78) expr_head -> . record_expr
    (79) expr_head -> . field_access
    (80) expr_head -> . func_call
    (82) atom -> . IDENTIFIER
    (83) atom -> . STRING
    (84) atom -> . NUMBER
    (85) list_expr -> . LBRACE list_elements RBRACE
    (90) record_expr -> . LBRACE record_elements RBRACE
    (96) field_access -> . IDENTIFIER DOT IDENTIFIER
    (97) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 193
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 180

    (48) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type . COLON stmt_block

    COLON           shift and go to state 194


state 181

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .

    AGENT           reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    DEF             reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    FOR             reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    IF              reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    WHILE           reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    BREAK           reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    RETURN          reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    $end            reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)


state 182

    (52) param_list_tail -> COMMA param_decl param_list_tail .

    RPAREN          reduce using rule 52 (param_list_tail -> COMMA param_decl param_list_tail .)


state 183

    (71) if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEF             reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 71 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)


state 184

    (100) arg_list_tail -> COMMA expr arg_list_tail .

    RPAREN          reduce using rule 100 (arg_list_tail -> COMMA expr arg_list_tail .)


state 185

    (95) field_assign -> IDENTIFIER DOT IDENTIFIER . EQUALS expr

    EQUALS          shift and go to state 171


state 186

    (95) field_assign -> IDENTIFIER DOT IDENTIFIER EQUALS expr .

    COMMA           reduce using rule 95 (field_assign -> IDENTIFIER DOT IDENTIFIER EQUALS expr .)
    RBRACE          reduce using rule 95 (field_assign -> IDENTIFIER DOT IDENTIFIER EQUALS expr .)


state 187

    (34) input_block -> INPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 195


state 188

    (8) var_decl_list -> var_decl . var_decl_list
    (9) var_decl_list -> var_decl .
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    DEDENT          reduce using rule 9 (var_decl_list -> var_decl .)
    IDENTIFIER      shift and go to state 88

    var_decl                       shift and go to state 188
    var_decl_list                  shift and go to state 196

state 189

    (35) output_block -> OUTPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 197


state 190

    (37) chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .

    INPUT           reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    MODEL           reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    CHAT            reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    FOR             reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    IF              reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    WHILE           reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    BREAK           reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    RETURN          reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 37 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)


state 191

    (43) agent_ref -> IDENTIFIER . agent_ref_tail
    (44) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (45) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (46) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (47) agent_ref_tail -> . empty
    (113) empty -> .

    DOT             shift and go to state 199
    ARROW           reduce using rule 113 (empty -> .)
    DEDENT          reduce using rule 113 (empty -> .)

    agent_ref_tail                 shift and go to state 198
    empty                          shift and go to state 200

state 192

    (42) connection -> IDENTIFIER COLON type INDENT agent_ref . ARROW agent_ref DEDENT

    ARROW           shift and go to state 201


state 193

    (10) var_decl -> IDENTIFIER COLON type EQUALS expr .

    COMMA           reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    RPAREN          reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    DEDENT          reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)


state 194

    (48) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON . stmt_block
    (55) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 202

state 195

    (34) input_block -> INPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 34 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)


state 196

    (8) var_decl_list -> var_decl var_decl_list .

    DEDENT          reduce using rule 8 (var_decl_list -> var_decl var_decl_list .)


state 197

    (35) output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 35 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)


state 198

    (43) agent_ref -> IDENTIFIER agent_ref_tail .

    ARROW           reduce using rule 43 (agent_ref -> IDENTIFIER agent_ref_tail .)
    DEDENT          reduce using rule 43 (agent_ref -> IDENTIFIER agent_ref_tail .)


state 199

    (44) agent_ref_tail -> DOT . IDENTIFIER agent_ref_tail
    (45) agent_ref_tail -> DOT . OUTPUT agent_ref_tail
    (46) agent_ref_tail -> DOT . INPUT agent_ref_tail

    IDENTIFIER      shift and go to state 203
    OUTPUT          shift and go to state 204
    INPUT           shift and go to state 205


state 200

    (47) agent_ref_tail -> empty .

    ARROW           reduce using rule 47 (agent_ref_tail -> empty .)
    DEDENT          reduce using rule 47 (agent_ref_tail -> empty .)


state 201

    (42) connection -> IDENTIFIER COLON type INDENT agent_ref ARROW . agent_ref DEDENT
    (43) agent_ref -> . IDENTIFIER agent_ref_tail

    IDENTIFIER      shift and go to state 191

    agent_ref                      shift and go to state 206

state 202

    (48) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .

    AGENT           reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    CONNECT         reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    DEF             reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    FOR             reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    IF              reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    WHILE           reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    IDENTIFIER      reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    BREAK           reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    CONTINUE        reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    RETURN          reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    $end            reduce using rule 48 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)


state 203

    (44) agent_ref_tail -> DOT IDENTIFIER . agent_ref_tail
    (44) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (45) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (46) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (47) agent_ref_tail -> . empty
    (113) empty -> .

    DOT             shift and go to state 199
    ARROW           reduce using rule 113 (empty -> .)
    DEDENT          reduce using rule 113 (empty -> .)

    agent_ref_tail                 shift and go to state 207
    empty                          shift and go to state 200

state 204

    (45) agent_ref_tail -> DOT OUTPUT . agent_ref_tail
    (44) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (45) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (46) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (47) agent_ref_tail -> . empty
    (113) empty -> .

    DOT             shift and go to state 199
    ARROW           reduce using rule 113 (empty -> .)
    DEDENT          reduce using rule 113 (empty -> .)

    agent_ref_tail                 shift and go to state 208
    empty                          shift and go to state 200

state 205

    (46) agent_ref_tail -> DOT INPUT . agent_ref_tail
    (44) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (45) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (46) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (47) agent_ref_tail -> . empty
    (113) empty -> .

    DOT             shift and go to state 199
    ARROW           reduce using rule 113 (empty -> .)
    DEDENT          reduce using rule 113 (empty -> .)

    agent_ref_tail                 shift and go to state 209
    empty                          shift and go to state 200

state 206

    (42) connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref . DEDENT

    DEDENT          shift and go to state 210


state 207

    (44) agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .

    ARROW           reduce using rule 44 (agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .)
    DEDENT          reduce using rule 44 (agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .)


state 208

    (45) agent_ref_tail -> DOT OUTPUT agent_ref_tail .

    ARROW           reduce using rule 45 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)
    DEDENT          reduce using rule 45 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)


state 209

    (46) agent_ref_tail -> DOT INPUT agent_ref_tail .

    ARROW           reduce using rule 46 (agent_ref_tail -> DOT INPUT agent_ref_tail .)
    DEDENT          reduce using rule 46 (agent_ref_tail -> DOT INPUT agent_ref_tail .)


state 210

    (42) connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT .

    IDENTIFIER      reduce using rule 42 (connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT .)
    DEDENT          reduce using rule 42 (connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT .)

