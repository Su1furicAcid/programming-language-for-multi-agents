Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TYPE_TUPLE

Grammar

Rule 0     S' -> program
Rule 1     program -> program_body
Rule 2     program_body -> program_body_item program_body
Rule 3     program_body -> program_body_item
Rule 4     program_body_item -> statement
Rule 5     program_body_item -> agent_def
Rule 6     program_body_item -> connect_block
Rule 7     program_body_item -> func_def
Rule 8     var_decl_list -> var_decl var_decl_list
Rule 9     var_decl_list -> var_decl
Rule 10    var_decl -> IDENTIFIER COLON type EQUALS expr
Rule 11    var_decl -> IDENTIFIER COLON type
Rule 12    var_decl -> IDENTIFIER EQUALS expr
Rule 13    var_decl -> IDENTIFIER
Rule 14    type -> base_type
Rule 15    type -> list_type
Rule 16    type -> record_type
Rule 17    base_type -> TYPE_STR
Rule 18    base_type -> TYPE_INT
Rule 19    base_type -> TYPE_FLOAT
Rule 20    base_type -> TYPE_BOOL
Rule 21    list_type -> TYPE_LIST LBRACE type RBRACE
Rule 22    record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE
Rule 23    field_decl_list -> field_decl field_decl_list
Rule 24    field_decl_list -> field_decl
Rule 25    field_decl -> IDENTIFIER COLON type
Rule 26    agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT
Rule 27    agent_body -> agent_body_item agent_body
Rule 28    agent_body -> agent_body_item
Rule 29    agent_body_item -> input_block
Rule 30    agent_body_item -> output_block
Rule 31    agent_body_item -> memory_block
Rule 32    agent_body_item -> model_block
Rule 33    agent_body_item -> statement
Rule 34    agent_body_item -> chat_block
Rule 35    input_block -> INPUT COLON INDENT var_decl_list DEDENT
Rule 36    output_block -> OUTPUT COLON INDENT var_decl_list DEDENT
Rule 37    memory_block -> MEMORY COLON INDENT var_decl_list DEDENT
Rule 38    model_block -> MODEL COLON STRING
Rule 39    chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING
Rule 40    chat_block -> CHAT COLON TRIPLE_STRING
Rule 41    connect_block -> CONNECT COLON INDENT connection_list DEDENT
Rule 42    connection_list -> connection connection_list
Rule 43    connection_list -> connection
Rule 44    connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT
Rule 45    agent_ref -> IDENTIFIER agent_ref_tail
Rule 46    agent_ref_tail -> DOT IDENTIFIER agent_ref_tail
Rule 47    agent_ref_tail -> DOT OUTPUT agent_ref_tail
Rule 48    agent_ref_tail -> DOT INPUT agent_ref_tail
Rule 49    agent_ref_tail -> empty
Rule 50    func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
Rule 51    func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block
Rule 52    param_list -> param_decl param_list_tail
Rule 53    param_list -> empty
Rule 54    param_list_tail -> COMMA param_decl param_list_tail
Rule 55    param_list_tail -> empty
Rule 56    param_decl -> var_decl
Rule 57    stmt_block -> INDENT statement_list DEDENT
Rule 58    statement_list -> statement statement_list
Rule 59    statement_list -> statement
Rule 60    statement -> for_stmt
Rule 61    statement -> if_stmt
Rule 62    statement -> while_stmt
Rule 63    statement -> assign_stmt
Rule 64    statement -> break_stmt
Rule 65    statement -> continue_stmt
Rule 66    statement -> return_stmt
Rule 67    assign_stmt -> IDENTIFIER COLON type EQUALS expr
Rule 68    assign_stmt -> IDENTIFIER EQUALS expr
Rule 69    return_stmt -> RETURN expr
Rule 70    for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block
Rule 71    break_stmt -> BREAK
Rule 72    continue_stmt -> CONTINUE
Rule 73    if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block
Rule 74    if_stmt -> IF expr COLON stmt_block
Rule 75    while_stmt -> WHILE expr COLON stmt_block
Rule 76    expr -> expr_head bin_op expr_tail
Rule 77    expr -> expr_head
Rule 78    expr_head -> atom
Rule 79    expr_head -> list_expr
Rule 80    expr_head -> record_expr
Rule 81    expr_head -> field_access
Rule 82    expr_head -> func_call
Rule 83    expr_tail -> expr
Rule 84    atom -> IDENTIFIER
Rule 85    atom -> STRING
Rule 86    atom -> NUMBER
Rule 87    list_expr -> LBRACE list_elements RBRACE
Rule 88    list_elements -> expr list_elements_tail
Rule 89    list_elements -> expr
Rule 90    list_elements_tail -> COMMA expr list_elements_tail
Rule 91    list_elements_tail -> COMMA expr
Rule 92    record_expr -> LBRACE record_elements RBRACE
Rule 93    record_elements -> field_assign record_elements_tail
Rule 94    record_elements -> field_assign
Rule 95    record_elements_tail -> COMMA field_assign record_elements_tail
Rule 96    record_elements_tail -> COMMA field_assign
Rule 97    field_assign -> IDENTIFIER EQUALS expr
Rule 98    field_access -> IDENTIFIER DOT IDENTIFIER
Rule 99    func_call -> IDENTIFIER LPAREN arg_list RPAREN
Rule 100   arg_list -> expr arg_list_tail
Rule 101   arg_list -> empty
Rule 102   arg_list_tail -> COMMA expr arg_list_tail
Rule 103   arg_list_tail -> empty
Rule 104   bin_op -> PLUS
Rule 105   bin_op -> MINUS
Rule 106   bin_op -> TIMES
Rule 107   bin_op -> DIVIDE
Rule 108   bin_op -> MOD
Rule 109   bin_op -> EQ
Rule 110   bin_op -> NEQ
Rule 111   bin_op -> LT
Rule 112   bin_op -> GT
Rule 113   bin_op -> LE
Rule 114   bin_op -> GE
Rule 115   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 26
ARROW                : 44
BREAK                : 71
CHAT                 : 39 40
COLON                : 10 11 25 26 35 36 37 38 39 40 41 44 50 50 51 67 70 73 73 74 75
COMMA                : 54 90 91 95 96 102
CONNECT              : 41
CONTINUE             : 72
DEDENT               : 26 35 36 37 41 44 57
DEF                  : 50 51
DIVIDE               : 107
DOT                  : 46 47 48 98
ELSE                 : 73
EQ                   : 109
EQUALS               : 10 12 67 68 97
FOR                  : 70
GE                   : 114
GT                   : 112
IDENTIFIER           : 10 11 12 13 25 26 39 44 45 46 50 51 67 68 70 84 97 98 98 99
IF                   : 73 74
IN                   : 70
INDENT               : 26 35 36 37 41 44 57
INPUT                : 35 48
LBRACE               : 21 22 87 92
LE                   : 113
LPAREN               : 50 51 99
LT                   : 111
MEMORY               : 37
MINUS                : 105
MOD                  : 108
MODEL                : 38
NEQ                  : 110
NEWLINE              : 
NUMBER               : 86
OUTPUT               : 36 47
PLUS                 : 104
RBRACE               : 21 22 87 92
RETURN               : 69
RPAREN               : 50 51 99
STRING               : 38 85
TIMES                : 106
TRIPLE_STRING        : 39 40
TYPE_BOOL            : 20
TYPE_FLOAT           : 19
TYPE_INT             : 18
TYPE_LIST            : 21
TYPE_RECORD          : 22
TYPE_STR             : 17
TYPE_TUPLE           : 
WHILE                : 75
error                : 

Nonterminals, with rules where they appear

agent_body           : 26 27
agent_body_item      : 27 28
agent_def            : 5
agent_ref            : 44 44
agent_ref_tail       : 45 46 47 48
arg_list             : 99
arg_list_tail        : 100 102
assign_stmt          : 63
atom                 : 78
base_type            : 14
bin_op               : 76
break_stmt           : 64
chat_block           : 34
connect_block        : 6
connection           : 42 43
connection_list      : 41 42
continue_stmt        : 65
empty                : 49 53 55 101 103
expr                 : 10 12 67 68 69 70 73 74 75 83 88 89 90 91 97 100 102
expr_head            : 76 77
expr_tail            : 76
field_access         : 81
field_assign         : 93 94 95 96
field_decl           : 23 24
field_decl_list      : 22 23
for_stmt             : 60
func_call            : 82
func_def             : 7
if_stmt              : 61
input_block          : 29
list_elements        : 87
list_elements_tail   : 88 90
list_expr            : 79
list_type            : 15
memory_block         : 31
model_block          : 32
output_block         : 30
param_decl           : 52 54
param_list           : 50 51
param_list_tail      : 52 54
program              : 0
program_body         : 1 2
program_body_item    : 2 3
record_elements      : 92
record_elements_tail : 93 95
record_expr          : 80
record_type          : 16
return_stmt          : 66
statement            : 4 33 58 59
statement_list       : 57 58
stmt_block           : 50 51 70 73 73 74 75
type                 : 10 11 21 25 44 50 67
var_decl             : 8 9 56
var_decl_list        : 8 35 36 37
while_stmt           : 62


state 0

    (0) S' -> . program
    (1) program -> . program_body
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (60) statement -> . for_stmt
    (61) statement -> . if_stmt
    (62) statement -> . while_stmt
    (63) statement -> . assign_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (26) agent_def -> . AGENT IDENTIFIER COLON INDENT agent_body DEDENT
    (41) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (50) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
    (51) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block
    (70) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (73) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> . IF expr COLON stmt_block
    (75) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (71) break_stmt -> . BREAK
    (72) continue_stmt -> . CONTINUE
    (69) return_stmt -> . RETURN expr

    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    DEF             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    program                        shift and go to state 1
    program_body                   shift and go to state 2
    program_body_item              shift and go to state 3
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> program_body .

    $end            reduce using rule 1 (program -> program_body .)


state 3

    (2) program_body -> program_body_item . program_body
    (3) program_body -> program_body_item .
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (60) statement -> . for_stmt
    (61) statement -> . if_stmt
    (62) statement -> . while_stmt
    (63) statement -> . assign_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (26) agent_def -> . AGENT IDENTIFIER COLON INDENT agent_body DEDENT
    (41) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (50) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
    (51) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block
    (70) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (73) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> . IF expr COLON stmt_block
    (75) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (71) break_stmt -> . BREAK
    (72) continue_stmt -> . CONTINUE
    (69) return_stmt -> . RETURN expr

    $end            reduce using rule 3 (program_body -> program_body_item .)
    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    DEF             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    program_body_item              shift and go to state 3
    program_body                   shift and go to state 25
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 4

    (4) program_body_item -> statement .

    AGENT           reduce using rule 4 (program_body_item -> statement .)
    CONNECT         reduce using rule 4 (program_body_item -> statement .)
    DEF             reduce using rule 4 (program_body_item -> statement .)
    FOR             reduce using rule 4 (program_body_item -> statement .)
    IF              reduce using rule 4 (program_body_item -> statement .)
    WHILE           reduce using rule 4 (program_body_item -> statement .)
    IDENTIFIER      reduce using rule 4 (program_body_item -> statement .)
    BREAK           reduce using rule 4 (program_body_item -> statement .)
    CONTINUE        reduce using rule 4 (program_body_item -> statement .)
    RETURN          reduce using rule 4 (program_body_item -> statement .)
    $end            reduce using rule 4 (program_body_item -> statement .)


state 5

    (5) program_body_item -> agent_def .

    AGENT           reduce using rule 5 (program_body_item -> agent_def .)
    CONNECT         reduce using rule 5 (program_body_item -> agent_def .)
    DEF             reduce using rule 5 (program_body_item -> agent_def .)
    FOR             reduce using rule 5 (program_body_item -> agent_def .)
    IF              reduce using rule 5 (program_body_item -> agent_def .)
    WHILE           reduce using rule 5 (program_body_item -> agent_def .)
    IDENTIFIER      reduce using rule 5 (program_body_item -> agent_def .)
    BREAK           reduce using rule 5 (program_body_item -> agent_def .)
    CONTINUE        reduce using rule 5 (program_body_item -> agent_def .)
    RETURN          reduce using rule 5 (program_body_item -> agent_def .)
    $end            reduce using rule 5 (program_body_item -> agent_def .)


state 6

    (6) program_body_item -> connect_block .

    AGENT           reduce using rule 6 (program_body_item -> connect_block .)
    CONNECT         reduce using rule 6 (program_body_item -> connect_block .)
    DEF             reduce using rule 6 (program_body_item -> connect_block .)
    FOR             reduce using rule 6 (program_body_item -> connect_block .)
    IF              reduce using rule 6 (program_body_item -> connect_block .)
    WHILE           reduce using rule 6 (program_body_item -> connect_block .)
    IDENTIFIER      reduce using rule 6 (program_body_item -> connect_block .)
    BREAK           reduce using rule 6 (program_body_item -> connect_block .)
    CONTINUE        reduce using rule 6 (program_body_item -> connect_block .)
    RETURN          reduce using rule 6 (program_body_item -> connect_block .)
    $end            reduce using rule 6 (program_body_item -> connect_block .)


state 7

    (7) program_body_item -> func_def .

    AGENT           reduce using rule 7 (program_body_item -> func_def .)
    CONNECT         reduce using rule 7 (program_body_item -> func_def .)
    DEF             reduce using rule 7 (program_body_item -> func_def .)
    FOR             reduce using rule 7 (program_body_item -> func_def .)
    IF              reduce using rule 7 (program_body_item -> func_def .)
    WHILE           reduce using rule 7 (program_body_item -> func_def .)
    IDENTIFIER      reduce using rule 7 (program_body_item -> func_def .)
    BREAK           reduce using rule 7 (program_body_item -> func_def .)
    CONTINUE        reduce using rule 7 (program_body_item -> func_def .)
    RETURN          reduce using rule 7 (program_body_item -> func_def .)
    $end            reduce using rule 7 (program_body_item -> func_def .)


state 8

    (60) statement -> for_stmt .

    AGENT           reduce using rule 60 (statement -> for_stmt .)
    CONNECT         reduce using rule 60 (statement -> for_stmt .)
    DEF             reduce using rule 60 (statement -> for_stmt .)
    FOR             reduce using rule 60 (statement -> for_stmt .)
    IF              reduce using rule 60 (statement -> for_stmt .)
    WHILE           reduce using rule 60 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 60 (statement -> for_stmt .)
    BREAK           reduce using rule 60 (statement -> for_stmt .)
    CONTINUE        reduce using rule 60 (statement -> for_stmt .)
    RETURN          reduce using rule 60 (statement -> for_stmt .)
    $end            reduce using rule 60 (statement -> for_stmt .)
    INPUT           reduce using rule 60 (statement -> for_stmt .)
    OUTPUT          reduce using rule 60 (statement -> for_stmt .)
    MEMORY          reduce using rule 60 (statement -> for_stmt .)
    MODEL           reduce using rule 60 (statement -> for_stmt .)
    CHAT            reduce using rule 60 (statement -> for_stmt .)
    DEDENT          reduce using rule 60 (statement -> for_stmt .)


state 9

    (61) statement -> if_stmt .

    AGENT           reduce using rule 61 (statement -> if_stmt .)
    CONNECT         reduce using rule 61 (statement -> if_stmt .)
    DEF             reduce using rule 61 (statement -> if_stmt .)
    FOR             reduce using rule 61 (statement -> if_stmt .)
    IF              reduce using rule 61 (statement -> if_stmt .)
    WHILE           reduce using rule 61 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 61 (statement -> if_stmt .)
    BREAK           reduce using rule 61 (statement -> if_stmt .)
    CONTINUE        reduce using rule 61 (statement -> if_stmt .)
    RETURN          reduce using rule 61 (statement -> if_stmt .)
    $end            reduce using rule 61 (statement -> if_stmt .)
    INPUT           reduce using rule 61 (statement -> if_stmt .)
    OUTPUT          reduce using rule 61 (statement -> if_stmt .)
    MEMORY          reduce using rule 61 (statement -> if_stmt .)
    MODEL           reduce using rule 61 (statement -> if_stmt .)
    CHAT            reduce using rule 61 (statement -> if_stmt .)
    DEDENT          reduce using rule 61 (statement -> if_stmt .)


state 10

    (62) statement -> while_stmt .

    AGENT           reduce using rule 62 (statement -> while_stmt .)
    CONNECT         reduce using rule 62 (statement -> while_stmt .)
    DEF             reduce using rule 62 (statement -> while_stmt .)
    FOR             reduce using rule 62 (statement -> while_stmt .)
    IF              reduce using rule 62 (statement -> while_stmt .)
    WHILE           reduce using rule 62 (statement -> while_stmt .)
    IDENTIFIER      reduce using rule 62 (statement -> while_stmt .)
    BREAK           reduce using rule 62 (statement -> while_stmt .)
    CONTINUE        reduce using rule 62 (statement -> while_stmt .)
    RETURN          reduce using rule 62 (statement -> while_stmt .)
    $end            reduce using rule 62 (statement -> while_stmt .)
    INPUT           reduce using rule 62 (statement -> while_stmt .)
    OUTPUT          reduce using rule 62 (statement -> while_stmt .)
    MEMORY          reduce using rule 62 (statement -> while_stmt .)
    MODEL           reduce using rule 62 (statement -> while_stmt .)
    CHAT            reduce using rule 62 (statement -> while_stmt .)
    DEDENT          reduce using rule 62 (statement -> while_stmt .)


state 11

    (63) statement -> assign_stmt .

    AGENT           reduce using rule 63 (statement -> assign_stmt .)
    CONNECT         reduce using rule 63 (statement -> assign_stmt .)
    DEF             reduce using rule 63 (statement -> assign_stmt .)
    FOR             reduce using rule 63 (statement -> assign_stmt .)
    IF              reduce using rule 63 (statement -> assign_stmt .)
    WHILE           reduce using rule 63 (statement -> assign_stmt .)
    IDENTIFIER      reduce using rule 63 (statement -> assign_stmt .)
    BREAK           reduce using rule 63 (statement -> assign_stmt .)
    CONTINUE        reduce using rule 63 (statement -> assign_stmt .)
    RETURN          reduce using rule 63 (statement -> assign_stmt .)
    $end            reduce using rule 63 (statement -> assign_stmt .)
    INPUT           reduce using rule 63 (statement -> assign_stmt .)
    OUTPUT          reduce using rule 63 (statement -> assign_stmt .)
    MEMORY          reduce using rule 63 (statement -> assign_stmt .)
    MODEL           reduce using rule 63 (statement -> assign_stmt .)
    CHAT            reduce using rule 63 (statement -> assign_stmt .)
    DEDENT          reduce using rule 63 (statement -> assign_stmt .)


state 12

    (64) statement -> break_stmt .

    AGENT           reduce using rule 64 (statement -> break_stmt .)
    CONNECT         reduce using rule 64 (statement -> break_stmt .)
    DEF             reduce using rule 64 (statement -> break_stmt .)
    FOR             reduce using rule 64 (statement -> break_stmt .)
    IF              reduce using rule 64 (statement -> break_stmt .)
    WHILE           reduce using rule 64 (statement -> break_stmt .)
    IDENTIFIER      reduce using rule 64 (statement -> break_stmt .)
    BREAK           reduce using rule 64 (statement -> break_stmt .)
    CONTINUE        reduce using rule 64 (statement -> break_stmt .)
    RETURN          reduce using rule 64 (statement -> break_stmt .)
    $end            reduce using rule 64 (statement -> break_stmt .)
    INPUT           reduce using rule 64 (statement -> break_stmt .)
    OUTPUT          reduce using rule 64 (statement -> break_stmt .)
    MEMORY          reduce using rule 64 (statement -> break_stmt .)
    MODEL           reduce using rule 64 (statement -> break_stmt .)
    CHAT            reduce using rule 64 (statement -> break_stmt .)
    DEDENT          reduce using rule 64 (statement -> break_stmt .)


state 13

    (65) statement -> continue_stmt .

    AGENT           reduce using rule 65 (statement -> continue_stmt .)
    CONNECT         reduce using rule 65 (statement -> continue_stmt .)
    DEF             reduce using rule 65 (statement -> continue_stmt .)
    FOR             reduce using rule 65 (statement -> continue_stmt .)
    IF              reduce using rule 65 (statement -> continue_stmt .)
    WHILE           reduce using rule 65 (statement -> continue_stmt .)
    IDENTIFIER      reduce using rule 65 (statement -> continue_stmt .)
    BREAK           reduce using rule 65 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 65 (statement -> continue_stmt .)
    RETURN          reduce using rule 65 (statement -> continue_stmt .)
    $end            reduce using rule 65 (statement -> continue_stmt .)
    INPUT           reduce using rule 65 (statement -> continue_stmt .)
    OUTPUT          reduce using rule 65 (statement -> continue_stmt .)
    MEMORY          reduce using rule 65 (statement -> continue_stmt .)
    MODEL           reduce using rule 65 (statement -> continue_stmt .)
    CHAT            reduce using rule 65 (statement -> continue_stmt .)
    DEDENT          reduce using rule 65 (statement -> continue_stmt .)


state 14

    (66) statement -> return_stmt .

    AGENT           reduce using rule 66 (statement -> return_stmt .)
    CONNECT         reduce using rule 66 (statement -> return_stmt .)
    DEF             reduce using rule 66 (statement -> return_stmt .)
    FOR             reduce using rule 66 (statement -> return_stmt .)
    IF              reduce using rule 66 (statement -> return_stmt .)
    WHILE           reduce using rule 66 (statement -> return_stmt .)
    IDENTIFIER      reduce using rule 66 (statement -> return_stmt .)
    BREAK           reduce using rule 66 (statement -> return_stmt .)
    CONTINUE        reduce using rule 66 (statement -> return_stmt .)
    RETURN          reduce using rule 66 (statement -> return_stmt .)
    $end            reduce using rule 66 (statement -> return_stmt .)
    INPUT           reduce using rule 66 (statement -> return_stmt .)
    OUTPUT          reduce using rule 66 (statement -> return_stmt .)
    MEMORY          reduce using rule 66 (statement -> return_stmt .)
    MODEL           reduce using rule 66 (statement -> return_stmt .)
    CHAT            reduce using rule 66 (statement -> return_stmt .)
    DEDENT          reduce using rule 66 (statement -> return_stmt .)


state 15

    (26) agent_def -> AGENT . IDENTIFIER COLON INDENT agent_body DEDENT

    IDENTIFIER      shift and go to state 26


state 16

    (67) assign_stmt -> IDENTIFIER . COLON type EQUALS expr
    (68) assign_stmt -> IDENTIFIER . EQUALS expr

    COLON           shift and go to state 27
    EQUALS          shift and go to state 28


state 17

    (41) connect_block -> CONNECT . COLON INDENT connection_list DEDENT

    COLON           shift and go to state 29


state 18

    (50) func_def -> DEF . IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block
    (51) func_def -> DEF . IDENTIFIER LPAREN param_list RPAREN COLON stmt_block

    IDENTIFIER      shift and go to state 30


state 19

    (70) for_stmt -> FOR . IDENTIFIER IN expr COLON stmt_block

    IDENTIFIER      shift and go to state 31


state 20

    (73) if_stmt -> IF . expr COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> IF . expr COLON stmt_block
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 32
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 21

    (75) while_stmt -> WHILE . expr COLON stmt_block
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 43
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 22

    (71) break_stmt -> BREAK .

    AGENT           reduce using rule 71 (break_stmt -> BREAK .)
    CONNECT         reduce using rule 71 (break_stmt -> BREAK .)
    DEF             reduce using rule 71 (break_stmt -> BREAK .)
    FOR             reduce using rule 71 (break_stmt -> BREAK .)
    IF              reduce using rule 71 (break_stmt -> BREAK .)
    WHILE           reduce using rule 71 (break_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 71 (break_stmt -> BREAK .)
    BREAK           reduce using rule 71 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 71 (break_stmt -> BREAK .)
    RETURN          reduce using rule 71 (break_stmt -> BREAK .)
    $end            reduce using rule 71 (break_stmt -> BREAK .)
    INPUT           reduce using rule 71 (break_stmt -> BREAK .)
    OUTPUT          reduce using rule 71 (break_stmt -> BREAK .)
    MEMORY          reduce using rule 71 (break_stmt -> BREAK .)
    MODEL           reduce using rule 71 (break_stmt -> BREAK .)
    CHAT            reduce using rule 71 (break_stmt -> BREAK .)
    DEDENT          reduce using rule 71 (break_stmt -> BREAK .)


state 23

    (72) continue_stmt -> CONTINUE .

    AGENT           reduce using rule 72 (continue_stmt -> CONTINUE .)
    CONNECT         reduce using rule 72 (continue_stmt -> CONTINUE .)
    DEF             reduce using rule 72 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 72 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 72 (continue_stmt -> CONTINUE .)
    WHILE           reduce using rule 72 (continue_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 72 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 72 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 72 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 72 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 72 (continue_stmt -> CONTINUE .)
    INPUT           reduce using rule 72 (continue_stmt -> CONTINUE .)
    OUTPUT          reduce using rule 72 (continue_stmt -> CONTINUE .)
    MEMORY          reduce using rule 72 (continue_stmt -> CONTINUE .)
    MODEL           reduce using rule 72 (continue_stmt -> CONTINUE .)
    CHAT            reduce using rule 72 (continue_stmt -> CONTINUE .)
    DEDENT          reduce using rule 72 (continue_stmt -> CONTINUE .)


state 24

    (69) return_stmt -> RETURN . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 44
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 25

    (2) program_body -> program_body_item program_body .

    $end            reduce using rule 2 (program_body -> program_body_item program_body .)


state 26

    (26) agent_def -> AGENT IDENTIFIER . COLON INDENT agent_body DEDENT

    COLON           shift and go to state 45


state 27

    (67) assign_stmt -> IDENTIFIER COLON . type EQUALS expr
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 46
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 28

    (68) assign_stmt -> IDENTIFIER EQUALS . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 56
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 29

    (41) connect_block -> CONNECT COLON . INDENT connection_list DEDENT

    INDENT          shift and go to state 57


state 30

    (50) func_def -> DEF IDENTIFIER . LPAREN param_list RPAREN COLON type COLON stmt_block
    (51) func_def -> DEF IDENTIFIER . LPAREN param_list RPAREN COLON stmt_block

    LPAREN          shift and go to state 58


state 31

    (70) for_stmt -> FOR IDENTIFIER . IN expr COLON stmt_block

    IN              shift and go to state 59


state 32

    (73) if_stmt -> IF expr . COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> IF expr . COLON stmt_block

    COLON           shift and go to state 60


state 33

    (76) expr -> expr_head . bin_op expr_tail
    (77) expr -> expr_head .
    (104) bin_op -> . PLUS
    (105) bin_op -> . MINUS
    (106) bin_op -> . TIMES
    (107) bin_op -> . DIVIDE
    (108) bin_op -> . MOD
    (109) bin_op -> . EQ
    (110) bin_op -> . NEQ
    (111) bin_op -> . LT
    (112) bin_op -> . GT
    (113) bin_op -> . LE
    (114) bin_op -> . GE

    COLON           reduce using rule 77 (expr -> expr_head .)
    AGENT           reduce using rule 77 (expr -> expr_head .)
    CONNECT         reduce using rule 77 (expr -> expr_head .)
    DEF             reduce using rule 77 (expr -> expr_head .)
    FOR             reduce using rule 77 (expr -> expr_head .)
    IF              reduce using rule 77 (expr -> expr_head .)
    WHILE           reduce using rule 77 (expr -> expr_head .)
    IDENTIFIER      reduce using rule 77 (expr -> expr_head .)
    BREAK           reduce using rule 77 (expr -> expr_head .)
    CONTINUE        reduce using rule 77 (expr -> expr_head .)
    RETURN          reduce using rule 77 (expr -> expr_head .)
    $end            reduce using rule 77 (expr -> expr_head .)
    INPUT           reduce using rule 77 (expr -> expr_head .)
    OUTPUT          reduce using rule 77 (expr -> expr_head .)
    MEMORY          reduce using rule 77 (expr -> expr_head .)
    MODEL           reduce using rule 77 (expr -> expr_head .)
    CHAT            reduce using rule 77 (expr -> expr_head .)
    DEDENT          reduce using rule 77 (expr -> expr_head .)
    COMMA           reduce using rule 77 (expr -> expr_head .)
    RBRACE          reduce using rule 77 (expr -> expr_head .)
    RPAREN          reduce using rule 77 (expr -> expr_head .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65
    MOD             shift and go to state 66
    EQ              shift and go to state 67
    NEQ             shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72

    bin_op                         shift and go to state 61

state 34

    (78) expr_head -> atom .

    PLUS            reduce using rule 78 (expr_head -> atom .)
    MINUS           reduce using rule 78 (expr_head -> atom .)
    TIMES           reduce using rule 78 (expr_head -> atom .)
    DIVIDE          reduce using rule 78 (expr_head -> atom .)
    MOD             reduce using rule 78 (expr_head -> atom .)
    EQ              reduce using rule 78 (expr_head -> atom .)
    NEQ             reduce using rule 78 (expr_head -> atom .)
    LT              reduce using rule 78 (expr_head -> atom .)
    GT              reduce using rule 78 (expr_head -> atom .)
    LE              reduce using rule 78 (expr_head -> atom .)
    GE              reduce using rule 78 (expr_head -> atom .)
    COLON           reduce using rule 78 (expr_head -> atom .)
    AGENT           reduce using rule 78 (expr_head -> atom .)
    CONNECT         reduce using rule 78 (expr_head -> atom .)
    DEF             reduce using rule 78 (expr_head -> atom .)
    FOR             reduce using rule 78 (expr_head -> atom .)
    IF              reduce using rule 78 (expr_head -> atom .)
    WHILE           reduce using rule 78 (expr_head -> atom .)
    IDENTIFIER      reduce using rule 78 (expr_head -> atom .)
    BREAK           reduce using rule 78 (expr_head -> atom .)
    CONTINUE        reduce using rule 78 (expr_head -> atom .)
    RETURN          reduce using rule 78 (expr_head -> atom .)
    $end            reduce using rule 78 (expr_head -> atom .)
    INPUT           reduce using rule 78 (expr_head -> atom .)
    OUTPUT          reduce using rule 78 (expr_head -> atom .)
    MEMORY          reduce using rule 78 (expr_head -> atom .)
    MODEL           reduce using rule 78 (expr_head -> atom .)
    CHAT            reduce using rule 78 (expr_head -> atom .)
    DEDENT          reduce using rule 78 (expr_head -> atom .)
    COMMA           reduce using rule 78 (expr_head -> atom .)
    RBRACE          reduce using rule 78 (expr_head -> atom .)
    RPAREN          reduce using rule 78 (expr_head -> atom .)


state 35

    (79) expr_head -> list_expr .

    PLUS            reduce using rule 79 (expr_head -> list_expr .)
    MINUS           reduce using rule 79 (expr_head -> list_expr .)
    TIMES           reduce using rule 79 (expr_head -> list_expr .)
    DIVIDE          reduce using rule 79 (expr_head -> list_expr .)
    MOD             reduce using rule 79 (expr_head -> list_expr .)
    EQ              reduce using rule 79 (expr_head -> list_expr .)
    NEQ             reduce using rule 79 (expr_head -> list_expr .)
    LT              reduce using rule 79 (expr_head -> list_expr .)
    GT              reduce using rule 79 (expr_head -> list_expr .)
    LE              reduce using rule 79 (expr_head -> list_expr .)
    GE              reduce using rule 79 (expr_head -> list_expr .)
    COLON           reduce using rule 79 (expr_head -> list_expr .)
    AGENT           reduce using rule 79 (expr_head -> list_expr .)
    CONNECT         reduce using rule 79 (expr_head -> list_expr .)
    DEF             reduce using rule 79 (expr_head -> list_expr .)
    FOR             reduce using rule 79 (expr_head -> list_expr .)
    IF              reduce using rule 79 (expr_head -> list_expr .)
    WHILE           reduce using rule 79 (expr_head -> list_expr .)
    IDENTIFIER      reduce using rule 79 (expr_head -> list_expr .)
    BREAK           reduce using rule 79 (expr_head -> list_expr .)
    CONTINUE        reduce using rule 79 (expr_head -> list_expr .)
    RETURN          reduce using rule 79 (expr_head -> list_expr .)
    $end            reduce using rule 79 (expr_head -> list_expr .)
    INPUT           reduce using rule 79 (expr_head -> list_expr .)
    OUTPUT          reduce using rule 79 (expr_head -> list_expr .)
    MEMORY          reduce using rule 79 (expr_head -> list_expr .)
    MODEL           reduce using rule 79 (expr_head -> list_expr .)
    CHAT            reduce using rule 79 (expr_head -> list_expr .)
    DEDENT          reduce using rule 79 (expr_head -> list_expr .)
    COMMA           reduce using rule 79 (expr_head -> list_expr .)
    RBRACE          reduce using rule 79 (expr_head -> list_expr .)
    RPAREN          reduce using rule 79 (expr_head -> list_expr .)


state 36

    (80) expr_head -> record_expr .

    PLUS            reduce using rule 80 (expr_head -> record_expr .)
    MINUS           reduce using rule 80 (expr_head -> record_expr .)
    TIMES           reduce using rule 80 (expr_head -> record_expr .)
    DIVIDE          reduce using rule 80 (expr_head -> record_expr .)
    MOD             reduce using rule 80 (expr_head -> record_expr .)
    EQ              reduce using rule 80 (expr_head -> record_expr .)
    NEQ             reduce using rule 80 (expr_head -> record_expr .)
    LT              reduce using rule 80 (expr_head -> record_expr .)
    GT              reduce using rule 80 (expr_head -> record_expr .)
    LE              reduce using rule 80 (expr_head -> record_expr .)
    GE              reduce using rule 80 (expr_head -> record_expr .)
    COLON           reduce using rule 80 (expr_head -> record_expr .)
    AGENT           reduce using rule 80 (expr_head -> record_expr .)
    CONNECT         reduce using rule 80 (expr_head -> record_expr .)
    DEF             reduce using rule 80 (expr_head -> record_expr .)
    FOR             reduce using rule 80 (expr_head -> record_expr .)
    IF              reduce using rule 80 (expr_head -> record_expr .)
    WHILE           reduce using rule 80 (expr_head -> record_expr .)
    IDENTIFIER      reduce using rule 80 (expr_head -> record_expr .)
    BREAK           reduce using rule 80 (expr_head -> record_expr .)
    CONTINUE        reduce using rule 80 (expr_head -> record_expr .)
    RETURN          reduce using rule 80 (expr_head -> record_expr .)
    $end            reduce using rule 80 (expr_head -> record_expr .)
    INPUT           reduce using rule 80 (expr_head -> record_expr .)
    OUTPUT          reduce using rule 80 (expr_head -> record_expr .)
    MEMORY          reduce using rule 80 (expr_head -> record_expr .)
    MODEL           reduce using rule 80 (expr_head -> record_expr .)
    CHAT            reduce using rule 80 (expr_head -> record_expr .)
    DEDENT          reduce using rule 80 (expr_head -> record_expr .)
    COMMA           reduce using rule 80 (expr_head -> record_expr .)
    RBRACE          reduce using rule 80 (expr_head -> record_expr .)
    RPAREN          reduce using rule 80 (expr_head -> record_expr .)


state 37

    (81) expr_head -> field_access .

    PLUS            reduce using rule 81 (expr_head -> field_access .)
    MINUS           reduce using rule 81 (expr_head -> field_access .)
    TIMES           reduce using rule 81 (expr_head -> field_access .)
    DIVIDE          reduce using rule 81 (expr_head -> field_access .)
    MOD             reduce using rule 81 (expr_head -> field_access .)
    EQ              reduce using rule 81 (expr_head -> field_access .)
    NEQ             reduce using rule 81 (expr_head -> field_access .)
    LT              reduce using rule 81 (expr_head -> field_access .)
    GT              reduce using rule 81 (expr_head -> field_access .)
    LE              reduce using rule 81 (expr_head -> field_access .)
    GE              reduce using rule 81 (expr_head -> field_access .)
    COLON           reduce using rule 81 (expr_head -> field_access .)
    AGENT           reduce using rule 81 (expr_head -> field_access .)
    CONNECT         reduce using rule 81 (expr_head -> field_access .)
    DEF             reduce using rule 81 (expr_head -> field_access .)
    FOR             reduce using rule 81 (expr_head -> field_access .)
    IF              reduce using rule 81 (expr_head -> field_access .)
    WHILE           reduce using rule 81 (expr_head -> field_access .)
    IDENTIFIER      reduce using rule 81 (expr_head -> field_access .)
    BREAK           reduce using rule 81 (expr_head -> field_access .)
    CONTINUE        reduce using rule 81 (expr_head -> field_access .)
    RETURN          reduce using rule 81 (expr_head -> field_access .)
    $end            reduce using rule 81 (expr_head -> field_access .)
    INPUT           reduce using rule 81 (expr_head -> field_access .)
    OUTPUT          reduce using rule 81 (expr_head -> field_access .)
    MEMORY          reduce using rule 81 (expr_head -> field_access .)
    MODEL           reduce using rule 81 (expr_head -> field_access .)
    CHAT            reduce using rule 81 (expr_head -> field_access .)
    DEDENT          reduce using rule 81 (expr_head -> field_access .)
    COMMA           reduce using rule 81 (expr_head -> field_access .)
    RBRACE          reduce using rule 81 (expr_head -> field_access .)
    RPAREN          reduce using rule 81 (expr_head -> field_access .)


state 38

    (82) expr_head -> func_call .

    PLUS            reduce using rule 82 (expr_head -> func_call .)
    MINUS           reduce using rule 82 (expr_head -> func_call .)
    TIMES           reduce using rule 82 (expr_head -> func_call .)
    DIVIDE          reduce using rule 82 (expr_head -> func_call .)
    MOD             reduce using rule 82 (expr_head -> func_call .)
    EQ              reduce using rule 82 (expr_head -> func_call .)
    NEQ             reduce using rule 82 (expr_head -> func_call .)
    LT              reduce using rule 82 (expr_head -> func_call .)
    GT              reduce using rule 82 (expr_head -> func_call .)
    LE              reduce using rule 82 (expr_head -> func_call .)
    GE              reduce using rule 82 (expr_head -> func_call .)
    COLON           reduce using rule 82 (expr_head -> func_call .)
    AGENT           reduce using rule 82 (expr_head -> func_call .)
    CONNECT         reduce using rule 82 (expr_head -> func_call .)
    DEF             reduce using rule 82 (expr_head -> func_call .)
    FOR             reduce using rule 82 (expr_head -> func_call .)
    IF              reduce using rule 82 (expr_head -> func_call .)
    WHILE           reduce using rule 82 (expr_head -> func_call .)
    IDENTIFIER      reduce using rule 82 (expr_head -> func_call .)
    BREAK           reduce using rule 82 (expr_head -> func_call .)
    CONTINUE        reduce using rule 82 (expr_head -> func_call .)
    RETURN          reduce using rule 82 (expr_head -> func_call .)
    $end            reduce using rule 82 (expr_head -> func_call .)
    INPUT           reduce using rule 82 (expr_head -> func_call .)
    OUTPUT          reduce using rule 82 (expr_head -> func_call .)
    MEMORY          reduce using rule 82 (expr_head -> func_call .)
    MODEL           reduce using rule 82 (expr_head -> func_call .)
    CHAT            reduce using rule 82 (expr_head -> func_call .)
    DEDENT          reduce using rule 82 (expr_head -> func_call .)
    COMMA           reduce using rule 82 (expr_head -> func_call .)
    RBRACE          reduce using rule 82 (expr_head -> func_call .)
    RPAREN          reduce using rule 82 (expr_head -> func_call .)


state 39

    (84) atom -> IDENTIFIER .
    (98) field_access -> IDENTIFIER . DOT IDENTIFIER
    (99) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    PLUS            reduce using rule 84 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 84 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 84 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (atom -> IDENTIFIER .)
    MOD             reduce using rule 84 (atom -> IDENTIFIER .)
    EQ              reduce using rule 84 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 84 (atom -> IDENTIFIER .)
    LT              reduce using rule 84 (atom -> IDENTIFIER .)
    GT              reduce using rule 84 (atom -> IDENTIFIER .)
    LE              reduce using rule 84 (atom -> IDENTIFIER .)
    GE              reduce using rule 84 (atom -> IDENTIFIER .)
    COLON           reduce using rule 84 (atom -> IDENTIFIER .)
    AGENT           reduce using rule 84 (atom -> IDENTIFIER .)
    CONNECT         reduce using rule 84 (atom -> IDENTIFIER .)
    DEF             reduce using rule 84 (atom -> IDENTIFIER .)
    FOR             reduce using rule 84 (atom -> IDENTIFIER .)
    IF              reduce using rule 84 (atom -> IDENTIFIER .)
    WHILE           reduce using rule 84 (atom -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 84 (atom -> IDENTIFIER .)
    BREAK           reduce using rule 84 (atom -> IDENTIFIER .)
    CONTINUE        reduce using rule 84 (atom -> IDENTIFIER .)
    RETURN          reduce using rule 84 (atom -> IDENTIFIER .)
    $end            reduce using rule 84 (atom -> IDENTIFIER .)
    INPUT           reduce using rule 84 (atom -> IDENTIFIER .)
    OUTPUT          reduce using rule 84 (atom -> IDENTIFIER .)
    MEMORY          reduce using rule 84 (atom -> IDENTIFIER .)
    MODEL           reduce using rule 84 (atom -> IDENTIFIER .)
    CHAT            reduce using rule 84 (atom -> IDENTIFIER .)
    DEDENT          reduce using rule 84 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 84 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 84 (atom -> IDENTIFIER .)
    RPAREN          reduce using rule 84 (atom -> IDENTIFIER .)
    DOT             shift and go to state 73
    LPAREN          shift and go to state 74


state 40

    (85) atom -> STRING .

    PLUS            reduce using rule 85 (atom -> STRING .)
    MINUS           reduce using rule 85 (atom -> STRING .)
    TIMES           reduce using rule 85 (atom -> STRING .)
    DIVIDE          reduce using rule 85 (atom -> STRING .)
    MOD             reduce using rule 85 (atom -> STRING .)
    EQ              reduce using rule 85 (atom -> STRING .)
    NEQ             reduce using rule 85 (atom -> STRING .)
    LT              reduce using rule 85 (atom -> STRING .)
    GT              reduce using rule 85 (atom -> STRING .)
    LE              reduce using rule 85 (atom -> STRING .)
    GE              reduce using rule 85 (atom -> STRING .)
    COLON           reduce using rule 85 (atom -> STRING .)
    AGENT           reduce using rule 85 (atom -> STRING .)
    CONNECT         reduce using rule 85 (atom -> STRING .)
    DEF             reduce using rule 85 (atom -> STRING .)
    FOR             reduce using rule 85 (atom -> STRING .)
    IF              reduce using rule 85 (atom -> STRING .)
    WHILE           reduce using rule 85 (atom -> STRING .)
    IDENTIFIER      reduce using rule 85 (atom -> STRING .)
    BREAK           reduce using rule 85 (atom -> STRING .)
    CONTINUE        reduce using rule 85 (atom -> STRING .)
    RETURN          reduce using rule 85 (atom -> STRING .)
    $end            reduce using rule 85 (atom -> STRING .)
    INPUT           reduce using rule 85 (atom -> STRING .)
    OUTPUT          reduce using rule 85 (atom -> STRING .)
    MEMORY          reduce using rule 85 (atom -> STRING .)
    MODEL           reduce using rule 85 (atom -> STRING .)
    CHAT            reduce using rule 85 (atom -> STRING .)
    DEDENT          reduce using rule 85 (atom -> STRING .)
    COMMA           reduce using rule 85 (atom -> STRING .)
    RBRACE          reduce using rule 85 (atom -> STRING .)
    RPAREN          reduce using rule 85 (atom -> STRING .)


state 41

    (86) atom -> NUMBER .

    PLUS            reduce using rule 86 (atom -> NUMBER .)
    MINUS           reduce using rule 86 (atom -> NUMBER .)
    TIMES           reduce using rule 86 (atom -> NUMBER .)
    DIVIDE          reduce using rule 86 (atom -> NUMBER .)
    MOD             reduce using rule 86 (atom -> NUMBER .)
    EQ              reduce using rule 86 (atom -> NUMBER .)
    NEQ             reduce using rule 86 (atom -> NUMBER .)
    LT              reduce using rule 86 (atom -> NUMBER .)
    GT              reduce using rule 86 (atom -> NUMBER .)
    LE              reduce using rule 86 (atom -> NUMBER .)
    GE              reduce using rule 86 (atom -> NUMBER .)
    COLON           reduce using rule 86 (atom -> NUMBER .)
    AGENT           reduce using rule 86 (atom -> NUMBER .)
    CONNECT         reduce using rule 86 (atom -> NUMBER .)
    DEF             reduce using rule 86 (atom -> NUMBER .)
    FOR             reduce using rule 86 (atom -> NUMBER .)
    IF              reduce using rule 86 (atom -> NUMBER .)
    WHILE           reduce using rule 86 (atom -> NUMBER .)
    IDENTIFIER      reduce using rule 86 (atom -> NUMBER .)
    BREAK           reduce using rule 86 (atom -> NUMBER .)
    CONTINUE        reduce using rule 86 (atom -> NUMBER .)
    RETURN          reduce using rule 86 (atom -> NUMBER .)
    $end            reduce using rule 86 (atom -> NUMBER .)
    INPUT           reduce using rule 86 (atom -> NUMBER .)
    OUTPUT          reduce using rule 86 (atom -> NUMBER .)
    MEMORY          reduce using rule 86 (atom -> NUMBER .)
    MODEL           reduce using rule 86 (atom -> NUMBER .)
    CHAT            reduce using rule 86 (atom -> NUMBER .)
    DEDENT          reduce using rule 86 (atom -> NUMBER .)
    COMMA           reduce using rule 86 (atom -> NUMBER .)
    RBRACE          reduce using rule 86 (atom -> NUMBER .)
    RPAREN          reduce using rule 86 (atom -> NUMBER .)


state 42

    (87) list_expr -> LBRACE . list_elements RBRACE
    (92) record_expr -> LBRACE . record_elements RBRACE
    (88) list_elements -> . expr list_elements_tail
    (89) list_elements -> . expr
    (93) record_elements -> . field_assign record_elements_tail
    (94) record_elements -> . field_assign
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (97) field_assign -> . IDENTIFIER EQUALS expr
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 79
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    list_elements                  shift and go to state 75
    record_elements                shift and go to state 76
    expr                           shift and go to state 77
    field_assign                   shift and go to state 78
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 43

    (75) while_stmt -> WHILE expr . COLON stmt_block

    COLON           shift and go to state 80


state 44

    (69) return_stmt -> RETURN expr .

    AGENT           reduce using rule 69 (return_stmt -> RETURN expr .)
    CONNECT         reduce using rule 69 (return_stmt -> RETURN expr .)
    DEF             reduce using rule 69 (return_stmt -> RETURN expr .)
    FOR             reduce using rule 69 (return_stmt -> RETURN expr .)
    IF              reduce using rule 69 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 69 (return_stmt -> RETURN expr .)
    IDENTIFIER      reduce using rule 69 (return_stmt -> RETURN expr .)
    BREAK           reduce using rule 69 (return_stmt -> RETURN expr .)
    CONTINUE        reduce using rule 69 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 69 (return_stmt -> RETURN expr .)
    $end            reduce using rule 69 (return_stmt -> RETURN expr .)
    INPUT           reduce using rule 69 (return_stmt -> RETURN expr .)
    OUTPUT          reduce using rule 69 (return_stmt -> RETURN expr .)
    MEMORY          reduce using rule 69 (return_stmt -> RETURN expr .)
    MODEL           reduce using rule 69 (return_stmt -> RETURN expr .)
    CHAT            reduce using rule 69 (return_stmt -> RETURN expr .)
    DEDENT          reduce using rule 69 (return_stmt -> RETURN expr .)


state 45

    (26) agent_def -> AGENT IDENTIFIER COLON . INDENT agent_body DEDENT

    INDENT          shift and go to state 81


state 46

    (67) assign_stmt -> IDENTIFIER COLON type . EQUALS expr

    EQUALS          shift and go to state 82


state 47

    (14) type -> base_type .

    EQUALS          reduce using rule 14 (type -> base_type .)
    RBRACE          reduce using rule 14 (type -> base_type .)
    INDENT          reduce using rule 14 (type -> base_type .)
    COMMA           reduce using rule 14 (type -> base_type .)
    RPAREN          reduce using rule 14 (type -> base_type .)
    IDENTIFIER      reduce using rule 14 (type -> base_type .)
    DEDENT          reduce using rule 14 (type -> base_type .)
    COLON           reduce using rule 14 (type -> base_type .)


state 48

    (15) type -> list_type .

    EQUALS          reduce using rule 15 (type -> list_type .)
    RBRACE          reduce using rule 15 (type -> list_type .)
    INDENT          reduce using rule 15 (type -> list_type .)
    COMMA           reduce using rule 15 (type -> list_type .)
    RPAREN          reduce using rule 15 (type -> list_type .)
    IDENTIFIER      reduce using rule 15 (type -> list_type .)
    DEDENT          reduce using rule 15 (type -> list_type .)
    COLON           reduce using rule 15 (type -> list_type .)


state 49

    (16) type -> record_type .

    EQUALS          reduce using rule 16 (type -> record_type .)
    RBRACE          reduce using rule 16 (type -> record_type .)
    INDENT          reduce using rule 16 (type -> record_type .)
    COMMA           reduce using rule 16 (type -> record_type .)
    RPAREN          reduce using rule 16 (type -> record_type .)
    IDENTIFIER      reduce using rule 16 (type -> record_type .)
    DEDENT          reduce using rule 16 (type -> record_type .)
    COLON           reduce using rule 16 (type -> record_type .)


state 50

    (17) base_type -> TYPE_STR .

    EQUALS          reduce using rule 17 (base_type -> TYPE_STR .)
    RBRACE          reduce using rule 17 (base_type -> TYPE_STR .)
    INDENT          reduce using rule 17 (base_type -> TYPE_STR .)
    COMMA           reduce using rule 17 (base_type -> TYPE_STR .)
    RPAREN          reduce using rule 17 (base_type -> TYPE_STR .)
    IDENTIFIER      reduce using rule 17 (base_type -> TYPE_STR .)
    DEDENT          reduce using rule 17 (base_type -> TYPE_STR .)
    COLON           reduce using rule 17 (base_type -> TYPE_STR .)


state 51

    (18) base_type -> TYPE_INT .

    EQUALS          reduce using rule 18 (base_type -> TYPE_INT .)
    RBRACE          reduce using rule 18 (base_type -> TYPE_INT .)
    INDENT          reduce using rule 18 (base_type -> TYPE_INT .)
    COMMA           reduce using rule 18 (base_type -> TYPE_INT .)
    RPAREN          reduce using rule 18 (base_type -> TYPE_INT .)
    IDENTIFIER      reduce using rule 18 (base_type -> TYPE_INT .)
    DEDENT          reduce using rule 18 (base_type -> TYPE_INT .)
    COLON           reduce using rule 18 (base_type -> TYPE_INT .)


state 52

    (19) base_type -> TYPE_FLOAT .

    EQUALS          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    RBRACE          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    INDENT          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 19 (base_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 19 (base_type -> TYPE_FLOAT .)
    DEDENT          reduce using rule 19 (base_type -> TYPE_FLOAT .)
    COLON           reduce using rule 19 (base_type -> TYPE_FLOAT .)


state 53

    (20) base_type -> TYPE_BOOL .

    EQUALS          reduce using rule 20 (base_type -> TYPE_BOOL .)
    RBRACE          reduce using rule 20 (base_type -> TYPE_BOOL .)
    INDENT          reduce using rule 20 (base_type -> TYPE_BOOL .)
    COMMA           reduce using rule 20 (base_type -> TYPE_BOOL .)
    RPAREN          reduce using rule 20 (base_type -> TYPE_BOOL .)
    IDENTIFIER      reduce using rule 20 (base_type -> TYPE_BOOL .)
    DEDENT          reduce using rule 20 (base_type -> TYPE_BOOL .)
    COLON           reduce using rule 20 (base_type -> TYPE_BOOL .)


state 54

    (21) list_type -> TYPE_LIST . LBRACE type RBRACE

    LBRACE          shift and go to state 83


state 55

    (22) record_type -> TYPE_RECORD . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 84


state 56

    (68) assign_stmt -> IDENTIFIER EQUALS expr .

    AGENT           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CONNECT         reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    DEF             reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    FOR             reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    IF              reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    WHILE           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    IDENTIFIER      reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    BREAK           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CONTINUE        reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    RETURN          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    $end            reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    INPUT           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    OUTPUT          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    MEMORY          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    MODEL           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CHAT            reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    DEDENT          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)


state 57

    (41) connect_block -> CONNECT COLON INDENT . connection_list DEDENT
    (42) connection_list -> . connection connection_list
    (43) connection_list -> . connection
    (44) connection -> . IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT

    IDENTIFIER      shift and go to state 87

    connection_list                shift and go to state 85
    connection                     shift and go to state 86

state 58

    (50) func_def -> DEF IDENTIFIER LPAREN . param_list RPAREN COLON type COLON stmt_block
    (51) func_def -> DEF IDENTIFIER LPAREN . param_list RPAREN COLON stmt_block
    (52) param_list -> . param_decl param_list_tail
    (53) param_list -> . empty
    (56) param_decl -> . var_decl
    (115) empty -> .
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    RPAREN          reduce using rule 115 (empty -> .)
    IDENTIFIER      shift and go to state 88

    param_list                     shift and go to state 89
    param_decl                     shift and go to state 90
    empty                          shift and go to state 91
    var_decl                       shift and go to state 92

state 59

    (70) for_stmt -> FOR IDENTIFIER IN . expr COLON stmt_block
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 93
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 60

    (73) if_stmt -> IF expr COLON . stmt_block ELSE COLON stmt_block
    (74) if_stmt -> IF expr COLON . stmt_block
    (57) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 94

state 61

    (76) expr -> expr_head bin_op . expr_tail
    (83) expr_tail -> . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr_head                      shift and go to state 33
    expr_tail                      shift and go to state 96
    expr                           shift and go to state 97
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 62

    (104) bin_op -> PLUS .

    IDENTIFIER      reduce using rule 104 (bin_op -> PLUS .)
    STRING          reduce using rule 104 (bin_op -> PLUS .)
    NUMBER          reduce using rule 104 (bin_op -> PLUS .)
    LBRACE          reduce using rule 104 (bin_op -> PLUS .)


state 63

    (105) bin_op -> MINUS .

    IDENTIFIER      reduce using rule 105 (bin_op -> MINUS .)
    STRING          reduce using rule 105 (bin_op -> MINUS .)
    NUMBER          reduce using rule 105 (bin_op -> MINUS .)
    LBRACE          reduce using rule 105 (bin_op -> MINUS .)


state 64

    (106) bin_op -> TIMES .

    IDENTIFIER      reduce using rule 106 (bin_op -> TIMES .)
    STRING          reduce using rule 106 (bin_op -> TIMES .)
    NUMBER          reduce using rule 106 (bin_op -> TIMES .)
    LBRACE          reduce using rule 106 (bin_op -> TIMES .)


state 65

    (107) bin_op -> DIVIDE .

    IDENTIFIER      reduce using rule 107 (bin_op -> DIVIDE .)
    STRING          reduce using rule 107 (bin_op -> DIVIDE .)
    NUMBER          reduce using rule 107 (bin_op -> DIVIDE .)
    LBRACE          reduce using rule 107 (bin_op -> DIVIDE .)


state 66

    (108) bin_op -> MOD .

    IDENTIFIER      reduce using rule 108 (bin_op -> MOD .)
    STRING          reduce using rule 108 (bin_op -> MOD .)
    NUMBER          reduce using rule 108 (bin_op -> MOD .)
    LBRACE          reduce using rule 108 (bin_op -> MOD .)


state 67

    (109) bin_op -> EQ .

    IDENTIFIER      reduce using rule 109 (bin_op -> EQ .)
    STRING          reduce using rule 109 (bin_op -> EQ .)
    NUMBER          reduce using rule 109 (bin_op -> EQ .)
    LBRACE          reduce using rule 109 (bin_op -> EQ .)


state 68

    (110) bin_op -> NEQ .

    IDENTIFIER      reduce using rule 110 (bin_op -> NEQ .)
    STRING          reduce using rule 110 (bin_op -> NEQ .)
    NUMBER          reduce using rule 110 (bin_op -> NEQ .)
    LBRACE          reduce using rule 110 (bin_op -> NEQ .)


state 69

    (111) bin_op -> LT .

    IDENTIFIER      reduce using rule 111 (bin_op -> LT .)
    STRING          reduce using rule 111 (bin_op -> LT .)
    NUMBER          reduce using rule 111 (bin_op -> LT .)
    LBRACE          reduce using rule 111 (bin_op -> LT .)


state 70

    (112) bin_op -> GT .

    IDENTIFIER      reduce using rule 112 (bin_op -> GT .)
    STRING          reduce using rule 112 (bin_op -> GT .)
    NUMBER          reduce using rule 112 (bin_op -> GT .)
    LBRACE          reduce using rule 112 (bin_op -> GT .)


state 71

    (113) bin_op -> LE .

    IDENTIFIER      reduce using rule 113 (bin_op -> LE .)
    STRING          reduce using rule 113 (bin_op -> LE .)
    NUMBER          reduce using rule 113 (bin_op -> LE .)
    LBRACE          reduce using rule 113 (bin_op -> LE .)


state 72

    (114) bin_op -> GE .

    IDENTIFIER      reduce using rule 114 (bin_op -> GE .)
    STRING          reduce using rule 114 (bin_op -> GE .)
    NUMBER          reduce using rule 114 (bin_op -> GE .)
    LBRACE          reduce using rule 114 (bin_op -> GE .)


state 73

    (98) field_access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 98


state 74

    (99) func_call -> IDENTIFIER LPAREN . arg_list RPAREN
    (100) arg_list -> . expr arg_list_tail
    (101) arg_list -> . empty
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (115) empty -> .
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    RPAREN          reduce using rule 115 (empty -> .)
    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    arg_list                       shift and go to state 99
    expr                           shift and go to state 100
    empty                          shift and go to state 101
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 75

    (87) list_expr -> LBRACE list_elements . RBRACE

    RBRACE          shift and go to state 102


state 76

    (92) record_expr -> LBRACE record_elements . RBRACE

    RBRACE          shift and go to state 103


state 77

    (88) list_elements -> expr . list_elements_tail
    (89) list_elements -> expr .
    (90) list_elements_tail -> . COMMA expr list_elements_tail
    (91) list_elements_tail -> . COMMA expr

    RBRACE          reduce using rule 89 (list_elements -> expr .)
    COMMA           shift and go to state 105

    list_elements_tail             shift and go to state 104

state 78

    (93) record_elements -> field_assign . record_elements_tail
    (94) record_elements -> field_assign .
    (95) record_elements_tail -> . COMMA field_assign record_elements_tail
    (96) record_elements_tail -> . COMMA field_assign

    RBRACE          reduce using rule 94 (record_elements -> field_assign .)
    COMMA           shift and go to state 107

    record_elements_tail           shift and go to state 106

state 79

    (97) field_assign -> IDENTIFIER . EQUALS expr
    (84) atom -> IDENTIFIER .
    (98) field_access -> IDENTIFIER . DOT IDENTIFIER
    (99) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    EQUALS          shift and go to state 108
    PLUS            reduce using rule 84 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 84 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 84 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 84 (atom -> IDENTIFIER .)
    MOD             reduce using rule 84 (atom -> IDENTIFIER .)
    EQ              reduce using rule 84 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 84 (atom -> IDENTIFIER .)
    LT              reduce using rule 84 (atom -> IDENTIFIER .)
    GT              reduce using rule 84 (atom -> IDENTIFIER .)
    LE              reduce using rule 84 (atom -> IDENTIFIER .)
    GE              reduce using rule 84 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 84 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 84 (atom -> IDENTIFIER .)
    DOT             shift and go to state 73
    LPAREN          shift and go to state 74


state 80

    (75) while_stmt -> WHILE expr COLON . stmt_block
    (57) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 109

state 81

    (26) agent_def -> AGENT IDENTIFIER COLON INDENT . agent_body DEDENT
    (27) agent_body -> . agent_body_item agent_body
    (28) agent_body -> . agent_body_item
    (29) agent_body_item -> . input_block
    (30) agent_body_item -> . output_block
    (31) agent_body_item -> . memory_block
    (32) agent_body_item -> . model_block
    (33) agent_body_item -> . statement
    (34) agent_body_item -> . chat_block
    (35) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (36) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (37) memory_block -> . MEMORY COLON INDENT var_decl_list DEDENT
    (38) model_block -> . MODEL COLON STRING
    (60) statement -> . for_stmt
    (61) statement -> . if_stmt
    (62) statement -> . while_stmt
    (63) statement -> . assign_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (39) chat_block -> . CHAT IDENTIFIER COLON TRIPLE_STRING
    (40) chat_block -> . CHAT COLON TRIPLE_STRING
    (70) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (73) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> . IF expr COLON stmt_block
    (75) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (71) break_stmt -> . BREAK
    (72) continue_stmt -> . CONTINUE
    (69) return_stmt -> . RETURN expr

    INPUT           shift and go to state 118
    OUTPUT          shift and go to state 119
    MEMORY          shift and go to state 120
    MODEL           shift and go to state 121
    CHAT            shift and go to state 122
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    agent_body                     shift and go to state 110
    agent_body_item                shift and go to state 111
    input_block                    shift and go to state 112
    output_block                   shift and go to state 113
    memory_block                   shift and go to state 114
    model_block                    shift and go to state 115
    statement                      shift and go to state 116
    chat_block                     shift and go to state 117
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 82

    (67) assign_stmt -> IDENTIFIER COLON type EQUALS . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 123
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 83

    (21) list_type -> TYPE_LIST LBRACE . type RBRACE
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 124
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 84

    (22) record_type -> TYPE_RECORD LBRACE . field_decl_list RBRACE
    (23) field_decl_list -> . field_decl field_decl_list
    (24) field_decl_list -> . field_decl
    (25) field_decl -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 127

    field_decl_list                shift and go to state 125
    field_decl                     shift and go to state 126

state 85

    (41) connect_block -> CONNECT COLON INDENT connection_list . DEDENT

    DEDENT          shift and go to state 128


state 86

    (42) connection_list -> connection . connection_list
    (43) connection_list -> connection .
    (42) connection_list -> . connection connection_list
    (43) connection_list -> . connection
    (44) connection -> . IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT

    DEDENT          reduce using rule 43 (connection_list -> connection .)
    IDENTIFIER      shift and go to state 87

    connection                     shift and go to state 86
    connection_list                shift and go to state 129

state 87

    (44) connection -> IDENTIFIER . COLON type INDENT agent_ref ARROW agent_ref DEDENT

    COLON           shift and go to state 130


state 88

    (10) var_decl -> IDENTIFIER . COLON type EQUALS expr
    (11) var_decl -> IDENTIFIER . COLON type
    (12) var_decl -> IDENTIFIER . EQUALS expr
    (13) var_decl -> IDENTIFIER .

    COLON           shift and go to state 131
    EQUALS          shift and go to state 132
    COMMA           reduce using rule 13 (var_decl -> IDENTIFIER .)
    RPAREN          reduce using rule 13 (var_decl -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 13 (var_decl -> IDENTIFIER .)
    DEDENT          reduce using rule 13 (var_decl -> IDENTIFIER .)


state 89

    (50) func_def -> DEF IDENTIFIER LPAREN param_list . RPAREN COLON type COLON stmt_block
    (51) func_def -> DEF IDENTIFIER LPAREN param_list . RPAREN COLON stmt_block

    RPAREN          shift and go to state 133


state 90

    (52) param_list -> param_decl . param_list_tail
    (54) param_list_tail -> . COMMA param_decl param_list_tail
    (55) param_list_tail -> . empty
    (115) empty -> .

    COMMA           shift and go to state 135
    RPAREN          reduce using rule 115 (empty -> .)

    param_list_tail                shift and go to state 134
    empty                          shift and go to state 136

state 91

    (53) param_list -> empty .

    RPAREN          reduce using rule 53 (param_list -> empty .)


state 92

    (56) param_decl -> var_decl .

    COMMA           reduce using rule 56 (param_decl -> var_decl .)
    RPAREN          reduce using rule 56 (param_decl -> var_decl .)


state 93

    (70) for_stmt -> FOR IDENTIFIER IN expr . COLON stmt_block

    COLON           shift and go to state 137


state 94

    (73) if_stmt -> IF expr COLON stmt_block . ELSE COLON stmt_block
    (74) if_stmt -> IF expr COLON stmt_block .

    ELSE            shift and go to state 138
    AGENT           reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    CONNECT         reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    DEF             reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    FOR             reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    IF              reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    WHILE           reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    BREAK           reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    CONTINUE        reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    RETURN          reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    $end            reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    INPUT           reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    OUTPUT          reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    MEMORY          reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    MODEL           reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    CHAT            reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)
    DEDENT          reduce using rule 74 (if_stmt -> IF expr COLON stmt_block .)


state 95

    (57) stmt_block -> INDENT . statement_list DEDENT
    (58) statement_list -> . statement statement_list
    (59) statement_list -> . statement
    (60) statement -> . for_stmt
    (61) statement -> . if_stmt
    (62) statement -> . while_stmt
    (63) statement -> . assign_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (70) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (73) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> . IF expr COLON stmt_block
    (75) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (71) break_stmt -> . BREAK
    (72) continue_stmt -> . CONTINUE
    (69) return_stmt -> . RETURN expr

    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    statement_list                 shift and go to state 139
    statement                      shift and go to state 140
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 96

    (76) expr -> expr_head bin_op expr_tail .

    COLON           reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    AGENT           reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    CONNECT         reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    DEF             reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    FOR             reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    IF              reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    WHILE           reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    IDENTIFIER      reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    BREAK           reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    CONTINUE        reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    RETURN          reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    $end            reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    INPUT           reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    OUTPUT          reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    MEMORY          reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    MODEL           reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    CHAT            reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    DEDENT          reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    COMMA           reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    RBRACE          reduce using rule 76 (expr -> expr_head bin_op expr_tail .)
    RPAREN          reduce using rule 76 (expr -> expr_head bin_op expr_tail .)


state 97

    (83) expr_tail -> expr .

    COLON           reduce using rule 83 (expr_tail -> expr .)
    AGENT           reduce using rule 83 (expr_tail -> expr .)
    CONNECT         reduce using rule 83 (expr_tail -> expr .)
    DEF             reduce using rule 83 (expr_tail -> expr .)
    FOR             reduce using rule 83 (expr_tail -> expr .)
    IF              reduce using rule 83 (expr_tail -> expr .)
    WHILE           reduce using rule 83 (expr_tail -> expr .)
    IDENTIFIER      reduce using rule 83 (expr_tail -> expr .)
    BREAK           reduce using rule 83 (expr_tail -> expr .)
    CONTINUE        reduce using rule 83 (expr_tail -> expr .)
    RETURN          reduce using rule 83 (expr_tail -> expr .)
    $end            reduce using rule 83 (expr_tail -> expr .)
    INPUT           reduce using rule 83 (expr_tail -> expr .)
    OUTPUT          reduce using rule 83 (expr_tail -> expr .)
    MEMORY          reduce using rule 83 (expr_tail -> expr .)
    MODEL           reduce using rule 83 (expr_tail -> expr .)
    CHAT            reduce using rule 83 (expr_tail -> expr .)
    DEDENT          reduce using rule 83 (expr_tail -> expr .)
    COMMA           reduce using rule 83 (expr_tail -> expr .)
    RBRACE          reduce using rule 83 (expr_tail -> expr .)
    RPAREN          reduce using rule 83 (expr_tail -> expr .)


state 98

    (98) field_access -> IDENTIFIER DOT IDENTIFIER .

    PLUS            reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    NEQ             reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    AGENT           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CONNECT         reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DEF             reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    FOR             reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    IF              reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    WHILE           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    BREAK           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CONTINUE        reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RETURN          reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    $end            reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    INPUT           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    OUTPUT          reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MEMORY          reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MODEL           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CHAT            reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DEDENT          reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RBRACE          reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RPAREN          reduce using rule 98 (field_access -> IDENTIFIER DOT IDENTIFIER .)


state 99

    (99) func_call -> IDENTIFIER LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 141


state 100

    (100) arg_list -> expr . arg_list_tail
    (102) arg_list_tail -> . COMMA expr arg_list_tail
    (103) arg_list_tail -> . empty
    (115) empty -> .

    COMMA           shift and go to state 143
    RPAREN          reduce using rule 115 (empty -> .)

    arg_list_tail                  shift and go to state 142
    empty                          shift and go to state 144

state 101

    (101) arg_list -> empty .

    RPAREN          reduce using rule 101 (arg_list -> empty .)


state 102

    (87) list_expr -> LBRACE list_elements RBRACE .

    PLUS            reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    MINUS           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    TIMES           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    DIVIDE          reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    MOD             reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    EQ              reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    NEQ             reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    LT              reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    GT              reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    LE              reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    GE              reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    COLON           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    AGENT           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    CONNECT         reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    DEF             reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    FOR             reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    IF              reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    WHILE           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    IDENTIFIER      reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    BREAK           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    CONTINUE        reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    RETURN          reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    $end            reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    INPUT           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    OUTPUT          reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    MEMORY          reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    MODEL           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    CHAT            reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    DEDENT          reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    COMMA           reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    RBRACE          reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)
    RPAREN          reduce using rule 87 (list_expr -> LBRACE list_elements RBRACE .)


state 103

    (92) record_expr -> LBRACE record_elements RBRACE .

    PLUS            reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    MINUS           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    TIMES           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    DIVIDE          reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    MOD             reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    EQ              reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    NEQ             reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    LT              reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    GT              reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    LE              reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    GE              reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    COLON           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    AGENT           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    CONNECT         reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    DEF             reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    FOR             reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    IF              reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    WHILE           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    IDENTIFIER      reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    BREAK           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    CONTINUE        reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    RETURN          reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    $end            reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    INPUT           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    OUTPUT          reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    MEMORY          reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    MODEL           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    CHAT            reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    DEDENT          reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    COMMA           reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACE          reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)
    RPAREN          reduce using rule 92 (record_expr -> LBRACE record_elements RBRACE .)


state 104

    (88) list_elements -> expr list_elements_tail .

    RBRACE          reduce using rule 88 (list_elements -> expr list_elements_tail .)


state 105

    (90) list_elements_tail -> COMMA . expr list_elements_tail
    (91) list_elements_tail -> COMMA . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 145
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 106

    (93) record_elements -> field_assign record_elements_tail .

    RBRACE          reduce using rule 93 (record_elements -> field_assign record_elements_tail .)


state 107

    (95) record_elements_tail -> COMMA . field_assign record_elements_tail
    (96) record_elements_tail -> COMMA . field_assign
    (97) field_assign -> . IDENTIFIER EQUALS expr

    IDENTIFIER      shift and go to state 147

    field_assign                   shift and go to state 146

state 108

    (97) field_assign -> IDENTIFIER EQUALS . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 148
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 109

    (75) while_stmt -> WHILE expr COLON stmt_block .

    AGENT           reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    CONNECT         reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    DEF             reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    FOR             reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    IF              reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    WHILE           reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    BREAK           reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    CONTINUE        reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    RETURN          reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    $end            reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    INPUT           reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    OUTPUT          reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    MEMORY          reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    MODEL           reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    CHAT            reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)
    DEDENT          reduce using rule 75 (while_stmt -> WHILE expr COLON stmt_block .)


state 110

    (26) agent_def -> AGENT IDENTIFIER COLON INDENT agent_body . DEDENT

    DEDENT          shift and go to state 149


state 111

    (27) agent_body -> agent_body_item . agent_body
    (28) agent_body -> agent_body_item .
    (27) agent_body -> . agent_body_item agent_body
    (28) agent_body -> . agent_body_item
    (29) agent_body_item -> . input_block
    (30) agent_body_item -> . output_block
    (31) agent_body_item -> . memory_block
    (32) agent_body_item -> . model_block
    (33) agent_body_item -> . statement
    (34) agent_body_item -> . chat_block
    (35) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (36) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (37) memory_block -> . MEMORY COLON INDENT var_decl_list DEDENT
    (38) model_block -> . MODEL COLON STRING
    (60) statement -> . for_stmt
    (61) statement -> . if_stmt
    (62) statement -> . while_stmt
    (63) statement -> . assign_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (39) chat_block -> . CHAT IDENTIFIER COLON TRIPLE_STRING
    (40) chat_block -> . CHAT COLON TRIPLE_STRING
    (70) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (73) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> . IF expr COLON stmt_block
    (75) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (71) break_stmt -> . BREAK
    (72) continue_stmt -> . CONTINUE
    (69) return_stmt -> . RETURN expr

    DEDENT          reduce using rule 28 (agent_body -> agent_body_item .)
    INPUT           shift and go to state 118
    OUTPUT          shift and go to state 119
    MEMORY          shift and go to state 120
    MODEL           shift and go to state 121
    CHAT            shift and go to state 122
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    agent_body_item                shift and go to state 111
    agent_body                     shift and go to state 150
    input_block                    shift and go to state 112
    output_block                   shift and go to state 113
    memory_block                   shift and go to state 114
    model_block                    shift and go to state 115
    statement                      shift and go to state 116
    chat_block                     shift and go to state 117
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 112

    (29) agent_body_item -> input_block .

    INPUT           reduce using rule 29 (agent_body_item -> input_block .)
    OUTPUT          reduce using rule 29 (agent_body_item -> input_block .)
    MEMORY          reduce using rule 29 (agent_body_item -> input_block .)
    MODEL           reduce using rule 29 (agent_body_item -> input_block .)
    CHAT            reduce using rule 29 (agent_body_item -> input_block .)
    FOR             reduce using rule 29 (agent_body_item -> input_block .)
    IF              reduce using rule 29 (agent_body_item -> input_block .)
    WHILE           reduce using rule 29 (agent_body_item -> input_block .)
    IDENTIFIER      reduce using rule 29 (agent_body_item -> input_block .)
    BREAK           reduce using rule 29 (agent_body_item -> input_block .)
    CONTINUE        reduce using rule 29 (agent_body_item -> input_block .)
    RETURN          reduce using rule 29 (agent_body_item -> input_block .)
    DEDENT          reduce using rule 29 (agent_body_item -> input_block .)


state 113

    (30) agent_body_item -> output_block .

    INPUT           reduce using rule 30 (agent_body_item -> output_block .)
    OUTPUT          reduce using rule 30 (agent_body_item -> output_block .)
    MEMORY          reduce using rule 30 (agent_body_item -> output_block .)
    MODEL           reduce using rule 30 (agent_body_item -> output_block .)
    CHAT            reduce using rule 30 (agent_body_item -> output_block .)
    FOR             reduce using rule 30 (agent_body_item -> output_block .)
    IF              reduce using rule 30 (agent_body_item -> output_block .)
    WHILE           reduce using rule 30 (agent_body_item -> output_block .)
    IDENTIFIER      reduce using rule 30 (agent_body_item -> output_block .)
    BREAK           reduce using rule 30 (agent_body_item -> output_block .)
    CONTINUE        reduce using rule 30 (agent_body_item -> output_block .)
    RETURN          reduce using rule 30 (agent_body_item -> output_block .)
    DEDENT          reduce using rule 30 (agent_body_item -> output_block .)


state 114

    (31) agent_body_item -> memory_block .

    INPUT           reduce using rule 31 (agent_body_item -> memory_block .)
    OUTPUT          reduce using rule 31 (agent_body_item -> memory_block .)
    MEMORY          reduce using rule 31 (agent_body_item -> memory_block .)
    MODEL           reduce using rule 31 (agent_body_item -> memory_block .)
    CHAT            reduce using rule 31 (agent_body_item -> memory_block .)
    FOR             reduce using rule 31 (agent_body_item -> memory_block .)
    IF              reduce using rule 31 (agent_body_item -> memory_block .)
    WHILE           reduce using rule 31 (agent_body_item -> memory_block .)
    IDENTIFIER      reduce using rule 31 (agent_body_item -> memory_block .)
    BREAK           reduce using rule 31 (agent_body_item -> memory_block .)
    CONTINUE        reduce using rule 31 (agent_body_item -> memory_block .)
    RETURN          reduce using rule 31 (agent_body_item -> memory_block .)
    DEDENT          reduce using rule 31 (agent_body_item -> memory_block .)


state 115

    (32) agent_body_item -> model_block .

    INPUT           reduce using rule 32 (agent_body_item -> model_block .)
    OUTPUT          reduce using rule 32 (agent_body_item -> model_block .)
    MEMORY          reduce using rule 32 (agent_body_item -> model_block .)
    MODEL           reduce using rule 32 (agent_body_item -> model_block .)
    CHAT            reduce using rule 32 (agent_body_item -> model_block .)
    FOR             reduce using rule 32 (agent_body_item -> model_block .)
    IF              reduce using rule 32 (agent_body_item -> model_block .)
    WHILE           reduce using rule 32 (agent_body_item -> model_block .)
    IDENTIFIER      reduce using rule 32 (agent_body_item -> model_block .)
    BREAK           reduce using rule 32 (agent_body_item -> model_block .)
    CONTINUE        reduce using rule 32 (agent_body_item -> model_block .)
    RETURN          reduce using rule 32 (agent_body_item -> model_block .)
    DEDENT          reduce using rule 32 (agent_body_item -> model_block .)


state 116

    (33) agent_body_item -> statement .

    INPUT           reduce using rule 33 (agent_body_item -> statement .)
    OUTPUT          reduce using rule 33 (agent_body_item -> statement .)
    MEMORY          reduce using rule 33 (agent_body_item -> statement .)
    MODEL           reduce using rule 33 (agent_body_item -> statement .)
    CHAT            reduce using rule 33 (agent_body_item -> statement .)
    FOR             reduce using rule 33 (agent_body_item -> statement .)
    IF              reduce using rule 33 (agent_body_item -> statement .)
    WHILE           reduce using rule 33 (agent_body_item -> statement .)
    IDENTIFIER      reduce using rule 33 (agent_body_item -> statement .)
    BREAK           reduce using rule 33 (agent_body_item -> statement .)
    CONTINUE        reduce using rule 33 (agent_body_item -> statement .)
    RETURN          reduce using rule 33 (agent_body_item -> statement .)
    DEDENT          reduce using rule 33 (agent_body_item -> statement .)


state 117

    (34) agent_body_item -> chat_block .

    INPUT           reduce using rule 34 (agent_body_item -> chat_block .)
    OUTPUT          reduce using rule 34 (agent_body_item -> chat_block .)
    MEMORY          reduce using rule 34 (agent_body_item -> chat_block .)
    MODEL           reduce using rule 34 (agent_body_item -> chat_block .)
    CHAT            reduce using rule 34 (agent_body_item -> chat_block .)
    FOR             reduce using rule 34 (agent_body_item -> chat_block .)
    IF              reduce using rule 34 (agent_body_item -> chat_block .)
    WHILE           reduce using rule 34 (agent_body_item -> chat_block .)
    IDENTIFIER      reduce using rule 34 (agent_body_item -> chat_block .)
    BREAK           reduce using rule 34 (agent_body_item -> chat_block .)
    CONTINUE        reduce using rule 34 (agent_body_item -> chat_block .)
    RETURN          reduce using rule 34 (agent_body_item -> chat_block .)
    DEDENT          reduce using rule 34 (agent_body_item -> chat_block .)


state 118

    (35) input_block -> INPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 151


state 119

    (36) output_block -> OUTPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 152


state 120

    (37) memory_block -> MEMORY . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 153


state 121

    (38) model_block -> MODEL . COLON STRING

    COLON           shift and go to state 154


state 122

    (39) chat_block -> CHAT . IDENTIFIER COLON TRIPLE_STRING
    (40) chat_block -> CHAT . COLON TRIPLE_STRING

    IDENTIFIER      shift and go to state 155
    COLON           shift and go to state 156


state 123

    (67) assign_stmt -> IDENTIFIER COLON type EQUALS expr .

    AGENT           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CONNECT         reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    DEF             reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    FOR             reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    IF              reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    WHILE           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    BREAK           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CONTINUE        reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    RETURN          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    $end            reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    INPUT           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    OUTPUT          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    MEMORY          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    MODEL           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CHAT            reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    DEDENT          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)


state 124

    (21) list_type -> TYPE_LIST LBRACE type . RBRACE

    RBRACE          shift and go to state 157


state 125

    (22) record_type -> TYPE_RECORD LBRACE field_decl_list . RBRACE

    RBRACE          shift and go to state 158


state 126

    (23) field_decl_list -> field_decl . field_decl_list
    (24) field_decl_list -> field_decl .
    (23) field_decl_list -> . field_decl field_decl_list
    (24) field_decl_list -> . field_decl
    (25) field_decl -> . IDENTIFIER COLON type

    RBRACE          reduce using rule 24 (field_decl_list -> field_decl .)
    IDENTIFIER      shift and go to state 127

    field_decl                     shift and go to state 126
    field_decl_list                shift and go to state 159

state 127

    (25) field_decl -> IDENTIFIER . COLON type

    COLON           shift and go to state 160


state 128

    (41) connect_block -> CONNECT COLON INDENT connection_list DEDENT .

    AGENT           reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONNECT         reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    DEF             reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FOR             reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IF              reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    WHILE           reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IDENTIFIER      reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    BREAK           reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONTINUE        reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    RETURN          reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    $end            reduce using rule 41 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)


state 129

    (42) connection_list -> connection connection_list .

    DEDENT          reduce using rule 42 (connection_list -> connection connection_list .)


state 130

    (44) connection -> IDENTIFIER COLON . type INDENT agent_ref ARROW agent_ref DEDENT
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 161
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 131

    (10) var_decl -> IDENTIFIER COLON . type EQUALS expr
    (11) var_decl -> IDENTIFIER COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 162
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 132

    (12) var_decl -> IDENTIFIER EQUALS . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 163
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 133

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN . COLON type COLON stmt_block
    (51) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN . COLON stmt_block

    COLON           shift and go to state 164


state 134

    (52) param_list -> param_decl param_list_tail .

    RPAREN          reduce using rule 52 (param_list -> param_decl param_list_tail .)


state 135

    (54) param_list_tail -> COMMA . param_decl param_list_tail
    (56) param_decl -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 88

    param_decl                     shift and go to state 165
    var_decl                       shift and go to state 92

state 136

    (55) param_list_tail -> empty .

    RPAREN          reduce using rule 55 (param_list_tail -> empty .)


state 137

    (70) for_stmt -> FOR IDENTIFIER IN expr COLON . stmt_block
    (57) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 166

state 138

    (73) if_stmt -> IF expr COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 167


state 139

    (57) stmt_block -> INDENT statement_list . DEDENT

    DEDENT          shift and go to state 168


state 140

    (58) statement_list -> statement . statement_list
    (59) statement_list -> statement .
    (58) statement_list -> . statement statement_list
    (59) statement_list -> . statement
    (60) statement -> . for_stmt
    (61) statement -> . if_stmt
    (62) statement -> . while_stmt
    (63) statement -> . assign_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (70) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (73) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (74) if_stmt -> . IF expr COLON stmt_block
    (75) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (71) break_stmt -> . BREAK
    (72) continue_stmt -> . CONTINUE
    (69) return_stmt -> . RETURN expr

    DEDENT          reduce using rule 59 (statement_list -> statement .)
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    IDENTIFIER      shift and go to state 16
    BREAK           shift and go to state 22
    CONTINUE        shift and go to state 23
    RETURN          shift and go to state 24

    statement                      shift and go to state 140
    statement_list                 shift and go to state 169
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14

state 141

    (99) func_call -> IDENTIFIER LPAREN arg_list RPAREN .

    PLUS            reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LE              reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GE              reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COLON           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    AGENT           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CONNECT         reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DEF             reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    FOR             reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IF              reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    $end            reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    INPUT           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    OUTPUT          reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MEMORY          reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MODEL           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CHAT            reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DEDENT          reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 99 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)


state 142

    (100) arg_list -> expr arg_list_tail .

    RPAREN          reduce using rule 100 (arg_list -> expr arg_list_tail .)


state 143

    (102) arg_list_tail -> COMMA . expr arg_list_tail
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 170
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 144

    (103) arg_list_tail -> empty .

    RPAREN          reduce using rule 103 (arg_list_tail -> empty .)


state 145

    (90) list_elements_tail -> COMMA expr . list_elements_tail
    (91) list_elements_tail -> COMMA expr .
    (90) list_elements_tail -> . COMMA expr list_elements_tail
    (91) list_elements_tail -> . COMMA expr

    RBRACE          reduce using rule 91 (list_elements_tail -> COMMA expr .)
    COMMA           shift and go to state 105

    list_elements_tail             shift and go to state 171

state 146

    (95) record_elements_tail -> COMMA field_assign . record_elements_tail
    (96) record_elements_tail -> COMMA field_assign .
    (95) record_elements_tail -> . COMMA field_assign record_elements_tail
    (96) record_elements_tail -> . COMMA field_assign

    RBRACE          reduce using rule 96 (record_elements_tail -> COMMA field_assign .)
    COMMA           shift and go to state 107

    record_elements_tail           shift and go to state 172

state 147

    (97) field_assign -> IDENTIFIER . EQUALS expr

    EQUALS          shift and go to state 108


state 148

    (97) field_assign -> IDENTIFIER EQUALS expr .

    COMMA           reduce using rule 97 (field_assign -> IDENTIFIER EQUALS expr .)
    RBRACE          reduce using rule 97 (field_assign -> IDENTIFIER EQUALS expr .)


state 149

    (26) agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .

    AGENT           reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    CONNECT         reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    DEF             reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    FOR             reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    IF              reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    WHILE           reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    IDENTIFIER      reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    BREAK           reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    CONTINUE        reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    RETURN          reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    $end            reduce using rule 26 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)


state 150

    (27) agent_body -> agent_body_item agent_body .

    DEDENT          reduce using rule 27 (agent_body -> agent_body_item agent_body .)


state 151

    (35) input_block -> INPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 173


state 152

    (36) output_block -> OUTPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 174


state 153

    (37) memory_block -> MEMORY COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 175


state 154

    (38) model_block -> MODEL COLON . STRING

    STRING          shift and go to state 176


state 155

    (39) chat_block -> CHAT IDENTIFIER . COLON TRIPLE_STRING

    COLON           shift and go to state 177


state 156

    (40) chat_block -> CHAT COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 178


state 157

    (21) list_type -> TYPE_LIST LBRACE type RBRACE .

    EQUALS          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    RBRACE          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    INDENT          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    COMMA           reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    RPAREN          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    IDENTIFIER      reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    DEDENT          reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    COLON           reduce using rule 21 (list_type -> TYPE_LIST LBRACE type RBRACE .)


state 158

    (22) record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .

    EQUALS          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACE          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    INDENT          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COMMA           reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RPAREN          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IDENTIFIER      reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    DEDENT          reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COLON           reduce using rule 22 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)


state 159

    (23) field_decl_list -> field_decl field_decl_list .

    RBRACE          reduce using rule 23 (field_decl_list -> field_decl field_decl_list .)


state 160

    (25) field_decl -> IDENTIFIER COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 179
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 161

    (44) connection -> IDENTIFIER COLON type . INDENT agent_ref ARROW agent_ref DEDENT

    INDENT          shift and go to state 180


state 162

    (10) var_decl -> IDENTIFIER COLON type . EQUALS expr
    (11) var_decl -> IDENTIFIER COLON type .

    EQUALS          shift and go to state 181
    COMMA           reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)
    RPAREN          reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)
    IDENTIFIER      reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)
    DEDENT          reduce using rule 11 (var_decl -> IDENTIFIER COLON type .)


state 163

    (12) var_decl -> IDENTIFIER EQUALS expr .

    COMMA           reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)
    RPAREN          reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)
    IDENTIFIER      reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)
    DEDENT          reduce using rule 12 (var_decl -> IDENTIFIER EQUALS expr .)


state 164

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON . type COLON stmt_block
    (51) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON . stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (57) stmt_block -> . INDENT statement_list DEDENT
    (17) base_type -> . TYPE_STR
    (18) base_type -> . TYPE_INT
    (19) base_type -> . TYPE_FLOAT
    (20) base_type -> . TYPE_BOOL
    (21) list_type -> . TYPE_LIST LBRACE type RBRACE
    (22) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    INDENT          shift and go to state 95
    TYPE_STR        shift and go to state 50
    TYPE_INT        shift and go to state 51
    TYPE_FLOAT      shift and go to state 52
    TYPE_BOOL       shift and go to state 53
    TYPE_LIST       shift and go to state 54
    TYPE_RECORD     shift and go to state 55

    type                           shift and go to state 182
    stmt_block                     shift and go to state 183
    base_type                      shift and go to state 47
    list_type                      shift and go to state 48
    record_type                    shift and go to state 49

state 165

    (54) param_list_tail -> COMMA param_decl . param_list_tail
    (54) param_list_tail -> . COMMA param_decl param_list_tail
    (55) param_list_tail -> . empty
    (115) empty -> .

    COMMA           shift and go to state 135
    RPAREN          reduce using rule 115 (empty -> .)

    param_list_tail                shift and go to state 184
    empty                          shift and go to state 136

state 166

    (70) for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .

    AGENT           reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CONNECT         reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    DEF             reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    FOR             reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    IF              reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    WHILE           reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    BREAK           reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CONTINUE        reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    RETURN          reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    $end            reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    INPUT           reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    OUTPUT          reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    MEMORY          reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    MODEL           reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CHAT            reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    DEDENT          reduce using rule 70 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)


state 167

    (73) if_stmt -> IF expr COLON stmt_block ELSE COLON . stmt_block
    (57) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 185

state 168

    (57) stmt_block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    AGENT           reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    CONNECT         reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    DEF             reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    IDENTIFIER      reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    BREAK           reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    CONTINUE        reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    INPUT           reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    OUTPUT          reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    MEMORY          reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    MODEL           reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    CHAT            reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 57 (stmt_block -> INDENT statement_list DEDENT .)


state 169

    (58) statement_list -> statement statement_list .

    DEDENT          reduce using rule 58 (statement_list -> statement statement_list .)


state 170

    (102) arg_list_tail -> COMMA expr . arg_list_tail
    (102) arg_list_tail -> . COMMA expr arg_list_tail
    (103) arg_list_tail -> . empty
    (115) empty -> .

    COMMA           shift and go to state 143
    RPAREN          reduce using rule 115 (empty -> .)

    arg_list_tail                  shift and go to state 186
    empty                          shift and go to state 144

state 171

    (90) list_elements_tail -> COMMA expr list_elements_tail .

    RBRACE          reduce using rule 90 (list_elements_tail -> COMMA expr list_elements_tail .)


state 172

    (95) record_elements_tail -> COMMA field_assign record_elements_tail .

    RBRACE          reduce using rule 95 (record_elements_tail -> COMMA field_assign record_elements_tail .)


state 173

    (35) input_block -> INPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 88

    var_decl_list                  shift and go to state 187
    var_decl                       shift and go to state 188

state 174

    (36) output_block -> OUTPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 88

    var_decl_list                  shift and go to state 189
    var_decl                       shift and go to state 188

state 175

    (37) memory_block -> MEMORY COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 88

    var_decl_list                  shift and go to state 190
    var_decl                       shift and go to state 188

state 176

    (38) model_block -> MODEL COLON STRING .

    INPUT           reduce using rule 38 (model_block -> MODEL COLON STRING .)
    OUTPUT          reduce using rule 38 (model_block -> MODEL COLON STRING .)
    MEMORY          reduce using rule 38 (model_block -> MODEL COLON STRING .)
    MODEL           reduce using rule 38 (model_block -> MODEL COLON STRING .)
    CHAT            reduce using rule 38 (model_block -> MODEL COLON STRING .)
    FOR             reduce using rule 38 (model_block -> MODEL COLON STRING .)
    IF              reduce using rule 38 (model_block -> MODEL COLON STRING .)
    WHILE           reduce using rule 38 (model_block -> MODEL COLON STRING .)
    IDENTIFIER      reduce using rule 38 (model_block -> MODEL COLON STRING .)
    BREAK           reduce using rule 38 (model_block -> MODEL COLON STRING .)
    CONTINUE        reduce using rule 38 (model_block -> MODEL COLON STRING .)
    RETURN          reduce using rule 38 (model_block -> MODEL COLON STRING .)
    DEDENT          reduce using rule 38 (model_block -> MODEL COLON STRING .)


state 177

    (39) chat_block -> CHAT IDENTIFIER COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 191


state 178

    (40) chat_block -> CHAT COLON TRIPLE_STRING .

    INPUT           reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    MEMORY          reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    MODEL           reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CHAT            reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    FOR             reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IF              reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    WHILE           reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    BREAK           reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    RETURN          reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 40 (chat_block -> CHAT COLON TRIPLE_STRING .)


state 179

    (25) field_decl -> IDENTIFIER COLON type .

    IDENTIFIER      reduce using rule 25 (field_decl -> IDENTIFIER COLON type .)
    RBRACE          reduce using rule 25 (field_decl -> IDENTIFIER COLON type .)


state 180

    (44) connection -> IDENTIFIER COLON type INDENT . agent_ref ARROW agent_ref DEDENT
    (45) agent_ref -> . IDENTIFIER agent_ref_tail

    IDENTIFIER      shift and go to state 192

    agent_ref                      shift and go to state 193

state 181

    (10) var_decl -> IDENTIFIER COLON type EQUALS . expr
    (76) expr -> . expr_head bin_op expr_tail
    (77) expr -> . expr_head
    (78) expr_head -> . atom
    (79) expr_head -> . list_expr
    (80) expr_head -> . record_expr
    (81) expr_head -> . field_access
    (82) expr_head -> . func_call
    (84) atom -> . IDENTIFIER
    (85) atom -> . STRING
    (86) atom -> . NUMBER
    (87) list_expr -> . LBRACE list_elements RBRACE
    (92) record_expr -> . LBRACE record_elements RBRACE
    (98) field_access -> . IDENTIFIER DOT IDENTIFIER
    (99) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 39
    STRING          shift and go to state 40
    NUMBER          shift and go to state 41
    LBRACE          shift and go to state 42

    expr                           shift and go to state 194
    expr_head                      shift and go to state 33
    atom                           shift and go to state 34
    list_expr                      shift and go to state 35
    record_expr                    shift and go to state 36
    field_access                   shift and go to state 37
    func_call                      shift and go to state 38

state 182

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type . COLON stmt_block

    COLON           shift and go to state 195


state 183

    (51) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .

    AGENT           reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    DEF             reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    FOR             reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    IF              reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    WHILE           reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    BREAK           reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    RETURN          reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)
    $end            reduce using rule 51 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON stmt_block .)


state 184

    (54) param_list_tail -> COMMA param_decl param_list_tail .

    RPAREN          reduce using rule 54 (param_list_tail -> COMMA param_decl param_list_tail .)


state 185

    (73) if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEF             reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MEMORY          reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 73 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)


state 186

    (102) arg_list_tail -> COMMA expr arg_list_tail .

    RPAREN          reduce using rule 102 (arg_list_tail -> COMMA expr arg_list_tail .)


state 187

    (35) input_block -> INPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 196


state 188

    (8) var_decl_list -> var_decl . var_decl_list
    (9) var_decl_list -> var_decl .
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (11) var_decl -> . IDENTIFIER COLON type
    (12) var_decl -> . IDENTIFIER EQUALS expr
    (13) var_decl -> . IDENTIFIER

    DEDENT          reduce using rule 9 (var_decl_list -> var_decl .)
    IDENTIFIER      shift and go to state 88

    var_decl                       shift and go to state 188
    var_decl_list                  shift and go to state 197

state 189

    (36) output_block -> OUTPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 198


state 190

    (37) memory_block -> MEMORY COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 199


state 191

    (39) chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .

    INPUT           reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    MEMORY          reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    MODEL           reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    CHAT            reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    FOR             reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    IF              reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    WHILE           reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    BREAK           reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    RETURN          reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 39 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)


state 192

    (45) agent_ref -> IDENTIFIER . agent_ref_tail
    (46) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (47) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (48) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (49) agent_ref_tail -> . empty
    (115) empty -> .

    DOT             shift and go to state 201
    ARROW           reduce using rule 115 (empty -> .)
    DEDENT          reduce using rule 115 (empty -> .)

    agent_ref_tail                 shift and go to state 200
    empty                          shift and go to state 202

state 193

    (44) connection -> IDENTIFIER COLON type INDENT agent_ref . ARROW agent_ref DEDENT

    ARROW           shift and go to state 203


state 194

    (10) var_decl -> IDENTIFIER COLON type EQUALS expr .

    COMMA           reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    RPAREN          reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    DEDENT          reduce using rule 10 (var_decl -> IDENTIFIER COLON type EQUALS expr .)


state 195

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON . stmt_block
    (57) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 95

    stmt_block                     shift and go to state 204

state 196

    (35) input_block -> INPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MEMORY          reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 35 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)


state 197

    (8) var_decl_list -> var_decl var_decl_list .

    DEDENT          reduce using rule 8 (var_decl_list -> var_decl var_decl_list .)


state 198

    (36) output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MEMORY          reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 36 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)


state 199

    (37) memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    MEMORY          reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 37 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)


state 200

    (45) agent_ref -> IDENTIFIER agent_ref_tail .

    ARROW           reduce using rule 45 (agent_ref -> IDENTIFIER agent_ref_tail .)
    DEDENT          reduce using rule 45 (agent_ref -> IDENTIFIER agent_ref_tail .)


state 201

    (46) agent_ref_tail -> DOT . IDENTIFIER agent_ref_tail
    (47) agent_ref_tail -> DOT . OUTPUT agent_ref_tail
    (48) agent_ref_tail -> DOT . INPUT agent_ref_tail

    IDENTIFIER      shift and go to state 205
    OUTPUT          shift and go to state 206
    INPUT           shift and go to state 207


state 202

    (49) agent_ref_tail -> empty .

    ARROW           reduce using rule 49 (agent_ref_tail -> empty .)
    DEDENT          reduce using rule 49 (agent_ref_tail -> empty .)


state 203

    (44) connection -> IDENTIFIER COLON type INDENT agent_ref ARROW . agent_ref DEDENT
    (45) agent_ref -> . IDENTIFIER agent_ref_tail

    IDENTIFIER      shift and go to state 192

    agent_ref                      shift and go to state 208

state 204

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .

    AGENT           reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    CONNECT         reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    DEF             reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    FOR             reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    IF              reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    WHILE           reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    IDENTIFIER      reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    BREAK           reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    CONTINUE        reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    RETURN          reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)
    $end            reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON stmt_block .)


state 205

    (46) agent_ref_tail -> DOT IDENTIFIER . agent_ref_tail
    (46) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (47) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (48) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (49) agent_ref_tail -> . empty
    (115) empty -> .

    DOT             shift and go to state 201
    ARROW           reduce using rule 115 (empty -> .)
    DEDENT          reduce using rule 115 (empty -> .)

    agent_ref_tail                 shift and go to state 209
    empty                          shift and go to state 202

state 206

    (47) agent_ref_tail -> DOT OUTPUT . agent_ref_tail
    (46) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (47) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (48) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (49) agent_ref_tail -> . empty
    (115) empty -> .

    DOT             shift and go to state 201
    ARROW           reduce using rule 115 (empty -> .)
    DEDENT          reduce using rule 115 (empty -> .)

    agent_ref_tail                 shift and go to state 210
    empty                          shift and go to state 202

state 207

    (48) agent_ref_tail -> DOT INPUT . agent_ref_tail
    (46) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (47) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (48) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (49) agent_ref_tail -> . empty
    (115) empty -> .

    DOT             shift and go to state 201
    ARROW           reduce using rule 115 (empty -> .)
    DEDENT          reduce using rule 115 (empty -> .)

    agent_ref_tail                 shift and go to state 211
    empty                          shift and go to state 202

state 208

    (44) connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref . DEDENT

    DEDENT          shift and go to state 212


state 209

    (46) agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .

    ARROW           reduce using rule 46 (agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .)
    DEDENT          reduce using rule 46 (agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .)


state 210

    (47) agent_ref_tail -> DOT OUTPUT agent_ref_tail .

    ARROW           reduce using rule 47 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)
    DEDENT          reduce using rule 47 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)


state 211

    (48) agent_ref_tail -> DOT INPUT agent_ref_tail .

    ARROW           reduce using rule 48 (agent_ref_tail -> DOT INPUT agent_ref_tail .)
    DEDENT          reduce using rule 48 (agent_ref_tail -> DOT INPUT agent_ref_tail .)


state 212

    (44) connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT .

    IDENTIFIER      reduce using rule 44 (connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT .)
    DEDENT          reduce using rule 44 (connection -> IDENTIFIER COLON type INDENT agent_ref ARROW agent_ref DEDENT .)

