Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TYPE_TUPLE

Grammar

Rule 0     S' -> program
Rule 1     program -> program_body
Rule 2     program_body -> program_body_item program_body
Rule 3     program_body -> program_body_item
Rule 4     program_body_item -> statement
Rule 5     program_body_item -> agent_def
Rule 6     program_body_item -> connect_block
Rule 7     program_body_item -> func_def
Rule 8     var_decl_list -> var_decl var_decl_list
Rule 9     var_decl_list -> var_decl
Rule 10    var_decl -> identifier COLON type EQUALS expr
Rule 11    var_decl -> identifier COLON type
Rule 12    var_decl -> identifier EQUALS expr
Rule 13    var_decl -> identifier
Rule 14    type -> base_type
Rule 15    type -> list_type
Rule 16    type -> record_type
Rule 17    type -> func_ret_type
Rule 18    type -> union_type
Rule 19    base_type -> TYPE_STR
Rule 20    base_type -> TYPE_INT
Rule 21    base_type -> TYPE_FLOAT
Rule 22    base_type -> TYPE_BOOL
Rule 23    base_type -> TYPE_UNIT
Rule 24    union_type -> TYPE_UNION LBRACKET type_list RBRACKET
Rule 25    func_ret_type -> LPAREN type_list RPAREN
Rule 26    type_list -> type
Rule 27    type_list -> type COMMA type_list
Rule 28    list_type -> TYPE_LIST LBRACKET type RBRACKET
Rule 29    record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE
Rule 30    field_decl_list -> field_decl COMMA field_decl_list
Rule 31    field_decl_list -> field_decl
Rule 32    field_decl -> identifier COLON type
Rule 33    agent_def -> AGENT identifier COLON INDENT agent_body DEDENT
Rule 34    agent_body -> agent_body_item agent_body
Rule 35    agent_body -> agent_body_item
Rule 36    agent_body_item -> input_block
Rule 37    agent_body_item -> output_block
Rule 38    agent_body_item -> model_block
Rule 39    agent_body_item -> statement
Rule 40    agent_body_item -> chat_block
Rule 41    input_block -> INPUT COLON INDENT var_decl_list DEDENT
Rule 42    output_block -> OUTPUT COLON INDENT var_decl_list DEDENT
Rule 43    model_block -> MODEL COLON constant
Rule 44    chat_block -> CHAT identifier COLON TRIPLE_STRING
Rule 45    chat_block -> CHAT COLON TRIPLE_STRING
Rule 46    connect_block -> CONNECT COLON INDENT connection_list DEDENT
Rule 47    connection_list -> connection connection_list
Rule 48    connection_list -> connection
Rule 49    connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
Rule 50    agent_ref -> identifier agent_ref_tail
Rule 51    agent_ref_tail -> DOT identifier agent_ref_tail
Rule 52    agent_ref_tail -> DOT OUTPUT agent_ref_tail
Rule 53    agent_ref_tail -> DOT INPUT agent_ref_tail
Rule 54    agent_ref_tail -> empty
Rule 55    func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
Rule 56    func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block
Rule 57    param_list -> param_decl param_list_tail
Rule 58    param_list -> empty
Rule 59    param_list_tail -> COMMA param_decl param_list_tail
Rule 60    param_list_tail -> empty
Rule 61    param_decl -> var_decl
Rule 62    stmt_block -> INDENT statement_list DEDENT
Rule 63    statement_list -> statement statement_list
Rule 64    statement_list -> statement
Rule 65    statement -> for_stmt
Rule 66    statement -> if_stmt
Rule 67    statement -> while_stmt
Rule 68    statement -> assign_stmt
Rule 69    statement -> break_stmt
Rule 70    statement -> continue_stmt
Rule 71    statement -> return_stmt
Rule 72    assign_stmt -> assign_target COLON type EQUALS expr
Rule 73    assign_stmt -> assign_target EQUALS expr
Rule 74    assign_target -> identifier
Rule 75    assign_target -> field_access
Rule 76    assign_target -> index_access
Rule 77    return_stmt -> RETURN expr
Rule 78    for_stmt -> FOR identifier IN expr COLON stmt_block
Rule 79    break_stmt -> BREAK
Rule 80    continue_stmt -> CONTINUE
Rule 81    if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block
Rule 82    if_stmt -> IF expr COLON stmt_block
Rule 83    while_stmt -> WHILE expr COLON stmt_block
Rule 84    expr -> expr_head bin_op expr_tail
Rule 85    expr -> expr_head
Rule 86    expr_head -> atom
Rule 87    expr_head -> list_expr
Rule 88    expr_head -> record_expr
Rule 89    expr_head -> field_access
Rule 90    expr_head -> index_access
Rule 91    expr_head -> func_call
Rule 92    expr_tail -> expr
Rule 93    atom -> identifier
Rule 94    atom -> constant
Rule 95    identifier -> IDENTIFIER
Rule 96    constant -> STRING
Rule 97    constant -> NUMBER
Rule 98    list_expr -> LBRACKET list_elements RBRACKET
Rule 99    list_elements -> expr list_elements_tail
Rule 100   list_elements -> expr
Rule 101   list_elements_tail -> COMMA expr list_elements_tail
Rule 102   list_elements_tail -> COMMA expr
Rule 103   record_expr -> LBRACE record_elements RBRACE
Rule 104   record_elements -> instance_assign record_elements_tail
Rule 105   record_elements -> instance_assign
Rule 106   record_elements_tail -> COMMA instance_assign record_elements_tail
Rule 107   record_elements_tail -> COMMA instance_assign
Rule 108   instance_assign -> identifier EQUALS expr
Rule 109   index_access -> identifier LBRACKET expr RBRACKET
Rule 110   field_access -> identifier DOT identifier
Rule 111   func_call -> identifier LPAREN arg_list RPAREN
Rule 112   arg_list -> expr arg_list_tail
Rule 113   arg_list -> empty
Rule 114   arg_list_tail -> COMMA expr arg_list_tail
Rule 115   arg_list_tail -> empty
Rule 116   bin_op -> PLUS
Rule 117   bin_op -> MINUS
Rule 118   bin_op -> TIMES
Rule 119   bin_op -> DIVIDE
Rule 120   bin_op -> MOD
Rule 121   bin_op -> EQ
Rule 122   bin_op -> NEQ
Rule 123   bin_op -> LT
Rule 124   bin_op -> GT
Rule 125   bin_op -> LE
Rule 126   bin_op -> GE
Rule 127   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 33
ARROW                : 49 55
BREAK                : 79
CHAT                 : 44 45
COLON                : 10 11 32 33 41 42 43 44 45 46 49 55 56 72 78 81 81 82 83
COMMA                : 27 30 59 101 102 106 107 114
CONNECT              : 46
CONTINUE             : 80
DEDENT               : 33 41 42 46 49 62
DIVIDE               : 119
DOT                  : 51 52 53 110
ELSE                 : 81
EQ                   : 121
EQUALS               : 10 12 72 73 108
FOR                  : 78
FUN                  : 55 56
GE                   : 126
GT                   : 124
IDENTIFIER           : 95
IF                   : 81 82
IN                   : 78
INDENT               : 33 41 42 46 49 62
INPUT                : 41 53
LBRACE               : 29 103
LBRACKET             : 24 28 98 109
LE                   : 125
LPAREN               : 25 55 56 111
LT                   : 123
MINUS                : 117
MOD                  : 120
MODEL                : 43
NEQ                  : 122
NEWLINE              : 
NUMBER               : 97
OUTPUT               : 42 52
PLUS                 : 116
RBRACE               : 29 103
RBRACKET             : 24 28 98 109
RETURN               : 77
RPAREN               : 25 55 56 111
STRING               : 96
TIMES                : 118
TRIPLE_STRING        : 44 45
TYPE_BOOL            : 22
TYPE_FLOAT           : 21
TYPE_INT             : 20
TYPE_LIST            : 28
TYPE_RECORD          : 29
TYPE_STR             : 19
TYPE_TUPLE           : 
TYPE_UNION           : 24
TYPE_UNIT            : 23
WHILE                : 83
error                : 

Nonterminals, with rules where they appear

agent_body           : 33 34
agent_body_item      : 34 35
agent_def            : 5
agent_ref            : 49 49
agent_ref_tail       : 50 51 52 53
arg_list             : 111
arg_list_tail        : 112 114
assign_stmt          : 68
assign_target        : 72 73
atom                 : 86
base_type            : 14
bin_op               : 84
break_stmt           : 69
chat_block           : 40
connect_block        : 6
connection           : 47 48
connection_list      : 46 47
constant             : 43 94
continue_stmt        : 70
empty                : 54 58 60 113 115
expr                 : 10 12 72 73 77 78 81 82 83 92 99 100 101 102 108 109 112 114
expr_head            : 84 85
expr_tail            : 84
field_access         : 75 89
field_decl           : 30 31
field_decl_list      : 29 30
for_stmt             : 65
func_call            : 91
func_def             : 7
func_ret_type        : 17
identifier           : 10 11 12 13 32 33 44 49 50 51 55 56 74 78 93 108 109 110 110 111
if_stmt              : 66
index_access         : 76 90
input_block          : 36
instance_assign      : 104 105 106 107
list_elements        : 98
list_elements_tail   : 99 101
list_expr            : 87
list_type            : 15
model_block          : 38
output_block         : 37
param_decl           : 57 59
param_list           : 55 56
param_list_tail      : 57 59
program              : 0
program_body         : 1 2
program_body_item    : 2 3
record_elements      : 103
record_elements_tail : 104 106
record_expr          : 88
record_type          : 16
return_stmt          : 71
statement            : 4 39 63 64
statement_list       : 62 63
stmt_block           : 55 56 78 81 81 82 83
type                 : 10 11 26 27 28 32 49 55 72
type_list            : 24 25 27
union_type           : 18
var_decl             : 8 9 61
var_decl_list        : 8 41 42
while_stmt           : 67


state 0

    (0) S' -> . program
    (1) program -> . program_body
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (65) statement -> . for_stmt
    (66) statement -> . if_stmt
    (67) statement -> . while_stmt
    (68) statement -> . assign_stmt
    (69) statement -> . break_stmt
    (70) statement -> . continue_stmt
    (71) statement -> . return_stmt
    (33) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (46) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (55) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (56) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (78) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (81) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> . IF expr COLON stmt_block
    (83) while_stmt -> . WHILE expr COLON stmt_block
    (72) assign_stmt -> . assign_target COLON type EQUALS expr
    (73) assign_stmt -> . assign_target EQUALS expr
    (79) break_stmt -> . BREAK
    (80) continue_stmt -> . CONTINUE
    (77) return_stmt -> . RETURN expr
    (74) assign_target -> . identifier
    (75) assign_target -> . field_access
    (76) assign_target -> . index_access
    (95) identifier -> . IDENTIFIER
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET

    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    FUN             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    program                        shift and go to state 1
    program_body                   shift and go to state 2
    program_body_item              shift and go to state 3
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (1) program -> program_body .

    $end            reduce using rule 1 (program -> program_body .)


state 3

    (2) program_body -> program_body_item . program_body
    (3) program_body -> program_body_item .
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (65) statement -> . for_stmt
    (66) statement -> . if_stmt
    (67) statement -> . while_stmt
    (68) statement -> . assign_stmt
    (69) statement -> . break_stmt
    (70) statement -> . continue_stmt
    (71) statement -> . return_stmt
    (33) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (46) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (55) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (56) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (78) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (81) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> . IF expr COLON stmt_block
    (83) while_stmt -> . WHILE expr COLON stmt_block
    (72) assign_stmt -> . assign_target COLON type EQUALS expr
    (73) assign_stmt -> . assign_target EQUALS expr
    (79) break_stmt -> . BREAK
    (80) continue_stmt -> . CONTINUE
    (77) return_stmt -> . RETURN expr
    (74) assign_target -> . identifier
    (75) assign_target -> . field_access
    (76) assign_target -> . index_access
    (95) identifier -> . IDENTIFIER
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET

    $end            reduce using rule 3 (program_body -> program_body_item .)
    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    FUN             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    program_body_item              shift and go to state 3
    program_body                   shift and go to state 29
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 4

    (4) program_body_item -> statement .

    AGENT           reduce using rule 4 (program_body_item -> statement .)
    CONNECT         reduce using rule 4 (program_body_item -> statement .)
    FUN             reduce using rule 4 (program_body_item -> statement .)
    FOR             reduce using rule 4 (program_body_item -> statement .)
    IF              reduce using rule 4 (program_body_item -> statement .)
    WHILE           reduce using rule 4 (program_body_item -> statement .)
    BREAK           reduce using rule 4 (program_body_item -> statement .)
    CONTINUE        reduce using rule 4 (program_body_item -> statement .)
    RETURN          reduce using rule 4 (program_body_item -> statement .)
    IDENTIFIER      reduce using rule 4 (program_body_item -> statement .)
    $end            reduce using rule 4 (program_body_item -> statement .)


state 5

    (5) program_body_item -> agent_def .

    AGENT           reduce using rule 5 (program_body_item -> agent_def .)
    CONNECT         reduce using rule 5 (program_body_item -> agent_def .)
    FUN             reduce using rule 5 (program_body_item -> agent_def .)
    FOR             reduce using rule 5 (program_body_item -> agent_def .)
    IF              reduce using rule 5 (program_body_item -> agent_def .)
    WHILE           reduce using rule 5 (program_body_item -> agent_def .)
    BREAK           reduce using rule 5 (program_body_item -> agent_def .)
    CONTINUE        reduce using rule 5 (program_body_item -> agent_def .)
    RETURN          reduce using rule 5 (program_body_item -> agent_def .)
    IDENTIFIER      reduce using rule 5 (program_body_item -> agent_def .)
    $end            reduce using rule 5 (program_body_item -> agent_def .)


state 6

    (6) program_body_item -> connect_block .

    AGENT           reduce using rule 6 (program_body_item -> connect_block .)
    CONNECT         reduce using rule 6 (program_body_item -> connect_block .)
    FUN             reduce using rule 6 (program_body_item -> connect_block .)
    FOR             reduce using rule 6 (program_body_item -> connect_block .)
    IF              reduce using rule 6 (program_body_item -> connect_block .)
    WHILE           reduce using rule 6 (program_body_item -> connect_block .)
    BREAK           reduce using rule 6 (program_body_item -> connect_block .)
    CONTINUE        reduce using rule 6 (program_body_item -> connect_block .)
    RETURN          reduce using rule 6 (program_body_item -> connect_block .)
    IDENTIFIER      reduce using rule 6 (program_body_item -> connect_block .)
    $end            reduce using rule 6 (program_body_item -> connect_block .)


state 7

    (7) program_body_item -> func_def .

    AGENT           reduce using rule 7 (program_body_item -> func_def .)
    CONNECT         reduce using rule 7 (program_body_item -> func_def .)
    FUN             reduce using rule 7 (program_body_item -> func_def .)
    FOR             reduce using rule 7 (program_body_item -> func_def .)
    IF              reduce using rule 7 (program_body_item -> func_def .)
    WHILE           reduce using rule 7 (program_body_item -> func_def .)
    BREAK           reduce using rule 7 (program_body_item -> func_def .)
    CONTINUE        reduce using rule 7 (program_body_item -> func_def .)
    RETURN          reduce using rule 7 (program_body_item -> func_def .)
    IDENTIFIER      reduce using rule 7 (program_body_item -> func_def .)
    $end            reduce using rule 7 (program_body_item -> func_def .)


state 8

    (65) statement -> for_stmt .

    AGENT           reduce using rule 65 (statement -> for_stmt .)
    CONNECT         reduce using rule 65 (statement -> for_stmt .)
    FUN             reduce using rule 65 (statement -> for_stmt .)
    FOR             reduce using rule 65 (statement -> for_stmt .)
    IF              reduce using rule 65 (statement -> for_stmt .)
    WHILE           reduce using rule 65 (statement -> for_stmt .)
    BREAK           reduce using rule 65 (statement -> for_stmt .)
    CONTINUE        reduce using rule 65 (statement -> for_stmt .)
    RETURN          reduce using rule 65 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 65 (statement -> for_stmt .)
    $end            reduce using rule 65 (statement -> for_stmt .)
    INPUT           reduce using rule 65 (statement -> for_stmt .)
    OUTPUT          reduce using rule 65 (statement -> for_stmt .)
    MODEL           reduce using rule 65 (statement -> for_stmt .)
    CHAT            reduce using rule 65 (statement -> for_stmt .)
    DEDENT          reduce using rule 65 (statement -> for_stmt .)


state 9

    (66) statement -> if_stmt .

    AGENT           reduce using rule 66 (statement -> if_stmt .)
    CONNECT         reduce using rule 66 (statement -> if_stmt .)
    FUN             reduce using rule 66 (statement -> if_stmt .)
    FOR             reduce using rule 66 (statement -> if_stmt .)
    IF              reduce using rule 66 (statement -> if_stmt .)
    WHILE           reduce using rule 66 (statement -> if_stmt .)
    BREAK           reduce using rule 66 (statement -> if_stmt .)
    CONTINUE        reduce using rule 66 (statement -> if_stmt .)
    RETURN          reduce using rule 66 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 66 (statement -> if_stmt .)
    $end            reduce using rule 66 (statement -> if_stmt .)
    INPUT           reduce using rule 66 (statement -> if_stmt .)
    OUTPUT          reduce using rule 66 (statement -> if_stmt .)
    MODEL           reduce using rule 66 (statement -> if_stmt .)
    CHAT            reduce using rule 66 (statement -> if_stmt .)
    DEDENT          reduce using rule 66 (statement -> if_stmt .)


state 10

    (67) statement -> while_stmt .

    AGENT           reduce using rule 67 (statement -> while_stmt .)
    CONNECT         reduce using rule 67 (statement -> while_stmt .)
    FUN             reduce using rule 67 (statement -> while_stmt .)
    FOR             reduce using rule 67 (statement -> while_stmt .)
    IF              reduce using rule 67 (statement -> while_stmt .)
    WHILE           reduce using rule 67 (statement -> while_stmt .)
    BREAK           reduce using rule 67 (statement -> while_stmt .)
    CONTINUE        reduce using rule 67 (statement -> while_stmt .)
    RETURN          reduce using rule 67 (statement -> while_stmt .)
    IDENTIFIER      reduce using rule 67 (statement -> while_stmt .)
    $end            reduce using rule 67 (statement -> while_stmt .)
    INPUT           reduce using rule 67 (statement -> while_stmt .)
    OUTPUT          reduce using rule 67 (statement -> while_stmt .)
    MODEL           reduce using rule 67 (statement -> while_stmt .)
    CHAT            reduce using rule 67 (statement -> while_stmt .)
    DEDENT          reduce using rule 67 (statement -> while_stmt .)


state 11

    (68) statement -> assign_stmt .

    AGENT           reduce using rule 68 (statement -> assign_stmt .)
    CONNECT         reduce using rule 68 (statement -> assign_stmt .)
    FUN             reduce using rule 68 (statement -> assign_stmt .)
    FOR             reduce using rule 68 (statement -> assign_stmt .)
    IF              reduce using rule 68 (statement -> assign_stmt .)
    WHILE           reduce using rule 68 (statement -> assign_stmt .)
    BREAK           reduce using rule 68 (statement -> assign_stmt .)
    CONTINUE        reduce using rule 68 (statement -> assign_stmt .)
    RETURN          reduce using rule 68 (statement -> assign_stmt .)
    IDENTIFIER      reduce using rule 68 (statement -> assign_stmt .)
    $end            reduce using rule 68 (statement -> assign_stmt .)
    INPUT           reduce using rule 68 (statement -> assign_stmt .)
    OUTPUT          reduce using rule 68 (statement -> assign_stmt .)
    MODEL           reduce using rule 68 (statement -> assign_stmt .)
    CHAT            reduce using rule 68 (statement -> assign_stmt .)
    DEDENT          reduce using rule 68 (statement -> assign_stmt .)


state 12

    (69) statement -> break_stmt .

    AGENT           reduce using rule 69 (statement -> break_stmt .)
    CONNECT         reduce using rule 69 (statement -> break_stmt .)
    FUN             reduce using rule 69 (statement -> break_stmt .)
    FOR             reduce using rule 69 (statement -> break_stmt .)
    IF              reduce using rule 69 (statement -> break_stmt .)
    WHILE           reduce using rule 69 (statement -> break_stmt .)
    BREAK           reduce using rule 69 (statement -> break_stmt .)
    CONTINUE        reduce using rule 69 (statement -> break_stmt .)
    RETURN          reduce using rule 69 (statement -> break_stmt .)
    IDENTIFIER      reduce using rule 69 (statement -> break_stmt .)
    $end            reduce using rule 69 (statement -> break_stmt .)
    INPUT           reduce using rule 69 (statement -> break_stmt .)
    OUTPUT          reduce using rule 69 (statement -> break_stmt .)
    MODEL           reduce using rule 69 (statement -> break_stmt .)
    CHAT            reduce using rule 69 (statement -> break_stmt .)
    DEDENT          reduce using rule 69 (statement -> break_stmt .)


state 13

    (70) statement -> continue_stmt .

    AGENT           reduce using rule 70 (statement -> continue_stmt .)
    CONNECT         reduce using rule 70 (statement -> continue_stmt .)
    FUN             reduce using rule 70 (statement -> continue_stmt .)
    FOR             reduce using rule 70 (statement -> continue_stmt .)
    IF              reduce using rule 70 (statement -> continue_stmt .)
    WHILE           reduce using rule 70 (statement -> continue_stmt .)
    BREAK           reduce using rule 70 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 70 (statement -> continue_stmt .)
    RETURN          reduce using rule 70 (statement -> continue_stmt .)
    IDENTIFIER      reduce using rule 70 (statement -> continue_stmt .)
    $end            reduce using rule 70 (statement -> continue_stmt .)
    INPUT           reduce using rule 70 (statement -> continue_stmt .)
    OUTPUT          reduce using rule 70 (statement -> continue_stmt .)
    MODEL           reduce using rule 70 (statement -> continue_stmt .)
    CHAT            reduce using rule 70 (statement -> continue_stmt .)
    DEDENT          reduce using rule 70 (statement -> continue_stmt .)


state 14

    (71) statement -> return_stmt .

    AGENT           reduce using rule 71 (statement -> return_stmt .)
    CONNECT         reduce using rule 71 (statement -> return_stmt .)
    FUN             reduce using rule 71 (statement -> return_stmt .)
    FOR             reduce using rule 71 (statement -> return_stmt .)
    IF              reduce using rule 71 (statement -> return_stmt .)
    WHILE           reduce using rule 71 (statement -> return_stmt .)
    BREAK           reduce using rule 71 (statement -> return_stmt .)
    CONTINUE        reduce using rule 71 (statement -> return_stmt .)
    RETURN          reduce using rule 71 (statement -> return_stmt .)
    IDENTIFIER      reduce using rule 71 (statement -> return_stmt .)
    $end            reduce using rule 71 (statement -> return_stmt .)
    INPUT           reduce using rule 71 (statement -> return_stmt .)
    OUTPUT          reduce using rule 71 (statement -> return_stmt .)
    MODEL           reduce using rule 71 (statement -> return_stmt .)
    CHAT            reduce using rule 71 (statement -> return_stmt .)
    DEDENT          reduce using rule 71 (statement -> return_stmt .)


state 15

    (33) agent_def -> AGENT . identifier COLON INDENT agent_body DEDENT
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 30

state 16

    (74) assign_target -> identifier .
    (110) field_access -> identifier . DOT identifier
    (109) index_access -> identifier . LBRACKET expr RBRACKET

    COLON           reduce using rule 74 (assign_target -> identifier .)
    EQUALS          reduce using rule 74 (assign_target -> identifier .)
    DOT             shift and go to state 31
    LBRACKET        shift and go to state 32


state 17

    (46) connect_block -> CONNECT . COLON INDENT connection_list DEDENT

    COLON           shift and go to state 33


state 18

    (55) func_def -> FUN . identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (56) func_def -> FUN . identifier LPAREN param_list RPAREN COLON stmt_block
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 34

state 19

    (78) for_stmt -> FOR . identifier IN expr COLON stmt_block
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 35

state 20

    (81) if_stmt -> IF . expr COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> IF . expr COLON stmt_block
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr                           shift and go to state 36
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 21

    (83) while_stmt -> WHILE . expr COLON stmt_block
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr                           shift and go to state 50
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 22

    (72) assign_stmt -> assign_target . COLON type EQUALS expr
    (73) assign_stmt -> assign_target . EQUALS expr

    COLON           shift and go to state 51
    EQUALS          shift and go to state 52


state 23

    (79) break_stmt -> BREAK .

    AGENT           reduce using rule 79 (break_stmt -> BREAK .)
    CONNECT         reduce using rule 79 (break_stmt -> BREAK .)
    FUN             reduce using rule 79 (break_stmt -> BREAK .)
    FOR             reduce using rule 79 (break_stmt -> BREAK .)
    IF              reduce using rule 79 (break_stmt -> BREAK .)
    WHILE           reduce using rule 79 (break_stmt -> BREAK .)
    BREAK           reduce using rule 79 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 79 (break_stmt -> BREAK .)
    RETURN          reduce using rule 79 (break_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 79 (break_stmt -> BREAK .)
    $end            reduce using rule 79 (break_stmt -> BREAK .)
    INPUT           reduce using rule 79 (break_stmt -> BREAK .)
    OUTPUT          reduce using rule 79 (break_stmt -> BREAK .)
    MODEL           reduce using rule 79 (break_stmt -> BREAK .)
    CHAT            reduce using rule 79 (break_stmt -> BREAK .)
    DEDENT          reduce using rule 79 (break_stmt -> BREAK .)


state 24

    (80) continue_stmt -> CONTINUE .

    AGENT           reduce using rule 80 (continue_stmt -> CONTINUE .)
    CONNECT         reduce using rule 80 (continue_stmt -> CONTINUE .)
    FUN             reduce using rule 80 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 80 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 80 (continue_stmt -> CONTINUE .)
    WHILE           reduce using rule 80 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 80 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 80 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 80 (continue_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 80 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 80 (continue_stmt -> CONTINUE .)
    INPUT           reduce using rule 80 (continue_stmt -> CONTINUE .)
    OUTPUT          reduce using rule 80 (continue_stmt -> CONTINUE .)
    MODEL           reduce using rule 80 (continue_stmt -> CONTINUE .)
    CHAT            reduce using rule 80 (continue_stmt -> CONTINUE .)
    DEDENT          reduce using rule 80 (continue_stmt -> CONTINUE .)


state 25

    (77) return_stmt -> RETURN . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr                           shift and go to state 53
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 26

    (75) assign_target -> field_access .

    COLON           reduce using rule 75 (assign_target -> field_access .)
    EQUALS          reduce using rule 75 (assign_target -> field_access .)


state 27

    (76) assign_target -> index_access .

    COLON           reduce using rule 76 (assign_target -> index_access .)
    EQUALS          reduce using rule 76 (assign_target -> index_access .)


state 28

    (95) identifier -> IDENTIFIER .

    DOT             reduce using rule 95 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 95 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 95 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 95 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 95 (identifier -> IDENTIFIER .)
    IN              reduce using rule 95 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 95 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 95 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 95 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 95 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 95 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 95 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 95 (identifier -> IDENTIFIER .)
    LT              reduce using rule 95 (identifier -> IDENTIFIER .)
    GT              reduce using rule 95 (identifier -> IDENTIFIER .)
    LE              reduce using rule 95 (identifier -> IDENTIFIER .)
    GE              reduce using rule 95 (identifier -> IDENTIFIER .)
    AGENT           reduce using rule 95 (identifier -> IDENTIFIER .)
    CONNECT         reduce using rule 95 (identifier -> IDENTIFIER .)
    FUN             reduce using rule 95 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 95 (identifier -> IDENTIFIER .)
    IF              reduce using rule 95 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 95 (identifier -> IDENTIFIER .)
    BREAK           reduce using rule 95 (identifier -> IDENTIFIER .)
    CONTINUE        reduce using rule 95 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 95 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 95 (identifier -> IDENTIFIER .)
    $end            reduce using rule 95 (identifier -> IDENTIFIER .)
    INPUT           reduce using rule 95 (identifier -> IDENTIFIER .)
    OUTPUT          reduce using rule 95 (identifier -> IDENTIFIER .)
    MODEL           reduce using rule 95 (identifier -> IDENTIFIER .)
    CHAT            reduce using rule 95 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 95 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 95 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 95 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 95 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 95 (identifier -> IDENTIFIER .)
    ARROW           reduce using rule 95 (identifier -> IDENTIFIER .)


state 29

    (2) program_body -> program_body_item program_body .

    $end            reduce using rule 2 (program_body -> program_body_item program_body .)


state 30

    (33) agent_def -> AGENT identifier . COLON INDENT agent_body DEDENT

    COLON           shift and go to state 54


state 31

    (110) field_access -> identifier DOT . identifier
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 55

state 32

    (109) index_access -> identifier LBRACKET . expr RBRACKET
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    identifier                     shift and go to state 44
    expr                           shift and go to state 56
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    constant                       shift and go to state 45

state 33

    (46) connect_block -> CONNECT COLON . INDENT connection_list DEDENT

    INDENT          shift and go to state 57


state 34

    (55) func_def -> FUN identifier . LPAREN param_list RPAREN ARROW type COLON stmt_block
    (56) func_def -> FUN identifier . LPAREN param_list RPAREN COLON stmt_block

    LPAREN          shift and go to state 58


state 35

    (78) for_stmt -> FOR identifier . IN expr COLON stmt_block

    IN              shift and go to state 59


state 36

    (81) if_stmt -> IF expr . COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> IF expr . COLON stmt_block

    COLON           shift and go to state 60


state 37

    (84) expr -> expr_head . bin_op expr_tail
    (85) expr -> expr_head .
    (116) bin_op -> . PLUS
    (117) bin_op -> . MINUS
    (118) bin_op -> . TIMES
    (119) bin_op -> . DIVIDE
    (120) bin_op -> . MOD
    (121) bin_op -> . EQ
    (122) bin_op -> . NEQ
    (123) bin_op -> . LT
    (124) bin_op -> . GT
    (125) bin_op -> . LE
    (126) bin_op -> . GE

    COLON           reduce using rule 85 (expr -> expr_head .)
    AGENT           reduce using rule 85 (expr -> expr_head .)
    CONNECT         reduce using rule 85 (expr -> expr_head .)
    FUN             reduce using rule 85 (expr -> expr_head .)
    FOR             reduce using rule 85 (expr -> expr_head .)
    IF              reduce using rule 85 (expr -> expr_head .)
    WHILE           reduce using rule 85 (expr -> expr_head .)
    BREAK           reduce using rule 85 (expr -> expr_head .)
    CONTINUE        reduce using rule 85 (expr -> expr_head .)
    RETURN          reduce using rule 85 (expr -> expr_head .)
    IDENTIFIER      reduce using rule 85 (expr -> expr_head .)
    $end            reduce using rule 85 (expr -> expr_head .)
    INPUT           reduce using rule 85 (expr -> expr_head .)
    OUTPUT          reduce using rule 85 (expr -> expr_head .)
    MODEL           reduce using rule 85 (expr -> expr_head .)
    CHAT            reduce using rule 85 (expr -> expr_head .)
    DEDENT          reduce using rule 85 (expr -> expr_head .)
    RBRACKET        reduce using rule 85 (expr -> expr_head .)
    COMMA           reduce using rule 85 (expr -> expr_head .)
    RPAREN          reduce using rule 85 (expr -> expr_head .)
    RBRACE          reduce using rule 85 (expr -> expr_head .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 65
    MOD             shift and go to state 66
    EQ              shift and go to state 67
    NEQ             shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72

    bin_op                         shift and go to state 61

state 38

    (86) expr_head -> atom .

    PLUS            reduce using rule 86 (expr_head -> atom .)
    MINUS           reduce using rule 86 (expr_head -> atom .)
    TIMES           reduce using rule 86 (expr_head -> atom .)
    DIVIDE          reduce using rule 86 (expr_head -> atom .)
    MOD             reduce using rule 86 (expr_head -> atom .)
    EQ              reduce using rule 86 (expr_head -> atom .)
    NEQ             reduce using rule 86 (expr_head -> atom .)
    LT              reduce using rule 86 (expr_head -> atom .)
    GT              reduce using rule 86 (expr_head -> atom .)
    LE              reduce using rule 86 (expr_head -> atom .)
    GE              reduce using rule 86 (expr_head -> atom .)
    COLON           reduce using rule 86 (expr_head -> atom .)
    AGENT           reduce using rule 86 (expr_head -> atom .)
    CONNECT         reduce using rule 86 (expr_head -> atom .)
    FUN             reduce using rule 86 (expr_head -> atom .)
    FOR             reduce using rule 86 (expr_head -> atom .)
    IF              reduce using rule 86 (expr_head -> atom .)
    WHILE           reduce using rule 86 (expr_head -> atom .)
    BREAK           reduce using rule 86 (expr_head -> atom .)
    CONTINUE        reduce using rule 86 (expr_head -> atom .)
    RETURN          reduce using rule 86 (expr_head -> atom .)
    IDENTIFIER      reduce using rule 86 (expr_head -> atom .)
    $end            reduce using rule 86 (expr_head -> atom .)
    INPUT           reduce using rule 86 (expr_head -> atom .)
    OUTPUT          reduce using rule 86 (expr_head -> atom .)
    MODEL           reduce using rule 86 (expr_head -> atom .)
    CHAT            reduce using rule 86 (expr_head -> atom .)
    DEDENT          reduce using rule 86 (expr_head -> atom .)
    RBRACKET        reduce using rule 86 (expr_head -> atom .)
    COMMA           reduce using rule 86 (expr_head -> atom .)
    RPAREN          reduce using rule 86 (expr_head -> atom .)
    RBRACE          reduce using rule 86 (expr_head -> atom .)


state 39

    (87) expr_head -> list_expr .

    PLUS            reduce using rule 87 (expr_head -> list_expr .)
    MINUS           reduce using rule 87 (expr_head -> list_expr .)
    TIMES           reduce using rule 87 (expr_head -> list_expr .)
    DIVIDE          reduce using rule 87 (expr_head -> list_expr .)
    MOD             reduce using rule 87 (expr_head -> list_expr .)
    EQ              reduce using rule 87 (expr_head -> list_expr .)
    NEQ             reduce using rule 87 (expr_head -> list_expr .)
    LT              reduce using rule 87 (expr_head -> list_expr .)
    GT              reduce using rule 87 (expr_head -> list_expr .)
    LE              reduce using rule 87 (expr_head -> list_expr .)
    GE              reduce using rule 87 (expr_head -> list_expr .)
    COLON           reduce using rule 87 (expr_head -> list_expr .)
    AGENT           reduce using rule 87 (expr_head -> list_expr .)
    CONNECT         reduce using rule 87 (expr_head -> list_expr .)
    FUN             reduce using rule 87 (expr_head -> list_expr .)
    FOR             reduce using rule 87 (expr_head -> list_expr .)
    IF              reduce using rule 87 (expr_head -> list_expr .)
    WHILE           reduce using rule 87 (expr_head -> list_expr .)
    BREAK           reduce using rule 87 (expr_head -> list_expr .)
    CONTINUE        reduce using rule 87 (expr_head -> list_expr .)
    RETURN          reduce using rule 87 (expr_head -> list_expr .)
    IDENTIFIER      reduce using rule 87 (expr_head -> list_expr .)
    $end            reduce using rule 87 (expr_head -> list_expr .)
    INPUT           reduce using rule 87 (expr_head -> list_expr .)
    OUTPUT          reduce using rule 87 (expr_head -> list_expr .)
    MODEL           reduce using rule 87 (expr_head -> list_expr .)
    CHAT            reduce using rule 87 (expr_head -> list_expr .)
    DEDENT          reduce using rule 87 (expr_head -> list_expr .)
    RBRACKET        reduce using rule 87 (expr_head -> list_expr .)
    COMMA           reduce using rule 87 (expr_head -> list_expr .)
    RPAREN          reduce using rule 87 (expr_head -> list_expr .)
    RBRACE          reduce using rule 87 (expr_head -> list_expr .)


state 40

    (88) expr_head -> record_expr .

    PLUS            reduce using rule 88 (expr_head -> record_expr .)
    MINUS           reduce using rule 88 (expr_head -> record_expr .)
    TIMES           reduce using rule 88 (expr_head -> record_expr .)
    DIVIDE          reduce using rule 88 (expr_head -> record_expr .)
    MOD             reduce using rule 88 (expr_head -> record_expr .)
    EQ              reduce using rule 88 (expr_head -> record_expr .)
    NEQ             reduce using rule 88 (expr_head -> record_expr .)
    LT              reduce using rule 88 (expr_head -> record_expr .)
    GT              reduce using rule 88 (expr_head -> record_expr .)
    LE              reduce using rule 88 (expr_head -> record_expr .)
    GE              reduce using rule 88 (expr_head -> record_expr .)
    COLON           reduce using rule 88 (expr_head -> record_expr .)
    AGENT           reduce using rule 88 (expr_head -> record_expr .)
    CONNECT         reduce using rule 88 (expr_head -> record_expr .)
    FUN             reduce using rule 88 (expr_head -> record_expr .)
    FOR             reduce using rule 88 (expr_head -> record_expr .)
    IF              reduce using rule 88 (expr_head -> record_expr .)
    WHILE           reduce using rule 88 (expr_head -> record_expr .)
    BREAK           reduce using rule 88 (expr_head -> record_expr .)
    CONTINUE        reduce using rule 88 (expr_head -> record_expr .)
    RETURN          reduce using rule 88 (expr_head -> record_expr .)
    IDENTIFIER      reduce using rule 88 (expr_head -> record_expr .)
    $end            reduce using rule 88 (expr_head -> record_expr .)
    INPUT           reduce using rule 88 (expr_head -> record_expr .)
    OUTPUT          reduce using rule 88 (expr_head -> record_expr .)
    MODEL           reduce using rule 88 (expr_head -> record_expr .)
    CHAT            reduce using rule 88 (expr_head -> record_expr .)
    DEDENT          reduce using rule 88 (expr_head -> record_expr .)
    RBRACKET        reduce using rule 88 (expr_head -> record_expr .)
    COMMA           reduce using rule 88 (expr_head -> record_expr .)
    RPAREN          reduce using rule 88 (expr_head -> record_expr .)
    RBRACE          reduce using rule 88 (expr_head -> record_expr .)


state 41

    (89) expr_head -> field_access .

    PLUS            reduce using rule 89 (expr_head -> field_access .)
    MINUS           reduce using rule 89 (expr_head -> field_access .)
    TIMES           reduce using rule 89 (expr_head -> field_access .)
    DIVIDE          reduce using rule 89 (expr_head -> field_access .)
    MOD             reduce using rule 89 (expr_head -> field_access .)
    EQ              reduce using rule 89 (expr_head -> field_access .)
    NEQ             reduce using rule 89 (expr_head -> field_access .)
    LT              reduce using rule 89 (expr_head -> field_access .)
    GT              reduce using rule 89 (expr_head -> field_access .)
    LE              reduce using rule 89 (expr_head -> field_access .)
    GE              reduce using rule 89 (expr_head -> field_access .)
    COLON           reduce using rule 89 (expr_head -> field_access .)
    AGENT           reduce using rule 89 (expr_head -> field_access .)
    CONNECT         reduce using rule 89 (expr_head -> field_access .)
    FUN             reduce using rule 89 (expr_head -> field_access .)
    FOR             reduce using rule 89 (expr_head -> field_access .)
    IF              reduce using rule 89 (expr_head -> field_access .)
    WHILE           reduce using rule 89 (expr_head -> field_access .)
    BREAK           reduce using rule 89 (expr_head -> field_access .)
    CONTINUE        reduce using rule 89 (expr_head -> field_access .)
    RETURN          reduce using rule 89 (expr_head -> field_access .)
    IDENTIFIER      reduce using rule 89 (expr_head -> field_access .)
    $end            reduce using rule 89 (expr_head -> field_access .)
    INPUT           reduce using rule 89 (expr_head -> field_access .)
    OUTPUT          reduce using rule 89 (expr_head -> field_access .)
    MODEL           reduce using rule 89 (expr_head -> field_access .)
    CHAT            reduce using rule 89 (expr_head -> field_access .)
    DEDENT          reduce using rule 89 (expr_head -> field_access .)
    RBRACKET        reduce using rule 89 (expr_head -> field_access .)
    COMMA           reduce using rule 89 (expr_head -> field_access .)
    RPAREN          reduce using rule 89 (expr_head -> field_access .)
    RBRACE          reduce using rule 89 (expr_head -> field_access .)


state 42

    (90) expr_head -> index_access .

    PLUS            reduce using rule 90 (expr_head -> index_access .)
    MINUS           reduce using rule 90 (expr_head -> index_access .)
    TIMES           reduce using rule 90 (expr_head -> index_access .)
    DIVIDE          reduce using rule 90 (expr_head -> index_access .)
    MOD             reduce using rule 90 (expr_head -> index_access .)
    EQ              reduce using rule 90 (expr_head -> index_access .)
    NEQ             reduce using rule 90 (expr_head -> index_access .)
    LT              reduce using rule 90 (expr_head -> index_access .)
    GT              reduce using rule 90 (expr_head -> index_access .)
    LE              reduce using rule 90 (expr_head -> index_access .)
    GE              reduce using rule 90 (expr_head -> index_access .)
    COLON           reduce using rule 90 (expr_head -> index_access .)
    AGENT           reduce using rule 90 (expr_head -> index_access .)
    CONNECT         reduce using rule 90 (expr_head -> index_access .)
    FUN             reduce using rule 90 (expr_head -> index_access .)
    FOR             reduce using rule 90 (expr_head -> index_access .)
    IF              reduce using rule 90 (expr_head -> index_access .)
    WHILE           reduce using rule 90 (expr_head -> index_access .)
    BREAK           reduce using rule 90 (expr_head -> index_access .)
    CONTINUE        reduce using rule 90 (expr_head -> index_access .)
    RETURN          reduce using rule 90 (expr_head -> index_access .)
    IDENTIFIER      reduce using rule 90 (expr_head -> index_access .)
    $end            reduce using rule 90 (expr_head -> index_access .)
    INPUT           reduce using rule 90 (expr_head -> index_access .)
    OUTPUT          reduce using rule 90 (expr_head -> index_access .)
    MODEL           reduce using rule 90 (expr_head -> index_access .)
    CHAT            reduce using rule 90 (expr_head -> index_access .)
    DEDENT          reduce using rule 90 (expr_head -> index_access .)
    RBRACKET        reduce using rule 90 (expr_head -> index_access .)
    COMMA           reduce using rule 90 (expr_head -> index_access .)
    RPAREN          reduce using rule 90 (expr_head -> index_access .)
    RBRACE          reduce using rule 90 (expr_head -> index_access .)


state 43

    (91) expr_head -> func_call .

    PLUS            reduce using rule 91 (expr_head -> func_call .)
    MINUS           reduce using rule 91 (expr_head -> func_call .)
    TIMES           reduce using rule 91 (expr_head -> func_call .)
    DIVIDE          reduce using rule 91 (expr_head -> func_call .)
    MOD             reduce using rule 91 (expr_head -> func_call .)
    EQ              reduce using rule 91 (expr_head -> func_call .)
    NEQ             reduce using rule 91 (expr_head -> func_call .)
    LT              reduce using rule 91 (expr_head -> func_call .)
    GT              reduce using rule 91 (expr_head -> func_call .)
    LE              reduce using rule 91 (expr_head -> func_call .)
    GE              reduce using rule 91 (expr_head -> func_call .)
    COLON           reduce using rule 91 (expr_head -> func_call .)
    AGENT           reduce using rule 91 (expr_head -> func_call .)
    CONNECT         reduce using rule 91 (expr_head -> func_call .)
    FUN             reduce using rule 91 (expr_head -> func_call .)
    FOR             reduce using rule 91 (expr_head -> func_call .)
    IF              reduce using rule 91 (expr_head -> func_call .)
    WHILE           reduce using rule 91 (expr_head -> func_call .)
    BREAK           reduce using rule 91 (expr_head -> func_call .)
    CONTINUE        reduce using rule 91 (expr_head -> func_call .)
    RETURN          reduce using rule 91 (expr_head -> func_call .)
    IDENTIFIER      reduce using rule 91 (expr_head -> func_call .)
    $end            reduce using rule 91 (expr_head -> func_call .)
    INPUT           reduce using rule 91 (expr_head -> func_call .)
    OUTPUT          reduce using rule 91 (expr_head -> func_call .)
    MODEL           reduce using rule 91 (expr_head -> func_call .)
    CHAT            reduce using rule 91 (expr_head -> func_call .)
    DEDENT          reduce using rule 91 (expr_head -> func_call .)
    RBRACKET        reduce using rule 91 (expr_head -> func_call .)
    COMMA           reduce using rule 91 (expr_head -> func_call .)
    RPAREN          reduce using rule 91 (expr_head -> func_call .)
    RBRACE          reduce using rule 91 (expr_head -> func_call .)


state 44

    (93) atom -> identifier .
    (110) field_access -> identifier . DOT identifier
    (109) index_access -> identifier . LBRACKET expr RBRACKET
    (111) func_call -> identifier . LPAREN arg_list RPAREN

    PLUS            reduce using rule 93 (atom -> identifier .)
    MINUS           reduce using rule 93 (atom -> identifier .)
    TIMES           reduce using rule 93 (atom -> identifier .)
    DIVIDE          reduce using rule 93 (atom -> identifier .)
    MOD             reduce using rule 93 (atom -> identifier .)
    EQ              reduce using rule 93 (atom -> identifier .)
    NEQ             reduce using rule 93 (atom -> identifier .)
    LT              reduce using rule 93 (atom -> identifier .)
    GT              reduce using rule 93 (atom -> identifier .)
    LE              reduce using rule 93 (atom -> identifier .)
    GE              reduce using rule 93 (atom -> identifier .)
    COLON           reduce using rule 93 (atom -> identifier .)
    AGENT           reduce using rule 93 (atom -> identifier .)
    CONNECT         reduce using rule 93 (atom -> identifier .)
    FUN             reduce using rule 93 (atom -> identifier .)
    FOR             reduce using rule 93 (atom -> identifier .)
    IF              reduce using rule 93 (atom -> identifier .)
    WHILE           reduce using rule 93 (atom -> identifier .)
    BREAK           reduce using rule 93 (atom -> identifier .)
    CONTINUE        reduce using rule 93 (atom -> identifier .)
    RETURN          reduce using rule 93 (atom -> identifier .)
    IDENTIFIER      reduce using rule 93 (atom -> identifier .)
    $end            reduce using rule 93 (atom -> identifier .)
    INPUT           reduce using rule 93 (atom -> identifier .)
    OUTPUT          reduce using rule 93 (atom -> identifier .)
    MODEL           reduce using rule 93 (atom -> identifier .)
    CHAT            reduce using rule 93 (atom -> identifier .)
    DEDENT          reduce using rule 93 (atom -> identifier .)
    RBRACKET        reduce using rule 93 (atom -> identifier .)
    COMMA           reduce using rule 93 (atom -> identifier .)
    RPAREN          reduce using rule 93 (atom -> identifier .)
    RBRACE          reduce using rule 93 (atom -> identifier .)
    DOT             shift and go to state 31
    LBRACKET        shift and go to state 32
    LPAREN          shift and go to state 73


state 45

    (94) atom -> constant .

    PLUS            reduce using rule 94 (atom -> constant .)
    MINUS           reduce using rule 94 (atom -> constant .)
    TIMES           reduce using rule 94 (atom -> constant .)
    DIVIDE          reduce using rule 94 (atom -> constant .)
    MOD             reduce using rule 94 (atom -> constant .)
    EQ              reduce using rule 94 (atom -> constant .)
    NEQ             reduce using rule 94 (atom -> constant .)
    LT              reduce using rule 94 (atom -> constant .)
    GT              reduce using rule 94 (atom -> constant .)
    LE              reduce using rule 94 (atom -> constant .)
    GE              reduce using rule 94 (atom -> constant .)
    COLON           reduce using rule 94 (atom -> constant .)
    AGENT           reduce using rule 94 (atom -> constant .)
    CONNECT         reduce using rule 94 (atom -> constant .)
    FUN             reduce using rule 94 (atom -> constant .)
    FOR             reduce using rule 94 (atom -> constant .)
    IF              reduce using rule 94 (atom -> constant .)
    WHILE           reduce using rule 94 (atom -> constant .)
    BREAK           reduce using rule 94 (atom -> constant .)
    CONTINUE        reduce using rule 94 (atom -> constant .)
    RETURN          reduce using rule 94 (atom -> constant .)
    IDENTIFIER      reduce using rule 94 (atom -> constant .)
    $end            reduce using rule 94 (atom -> constant .)
    INPUT           reduce using rule 94 (atom -> constant .)
    OUTPUT          reduce using rule 94 (atom -> constant .)
    MODEL           reduce using rule 94 (atom -> constant .)
    CHAT            reduce using rule 94 (atom -> constant .)
    DEDENT          reduce using rule 94 (atom -> constant .)
    RBRACKET        reduce using rule 94 (atom -> constant .)
    COMMA           reduce using rule 94 (atom -> constant .)
    RPAREN          reduce using rule 94 (atom -> constant .)
    RBRACE          reduce using rule 94 (atom -> constant .)


state 46

    (98) list_expr -> LBRACKET . list_elements RBRACKET
    (99) list_elements -> . expr list_elements_tail
    (100) list_elements -> . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    list_elements                  shift and go to state 74
    expr                           shift and go to state 75
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 47

    (103) record_expr -> LBRACE . record_elements RBRACE
    (104) record_elements -> . instance_assign record_elements_tail
    (105) record_elements -> . instance_assign
    (108) instance_assign -> . identifier EQUALS expr
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    record_elements                shift and go to state 76
    instance_assign                shift and go to state 77
    identifier                     shift and go to state 78

state 48

    (96) constant -> STRING .

    PLUS            reduce using rule 96 (constant -> STRING .)
    MINUS           reduce using rule 96 (constant -> STRING .)
    TIMES           reduce using rule 96 (constant -> STRING .)
    DIVIDE          reduce using rule 96 (constant -> STRING .)
    MOD             reduce using rule 96 (constant -> STRING .)
    EQ              reduce using rule 96 (constant -> STRING .)
    NEQ             reduce using rule 96 (constant -> STRING .)
    LT              reduce using rule 96 (constant -> STRING .)
    GT              reduce using rule 96 (constant -> STRING .)
    LE              reduce using rule 96 (constant -> STRING .)
    GE              reduce using rule 96 (constant -> STRING .)
    COLON           reduce using rule 96 (constant -> STRING .)
    AGENT           reduce using rule 96 (constant -> STRING .)
    CONNECT         reduce using rule 96 (constant -> STRING .)
    FUN             reduce using rule 96 (constant -> STRING .)
    FOR             reduce using rule 96 (constant -> STRING .)
    IF              reduce using rule 96 (constant -> STRING .)
    WHILE           reduce using rule 96 (constant -> STRING .)
    BREAK           reduce using rule 96 (constant -> STRING .)
    CONTINUE        reduce using rule 96 (constant -> STRING .)
    RETURN          reduce using rule 96 (constant -> STRING .)
    IDENTIFIER      reduce using rule 96 (constant -> STRING .)
    $end            reduce using rule 96 (constant -> STRING .)
    INPUT           reduce using rule 96 (constant -> STRING .)
    OUTPUT          reduce using rule 96 (constant -> STRING .)
    MODEL           reduce using rule 96 (constant -> STRING .)
    CHAT            reduce using rule 96 (constant -> STRING .)
    DEDENT          reduce using rule 96 (constant -> STRING .)
    RBRACKET        reduce using rule 96 (constant -> STRING .)
    COMMA           reduce using rule 96 (constant -> STRING .)
    RPAREN          reduce using rule 96 (constant -> STRING .)
    RBRACE          reduce using rule 96 (constant -> STRING .)


state 49

    (97) constant -> NUMBER .

    PLUS            reduce using rule 97 (constant -> NUMBER .)
    MINUS           reduce using rule 97 (constant -> NUMBER .)
    TIMES           reduce using rule 97 (constant -> NUMBER .)
    DIVIDE          reduce using rule 97 (constant -> NUMBER .)
    MOD             reduce using rule 97 (constant -> NUMBER .)
    EQ              reduce using rule 97 (constant -> NUMBER .)
    NEQ             reduce using rule 97 (constant -> NUMBER .)
    LT              reduce using rule 97 (constant -> NUMBER .)
    GT              reduce using rule 97 (constant -> NUMBER .)
    LE              reduce using rule 97 (constant -> NUMBER .)
    GE              reduce using rule 97 (constant -> NUMBER .)
    COLON           reduce using rule 97 (constant -> NUMBER .)
    AGENT           reduce using rule 97 (constant -> NUMBER .)
    CONNECT         reduce using rule 97 (constant -> NUMBER .)
    FUN             reduce using rule 97 (constant -> NUMBER .)
    FOR             reduce using rule 97 (constant -> NUMBER .)
    IF              reduce using rule 97 (constant -> NUMBER .)
    WHILE           reduce using rule 97 (constant -> NUMBER .)
    BREAK           reduce using rule 97 (constant -> NUMBER .)
    CONTINUE        reduce using rule 97 (constant -> NUMBER .)
    RETURN          reduce using rule 97 (constant -> NUMBER .)
    IDENTIFIER      reduce using rule 97 (constant -> NUMBER .)
    $end            reduce using rule 97 (constant -> NUMBER .)
    INPUT           reduce using rule 97 (constant -> NUMBER .)
    OUTPUT          reduce using rule 97 (constant -> NUMBER .)
    MODEL           reduce using rule 97 (constant -> NUMBER .)
    CHAT            reduce using rule 97 (constant -> NUMBER .)
    DEDENT          reduce using rule 97 (constant -> NUMBER .)
    RBRACKET        reduce using rule 97 (constant -> NUMBER .)
    COMMA           reduce using rule 97 (constant -> NUMBER .)
    RPAREN          reduce using rule 97 (constant -> NUMBER .)
    RBRACE          reduce using rule 97 (constant -> NUMBER .)


state 50

    (83) while_stmt -> WHILE expr . COLON stmt_block

    COLON           shift and go to state 79


state 51

    (72) assign_stmt -> assign_target COLON . type EQUALS expr
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type                           shift and go to state 80
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 52

    (73) assign_stmt -> assign_target EQUALS . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr                           shift and go to state 95
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 53

    (77) return_stmt -> RETURN expr .

    AGENT           reduce using rule 77 (return_stmt -> RETURN expr .)
    CONNECT         reduce using rule 77 (return_stmt -> RETURN expr .)
    FUN             reduce using rule 77 (return_stmt -> RETURN expr .)
    FOR             reduce using rule 77 (return_stmt -> RETURN expr .)
    IF              reduce using rule 77 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 77 (return_stmt -> RETURN expr .)
    BREAK           reduce using rule 77 (return_stmt -> RETURN expr .)
    CONTINUE        reduce using rule 77 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 77 (return_stmt -> RETURN expr .)
    IDENTIFIER      reduce using rule 77 (return_stmt -> RETURN expr .)
    $end            reduce using rule 77 (return_stmt -> RETURN expr .)
    INPUT           reduce using rule 77 (return_stmt -> RETURN expr .)
    OUTPUT          reduce using rule 77 (return_stmt -> RETURN expr .)
    MODEL           reduce using rule 77 (return_stmt -> RETURN expr .)
    CHAT            reduce using rule 77 (return_stmt -> RETURN expr .)
    DEDENT          reduce using rule 77 (return_stmt -> RETURN expr .)


state 54

    (33) agent_def -> AGENT identifier COLON . INDENT agent_body DEDENT

    INDENT          shift and go to state 96


state 55

    (110) field_access -> identifier DOT identifier .

    COLON           reduce using rule 110 (field_access -> identifier DOT identifier .)
    EQUALS          reduce using rule 110 (field_access -> identifier DOT identifier .)
    PLUS            reduce using rule 110 (field_access -> identifier DOT identifier .)
    MINUS           reduce using rule 110 (field_access -> identifier DOT identifier .)
    TIMES           reduce using rule 110 (field_access -> identifier DOT identifier .)
    DIVIDE          reduce using rule 110 (field_access -> identifier DOT identifier .)
    MOD             reduce using rule 110 (field_access -> identifier DOT identifier .)
    EQ              reduce using rule 110 (field_access -> identifier DOT identifier .)
    NEQ             reduce using rule 110 (field_access -> identifier DOT identifier .)
    LT              reduce using rule 110 (field_access -> identifier DOT identifier .)
    GT              reduce using rule 110 (field_access -> identifier DOT identifier .)
    LE              reduce using rule 110 (field_access -> identifier DOT identifier .)
    GE              reduce using rule 110 (field_access -> identifier DOT identifier .)
    AGENT           reduce using rule 110 (field_access -> identifier DOT identifier .)
    CONNECT         reduce using rule 110 (field_access -> identifier DOT identifier .)
    FUN             reduce using rule 110 (field_access -> identifier DOT identifier .)
    FOR             reduce using rule 110 (field_access -> identifier DOT identifier .)
    IF              reduce using rule 110 (field_access -> identifier DOT identifier .)
    WHILE           reduce using rule 110 (field_access -> identifier DOT identifier .)
    BREAK           reduce using rule 110 (field_access -> identifier DOT identifier .)
    CONTINUE        reduce using rule 110 (field_access -> identifier DOT identifier .)
    RETURN          reduce using rule 110 (field_access -> identifier DOT identifier .)
    IDENTIFIER      reduce using rule 110 (field_access -> identifier DOT identifier .)
    $end            reduce using rule 110 (field_access -> identifier DOT identifier .)
    INPUT           reduce using rule 110 (field_access -> identifier DOT identifier .)
    OUTPUT          reduce using rule 110 (field_access -> identifier DOT identifier .)
    MODEL           reduce using rule 110 (field_access -> identifier DOT identifier .)
    CHAT            reduce using rule 110 (field_access -> identifier DOT identifier .)
    DEDENT          reduce using rule 110 (field_access -> identifier DOT identifier .)
    RBRACKET        reduce using rule 110 (field_access -> identifier DOT identifier .)
    COMMA           reduce using rule 110 (field_access -> identifier DOT identifier .)
    RPAREN          reduce using rule 110 (field_access -> identifier DOT identifier .)
    RBRACE          reduce using rule 110 (field_access -> identifier DOT identifier .)


state 56

    (109) index_access -> identifier LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 97


state 57

    (46) connect_block -> CONNECT COLON INDENT . connection_list DEDENT
    (47) connection_list -> . connection connection_list
    (48) connection_list -> . connection
    (49) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    connection_list                shift and go to state 98
    connection                     shift and go to state 99
    identifier                     shift and go to state 100

state 58

    (55) func_def -> FUN identifier LPAREN . param_list RPAREN ARROW type COLON stmt_block
    (56) func_def -> FUN identifier LPAREN . param_list RPAREN COLON stmt_block
    (57) param_list -> . param_decl param_list_tail
    (58) param_list -> . empty
    (61) param_decl -> . var_decl
    (127) empty -> .
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (95) identifier -> . IDENTIFIER

    RPAREN          reduce using rule 127 (empty -> .)
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 101
    param_list                     shift and go to state 102
    param_decl                     shift and go to state 103
    empty                          shift and go to state 104
    var_decl                       shift and go to state 105

state 59

    (78) for_stmt -> FOR identifier IN . expr COLON stmt_block
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    identifier                     shift and go to state 44
    expr                           shift and go to state 106
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    constant                       shift and go to state 45

state 60

    (81) if_stmt -> IF expr COLON . stmt_block ELSE COLON stmt_block
    (82) if_stmt -> IF expr COLON . stmt_block
    (62) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 108

    stmt_block                     shift and go to state 107

state 61

    (84) expr -> expr_head bin_op . expr_tail
    (92) expr_tail -> . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr_head                      shift and go to state 37
    expr_tail                      shift and go to state 109
    expr                           shift and go to state 110
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 62

    (116) bin_op -> PLUS .

    LBRACKET        reduce using rule 116 (bin_op -> PLUS .)
    LBRACE          reduce using rule 116 (bin_op -> PLUS .)
    IDENTIFIER      reduce using rule 116 (bin_op -> PLUS .)
    STRING          reduce using rule 116 (bin_op -> PLUS .)
    NUMBER          reduce using rule 116 (bin_op -> PLUS .)


state 63

    (117) bin_op -> MINUS .

    LBRACKET        reduce using rule 117 (bin_op -> MINUS .)
    LBRACE          reduce using rule 117 (bin_op -> MINUS .)
    IDENTIFIER      reduce using rule 117 (bin_op -> MINUS .)
    STRING          reduce using rule 117 (bin_op -> MINUS .)
    NUMBER          reduce using rule 117 (bin_op -> MINUS .)


state 64

    (118) bin_op -> TIMES .

    LBRACKET        reduce using rule 118 (bin_op -> TIMES .)
    LBRACE          reduce using rule 118 (bin_op -> TIMES .)
    IDENTIFIER      reduce using rule 118 (bin_op -> TIMES .)
    STRING          reduce using rule 118 (bin_op -> TIMES .)
    NUMBER          reduce using rule 118 (bin_op -> TIMES .)


state 65

    (119) bin_op -> DIVIDE .

    LBRACKET        reduce using rule 119 (bin_op -> DIVIDE .)
    LBRACE          reduce using rule 119 (bin_op -> DIVIDE .)
    IDENTIFIER      reduce using rule 119 (bin_op -> DIVIDE .)
    STRING          reduce using rule 119 (bin_op -> DIVIDE .)
    NUMBER          reduce using rule 119 (bin_op -> DIVIDE .)


state 66

    (120) bin_op -> MOD .

    LBRACKET        reduce using rule 120 (bin_op -> MOD .)
    LBRACE          reduce using rule 120 (bin_op -> MOD .)
    IDENTIFIER      reduce using rule 120 (bin_op -> MOD .)
    STRING          reduce using rule 120 (bin_op -> MOD .)
    NUMBER          reduce using rule 120 (bin_op -> MOD .)


state 67

    (121) bin_op -> EQ .

    LBRACKET        reduce using rule 121 (bin_op -> EQ .)
    LBRACE          reduce using rule 121 (bin_op -> EQ .)
    IDENTIFIER      reduce using rule 121 (bin_op -> EQ .)
    STRING          reduce using rule 121 (bin_op -> EQ .)
    NUMBER          reduce using rule 121 (bin_op -> EQ .)


state 68

    (122) bin_op -> NEQ .

    LBRACKET        reduce using rule 122 (bin_op -> NEQ .)
    LBRACE          reduce using rule 122 (bin_op -> NEQ .)
    IDENTIFIER      reduce using rule 122 (bin_op -> NEQ .)
    STRING          reduce using rule 122 (bin_op -> NEQ .)
    NUMBER          reduce using rule 122 (bin_op -> NEQ .)


state 69

    (123) bin_op -> LT .

    LBRACKET        reduce using rule 123 (bin_op -> LT .)
    LBRACE          reduce using rule 123 (bin_op -> LT .)
    IDENTIFIER      reduce using rule 123 (bin_op -> LT .)
    STRING          reduce using rule 123 (bin_op -> LT .)
    NUMBER          reduce using rule 123 (bin_op -> LT .)


state 70

    (124) bin_op -> GT .

    LBRACKET        reduce using rule 124 (bin_op -> GT .)
    LBRACE          reduce using rule 124 (bin_op -> GT .)
    IDENTIFIER      reduce using rule 124 (bin_op -> GT .)
    STRING          reduce using rule 124 (bin_op -> GT .)
    NUMBER          reduce using rule 124 (bin_op -> GT .)


state 71

    (125) bin_op -> LE .

    LBRACKET        reduce using rule 125 (bin_op -> LE .)
    LBRACE          reduce using rule 125 (bin_op -> LE .)
    IDENTIFIER      reduce using rule 125 (bin_op -> LE .)
    STRING          reduce using rule 125 (bin_op -> LE .)
    NUMBER          reduce using rule 125 (bin_op -> LE .)


state 72

    (126) bin_op -> GE .

    LBRACKET        reduce using rule 126 (bin_op -> GE .)
    LBRACE          reduce using rule 126 (bin_op -> GE .)
    IDENTIFIER      reduce using rule 126 (bin_op -> GE .)
    STRING          reduce using rule 126 (bin_op -> GE .)
    NUMBER          reduce using rule 126 (bin_op -> GE .)


state 73

    (111) func_call -> identifier LPAREN . arg_list RPAREN
    (112) arg_list -> . expr arg_list_tail
    (113) arg_list -> . empty
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (127) empty -> .
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    RPAREN          reduce using rule 127 (empty -> .)
    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    identifier                     shift and go to state 44
    arg_list                       shift and go to state 111
    expr                           shift and go to state 112
    empty                          shift and go to state 113
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    constant                       shift and go to state 45

state 74

    (98) list_expr -> LBRACKET list_elements . RBRACKET

    RBRACKET        shift and go to state 114


state 75

    (99) list_elements -> expr . list_elements_tail
    (100) list_elements -> expr .
    (101) list_elements_tail -> . COMMA expr list_elements_tail
    (102) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 100 (list_elements -> expr .)
    COMMA           shift and go to state 116

    list_elements_tail             shift and go to state 115

state 76

    (103) record_expr -> LBRACE record_elements . RBRACE

    RBRACE          shift and go to state 117


state 77

    (104) record_elements -> instance_assign . record_elements_tail
    (105) record_elements -> instance_assign .
    (106) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (107) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 105 (record_elements -> instance_assign .)
    COMMA           shift and go to state 119

    record_elements_tail           shift and go to state 118

state 78

    (108) instance_assign -> identifier . EQUALS expr

    EQUALS          shift and go to state 120


state 79

    (83) while_stmt -> WHILE expr COLON . stmt_block
    (62) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 108

    stmt_block                     shift and go to state 121

state 80

    (72) assign_stmt -> assign_target COLON type . EQUALS expr

    EQUALS          shift and go to state 122


state 81

    (14) type -> base_type .

    EQUALS          reduce using rule 14 (type -> base_type .)
    COMMA           reduce using rule 14 (type -> base_type .)
    RPAREN          reduce using rule 14 (type -> base_type .)
    RBRACKET        reduce using rule 14 (type -> base_type .)
    INDENT          reduce using rule 14 (type -> base_type .)
    IDENTIFIER      reduce using rule 14 (type -> base_type .)
    DEDENT          reduce using rule 14 (type -> base_type .)
    COLON           reduce using rule 14 (type -> base_type .)
    RBRACE          reduce using rule 14 (type -> base_type .)


state 82

    (15) type -> list_type .

    EQUALS          reduce using rule 15 (type -> list_type .)
    COMMA           reduce using rule 15 (type -> list_type .)
    RPAREN          reduce using rule 15 (type -> list_type .)
    RBRACKET        reduce using rule 15 (type -> list_type .)
    INDENT          reduce using rule 15 (type -> list_type .)
    IDENTIFIER      reduce using rule 15 (type -> list_type .)
    DEDENT          reduce using rule 15 (type -> list_type .)
    COLON           reduce using rule 15 (type -> list_type .)
    RBRACE          reduce using rule 15 (type -> list_type .)


state 83

    (16) type -> record_type .

    EQUALS          reduce using rule 16 (type -> record_type .)
    COMMA           reduce using rule 16 (type -> record_type .)
    RPAREN          reduce using rule 16 (type -> record_type .)
    RBRACKET        reduce using rule 16 (type -> record_type .)
    INDENT          reduce using rule 16 (type -> record_type .)
    IDENTIFIER      reduce using rule 16 (type -> record_type .)
    DEDENT          reduce using rule 16 (type -> record_type .)
    COLON           reduce using rule 16 (type -> record_type .)
    RBRACE          reduce using rule 16 (type -> record_type .)


state 84

    (17) type -> func_ret_type .

    EQUALS          reduce using rule 17 (type -> func_ret_type .)
    COMMA           reduce using rule 17 (type -> func_ret_type .)
    RPAREN          reduce using rule 17 (type -> func_ret_type .)
    RBRACKET        reduce using rule 17 (type -> func_ret_type .)
    INDENT          reduce using rule 17 (type -> func_ret_type .)
    IDENTIFIER      reduce using rule 17 (type -> func_ret_type .)
    DEDENT          reduce using rule 17 (type -> func_ret_type .)
    COLON           reduce using rule 17 (type -> func_ret_type .)
    RBRACE          reduce using rule 17 (type -> func_ret_type .)


state 85

    (18) type -> union_type .

    EQUALS          reduce using rule 18 (type -> union_type .)
    COMMA           reduce using rule 18 (type -> union_type .)
    RPAREN          reduce using rule 18 (type -> union_type .)
    RBRACKET        reduce using rule 18 (type -> union_type .)
    INDENT          reduce using rule 18 (type -> union_type .)
    IDENTIFIER      reduce using rule 18 (type -> union_type .)
    DEDENT          reduce using rule 18 (type -> union_type .)
    COLON           reduce using rule 18 (type -> union_type .)
    RBRACE          reduce using rule 18 (type -> union_type .)


state 86

    (19) base_type -> TYPE_STR .

    EQUALS          reduce using rule 19 (base_type -> TYPE_STR .)
    COMMA           reduce using rule 19 (base_type -> TYPE_STR .)
    RPAREN          reduce using rule 19 (base_type -> TYPE_STR .)
    RBRACKET        reduce using rule 19 (base_type -> TYPE_STR .)
    INDENT          reduce using rule 19 (base_type -> TYPE_STR .)
    IDENTIFIER      reduce using rule 19 (base_type -> TYPE_STR .)
    DEDENT          reduce using rule 19 (base_type -> TYPE_STR .)
    COLON           reduce using rule 19 (base_type -> TYPE_STR .)
    RBRACE          reduce using rule 19 (base_type -> TYPE_STR .)


state 87

    (20) base_type -> TYPE_INT .

    EQUALS          reduce using rule 20 (base_type -> TYPE_INT .)
    COMMA           reduce using rule 20 (base_type -> TYPE_INT .)
    RPAREN          reduce using rule 20 (base_type -> TYPE_INT .)
    RBRACKET        reduce using rule 20 (base_type -> TYPE_INT .)
    INDENT          reduce using rule 20 (base_type -> TYPE_INT .)
    IDENTIFIER      reduce using rule 20 (base_type -> TYPE_INT .)
    DEDENT          reduce using rule 20 (base_type -> TYPE_INT .)
    COLON           reduce using rule 20 (base_type -> TYPE_INT .)
    RBRACE          reduce using rule 20 (base_type -> TYPE_INT .)


state 88

    (21) base_type -> TYPE_FLOAT .

    EQUALS          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RBRACKET        reduce using rule 21 (base_type -> TYPE_FLOAT .)
    INDENT          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 21 (base_type -> TYPE_FLOAT .)
    DEDENT          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    COLON           reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RBRACE          reduce using rule 21 (base_type -> TYPE_FLOAT .)


state 89

    (22) base_type -> TYPE_BOOL .

    EQUALS          reduce using rule 22 (base_type -> TYPE_BOOL .)
    COMMA           reduce using rule 22 (base_type -> TYPE_BOOL .)
    RPAREN          reduce using rule 22 (base_type -> TYPE_BOOL .)
    RBRACKET        reduce using rule 22 (base_type -> TYPE_BOOL .)
    INDENT          reduce using rule 22 (base_type -> TYPE_BOOL .)
    IDENTIFIER      reduce using rule 22 (base_type -> TYPE_BOOL .)
    DEDENT          reduce using rule 22 (base_type -> TYPE_BOOL .)
    COLON           reduce using rule 22 (base_type -> TYPE_BOOL .)
    RBRACE          reduce using rule 22 (base_type -> TYPE_BOOL .)


state 90

    (23) base_type -> TYPE_UNIT .

    EQUALS          reduce using rule 23 (base_type -> TYPE_UNIT .)
    COMMA           reduce using rule 23 (base_type -> TYPE_UNIT .)
    RPAREN          reduce using rule 23 (base_type -> TYPE_UNIT .)
    RBRACKET        reduce using rule 23 (base_type -> TYPE_UNIT .)
    INDENT          reduce using rule 23 (base_type -> TYPE_UNIT .)
    IDENTIFIER      reduce using rule 23 (base_type -> TYPE_UNIT .)
    DEDENT          reduce using rule 23 (base_type -> TYPE_UNIT .)
    COLON           reduce using rule 23 (base_type -> TYPE_UNIT .)
    RBRACE          reduce using rule 23 (base_type -> TYPE_UNIT .)


state 91

    (28) list_type -> TYPE_LIST . LBRACKET type RBRACKET

    LBRACKET        shift and go to state 123


state 92

    (29) record_type -> TYPE_RECORD . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 124


state 93

    (25) func_ret_type -> LPAREN . type_list RPAREN
    (26) type_list -> . type
    (27) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type_list                      shift and go to state 125
    type                           shift and go to state 126
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 94

    (24) union_type -> TYPE_UNION . LBRACKET type_list RBRACKET

    LBRACKET        shift and go to state 127


state 95

    (73) assign_stmt -> assign_target EQUALS expr .

    AGENT           reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    CONNECT         reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    FUN             reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    FOR             reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    IF              reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    WHILE           reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    BREAK           reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    CONTINUE        reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    RETURN          reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    IDENTIFIER      reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    $end            reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    INPUT           reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    OUTPUT          reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    MODEL           reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    CHAT            reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)
    DEDENT          reduce using rule 73 (assign_stmt -> assign_target EQUALS expr .)


state 96

    (33) agent_def -> AGENT identifier COLON INDENT . agent_body DEDENT
    (34) agent_body -> . agent_body_item agent_body
    (35) agent_body -> . agent_body_item
    (36) agent_body_item -> . input_block
    (37) agent_body_item -> . output_block
    (38) agent_body_item -> . model_block
    (39) agent_body_item -> . statement
    (40) agent_body_item -> . chat_block
    (41) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (42) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (43) model_block -> . MODEL COLON constant
    (65) statement -> . for_stmt
    (66) statement -> . if_stmt
    (67) statement -> . while_stmt
    (68) statement -> . assign_stmt
    (69) statement -> . break_stmt
    (70) statement -> . continue_stmt
    (71) statement -> . return_stmt
    (44) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (45) chat_block -> . CHAT COLON TRIPLE_STRING
    (78) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (81) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> . IF expr COLON stmt_block
    (83) while_stmt -> . WHILE expr COLON stmt_block
    (72) assign_stmt -> . assign_target COLON type EQUALS expr
    (73) assign_stmt -> . assign_target EQUALS expr
    (79) break_stmt -> . BREAK
    (80) continue_stmt -> . CONTINUE
    (77) return_stmt -> . RETURN expr
    (74) assign_target -> . identifier
    (75) assign_target -> . field_access
    (76) assign_target -> . index_access
    (95) identifier -> . IDENTIFIER
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET

    INPUT           shift and go to state 135
    OUTPUT          shift and go to state 136
    MODEL           shift and go to state 137
    CHAT            shift and go to state 138
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 16
    agent_body                     shift and go to state 128
    agent_body_item                shift and go to state 129
    input_block                    shift and go to state 130
    output_block                   shift and go to state 131
    model_block                    shift and go to state 132
    statement                      shift and go to state 133
    chat_block                     shift and go to state 134
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 97

    (109) index_access -> identifier LBRACKET expr RBRACKET .

    COLON           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    MOD             reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    EQ              reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    NEQ             reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    LT              reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    GT              reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    LE              reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    GE              reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    AGENT           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    CONNECT         reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    FUN             reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    FOR             reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    IF              reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    WHILE           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    BREAK           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    CONTINUE        reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    RETURN          reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    IDENTIFIER      reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    $end            reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    INPUT           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    OUTPUT          reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    MODEL           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    CHAT            reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    DEDENT          reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 109 (index_access -> identifier LBRACKET expr RBRACKET .)


state 98

    (46) connect_block -> CONNECT COLON INDENT connection_list . DEDENT

    DEDENT          shift and go to state 139


state 99

    (47) connection_list -> connection . connection_list
    (48) connection_list -> connection .
    (47) connection_list -> . connection connection_list
    (48) connection_list -> . connection
    (49) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (95) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 48 (connection_list -> connection .)
    IDENTIFIER      shift and go to state 28

    connection                     shift and go to state 99
    connection_list                shift and go to state 140
    identifier                     shift and go to state 100

state 100

    (49) connection -> identifier . COLON type INDENT agent_ref ARROW agent_ref DEDENT

    COLON           shift and go to state 141


state 101

    (10) var_decl -> identifier . COLON type EQUALS expr
    (11) var_decl -> identifier . COLON type
    (12) var_decl -> identifier . EQUALS expr
    (13) var_decl -> identifier .

    COLON           shift and go to state 142
    EQUALS          shift and go to state 143
    COMMA           reduce using rule 13 (var_decl -> identifier .)
    RPAREN          reduce using rule 13 (var_decl -> identifier .)
    IDENTIFIER      reduce using rule 13 (var_decl -> identifier .)
    DEDENT          reduce using rule 13 (var_decl -> identifier .)


state 102

    (55) func_def -> FUN identifier LPAREN param_list . RPAREN ARROW type COLON stmt_block
    (56) func_def -> FUN identifier LPAREN param_list . RPAREN COLON stmt_block

    RPAREN          shift and go to state 144


state 103

    (57) param_list -> param_decl . param_list_tail
    (59) param_list_tail -> . COMMA param_decl param_list_tail
    (60) param_list_tail -> . empty
    (127) empty -> .

    COMMA           shift and go to state 146
    RPAREN          reduce using rule 127 (empty -> .)

    param_list_tail                shift and go to state 145
    empty                          shift and go to state 147

state 104

    (58) param_list -> empty .

    RPAREN          reduce using rule 58 (param_list -> empty .)


state 105

    (61) param_decl -> var_decl .

    COMMA           reduce using rule 61 (param_decl -> var_decl .)
    RPAREN          reduce using rule 61 (param_decl -> var_decl .)


state 106

    (78) for_stmt -> FOR identifier IN expr . COLON stmt_block

    COLON           shift and go to state 148


state 107

    (81) if_stmt -> IF expr COLON stmt_block . ELSE COLON stmt_block
    (82) if_stmt -> IF expr COLON stmt_block .

    ELSE            shift and go to state 149
    AGENT           reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    CONNECT         reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    FUN             reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    FOR             reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    IF              reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    WHILE           reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    BREAK           reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    CONTINUE        reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    RETURN          reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    $end            reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    INPUT           reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    OUTPUT          reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    MODEL           reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    CHAT            reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)
    DEDENT          reduce using rule 82 (if_stmt -> IF expr COLON stmt_block .)


state 108

    (62) stmt_block -> INDENT . statement_list DEDENT
    (63) statement_list -> . statement statement_list
    (64) statement_list -> . statement
    (65) statement -> . for_stmt
    (66) statement -> . if_stmt
    (67) statement -> . while_stmt
    (68) statement -> . assign_stmt
    (69) statement -> . break_stmt
    (70) statement -> . continue_stmt
    (71) statement -> . return_stmt
    (78) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (81) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> . IF expr COLON stmt_block
    (83) while_stmt -> . WHILE expr COLON stmt_block
    (72) assign_stmt -> . assign_target COLON type EQUALS expr
    (73) assign_stmt -> . assign_target EQUALS expr
    (79) break_stmt -> . BREAK
    (80) continue_stmt -> . CONTINUE
    (77) return_stmt -> . RETURN expr
    (74) assign_target -> . identifier
    (75) assign_target -> . field_access
    (76) assign_target -> . index_access
    (95) identifier -> . IDENTIFIER
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET

    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    statement_list                 shift and go to state 150
    statement                      shift and go to state 151
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 109

    (84) expr -> expr_head bin_op expr_tail .

    COLON           reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    AGENT           reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    CONNECT         reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    FUN             reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    FOR             reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    IF              reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    WHILE           reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    BREAK           reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    CONTINUE        reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    RETURN          reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    IDENTIFIER      reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    $end            reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    INPUT           reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    OUTPUT          reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    MODEL           reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    CHAT            reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    DEDENT          reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    RBRACKET        reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    COMMA           reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    RPAREN          reduce using rule 84 (expr -> expr_head bin_op expr_tail .)
    RBRACE          reduce using rule 84 (expr -> expr_head bin_op expr_tail .)


state 110

    (92) expr_tail -> expr .

    COLON           reduce using rule 92 (expr_tail -> expr .)
    AGENT           reduce using rule 92 (expr_tail -> expr .)
    CONNECT         reduce using rule 92 (expr_tail -> expr .)
    FUN             reduce using rule 92 (expr_tail -> expr .)
    FOR             reduce using rule 92 (expr_tail -> expr .)
    IF              reduce using rule 92 (expr_tail -> expr .)
    WHILE           reduce using rule 92 (expr_tail -> expr .)
    BREAK           reduce using rule 92 (expr_tail -> expr .)
    CONTINUE        reduce using rule 92 (expr_tail -> expr .)
    RETURN          reduce using rule 92 (expr_tail -> expr .)
    IDENTIFIER      reduce using rule 92 (expr_tail -> expr .)
    $end            reduce using rule 92 (expr_tail -> expr .)
    INPUT           reduce using rule 92 (expr_tail -> expr .)
    OUTPUT          reduce using rule 92 (expr_tail -> expr .)
    MODEL           reduce using rule 92 (expr_tail -> expr .)
    CHAT            reduce using rule 92 (expr_tail -> expr .)
    DEDENT          reduce using rule 92 (expr_tail -> expr .)
    RBRACKET        reduce using rule 92 (expr_tail -> expr .)
    COMMA           reduce using rule 92 (expr_tail -> expr .)
    RPAREN          reduce using rule 92 (expr_tail -> expr .)
    RBRACE          reduce using rule 92 (expr_tail -> expr .)


state 111

    (111) func_call -> identifier LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 152


state 112

    (112) arg_list -> expr . arg_list_tail
    (114) arg_list_tail -> . COMMA expr arg_list_tail
    (115) arg_list_tail -> . empty
    (127) empty -> .

    COMMA           shift and go to state 154
    RPAREN          reduce using rule 127 (empty -> .)

    arg_list_tail                  shift and go to state 153
    empty                          shift and go to state 155

state 113

    (113) arg_list -> empty .

    RPAREN          reduce using rule 113 (arg_list -> empty .)


state 114

    (98) list_expr -> LBRACKET list_elements RBRACKET .

    PLUS            reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    MINUS           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    TIMES           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    DIVIDE          reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    MOD             reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    EQ              reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    NEQ             reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    LT              reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    GT              reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    LE              reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    GE              reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    COLON           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    AGENT           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONNECT         reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    FUN             reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    FOR             reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    IF              reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    WHILE           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    BREAK           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONTINUE        reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    RETURN          reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    IDENTIFIER      reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    $end            reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    INPUT           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    OUTPUT          reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    MODEL           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    CHAT            reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    DEDENT          reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACKET        reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    COMMA           reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    RPAREN          reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACE          reduce using rule 98 (list_expr -> LBRACKET list_elements RBRACKET .)


state 115

    (99) list_elements -> expr list_elements_tail .

    RBRACKET        reduce using rule 99 (list_elements -> expr list_elements_tail .)


state 116

    (101) list_elements_tail -> COMMA . expr list_elements_tail
    (102) list_elements_tail -> COMMA . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr                           shift and go to state 156
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 117

    (103) record_expr -> LBRACE record_elements RBRACE .

    PLUS            reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    MINUS           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    TIMES           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    DIVIDE          reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    MOD             reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    EQ              reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    NEQ             reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    LT              reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    GT              reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    LE              reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    GE              reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    COLON           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    AGENT           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    CONNECT         reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    FUN             reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    FOR             reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    IF              reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    WHILE           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    BREAK           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    CONTINUE        reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    RETURN          reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    IDENTIFIER      reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    $end            reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    INPUT           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    OUTPUT          reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    MODEL           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    CHAT            reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    DEDENT          reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACKET        reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    COMMA           reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    RPAREN          reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACE          reduce using rule 103 (record_expr -> LBRACE record_elements RBRACE .)


state 118

    (104) record_elements -> instance_assign record_elements_tail .

    RBRACE          reduce using rule 104 (record_elements -> instance_assign record_elements_tail .)


state 119

    (106) record_elements_tail -> COMMA . instance_assign record_elements_tail
    (107) record_elements_tail -> COMMA . instance_assign
    (108) instance_assign -> . identifier EQUALS expr
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    instance_assign                shift and go to state 157
    identifier                     shift and go to state 78

state 120

    (108) instance_assign -> identifier EQUALS . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    identifier                     shift and go to state 44
    expr                           shift and go to state 158
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    constant                       shift and go to state 45

state 121

    (83) while_stmt -> WHILE expr COLON stmt_block .

    AGENT           reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    CONNECT         reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    FUN             reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    FOR             reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    IF              reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    WHILE           reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    BREAK           reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    CONTINUE        reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    RETURN          reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    $end            reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    INPUT           reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    OUTPUT          reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    MODEL           reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    CHAT            reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)
    DEDENT          reduce using rule 83 (while_stmt -> WHILE expr COLON stmt_block .)


state 122

    (72) assign_stmt -> assign_target COLON type EQUALS . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr                           shift and go to state 159
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 123

    (28) list_type -> TYPE_LIST LBRACKET . type RBRACKET
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type                           shift and go to state 160
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 124

    (29) record_type -> TYPE_RECORD LBRACE . field_decl_list RBRACE
    (30) field_decl_list -> . field_decl COMMA field_decl_list
    (31) field_decl_list -> . field_decl
    (32) field_decl -> . identifier COLON type
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl_list                shift and go to state 161
    field_decl                     shift and go to state 162
    identifier                     shift and go to state 163

state 125

    (25) func_ret_type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 164


state 126

    (26) type_list -> type .
    (27) type_list -> type . COMMA type_list

    RPAREN          reduce using rule 26 (type_list -> type .)
    RBRACKET        reduce using rule 26 (type_list -> type .)
    COMMA           shift and go to state 165


state 127

    (24) union_type -> TYPE_UNION LBRACKET . type_list RBRACKET
    (26) type_list -> . type
    (27) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type_list                      shift and go to state 166
    type                           shift and go to state 126
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 128

    (33) agent_def -> AGENT identifier COLON INDENT agent_body . DEDENT

    DEDENT          shift and go to state 167


state 129

    (34) agent_body -> agent_body_item . agent_body
    (35) agent_body -> agent_body_item .
    (34) agent_body -> . agent_body_item agent_body
    (35) agent_body -> . agent_body_item
    (36) agent_body_item -> . input_block
    (37) agent_body_item -> . output_block
    (38) agent_body_item -> . model_block
    (39) agent_body_item -> . statement
    (40) agent_body_item -> . chat_block
    (41) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (42) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (43) model_block -> . MODEL COLON constant
    (65) statement -> . for_stmt
    (66) statement -> . if_stmt
    (67) statement -> . while_stmt
    (68) statement -> . assign_stmt
    (69) statement -> . break_stmt
    (70) statement -> . continue_stmt
    (71) statement -> . return_stmt
    (44) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (45) chat_block -> . CHAT COLON TRIPLE_STRING
    (78) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (81) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> . IF expr COLON stmt_block
    (83) while_stmt -> . WHILE expr COLON stmt_block
    (72) assign_stmt -> . assign_target COLON type EQUALS expr
    (73) assign_stmt -> . assign_target EQUALS expr
    (79) break_stmt -> . BREAK
    (80) continue_stmt -> . CONTINUE
    (77) return_stmt -> . RETURN expr
    (74) assign_target -> . identifier
    (75) assign_target -> . field_access
    (76) assign_target -> . index_access
    (95) identifier -> . IDENTIFIER
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 35 (agent_body -> agent_body_item .)
    INPUT           shift and go to state 135
    OUTPUT          shift and go to state 136
    MODEL           shift and go to state 137
    CHAT            shift and go to state 138
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    agent_body_item                shift and go to state 129
    agent_body                     shift and go to state 168
    input_block                    shift and go to state 130
    output_block                   shift and go to state 131
    model_block                    shift and go to state 132
    statement                      shift and go to state 133
    chat_block                     shift and go to state 134
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 130

    (36) agent_body_item -> input_block .

    INPUT           reduce using rule 36 (agent_body_item -> input_block .)
    OUTPUT          reduce using rule 36 (agent_body_item -> input_block .)
    MODEL           reduce using rule 36 (agent_body_item -> input_block .)
    CHAT            reduce using rule 36 (agent_body_item -> input_block .)
    FOR             reduce using rule 36 (agent_body_item -> input_block .)
    IF              reduce using rule 36 (agent_body_item -> input_block .)
    WHILE           reduce using rule 36 (agent_body_item -> input_block .)
    BREAK           reduce using rule 36 (agent_body_item -> input_block .)
    CONTINUE        reduce using rule 36 (agent_body_item -> input_block .)
    RETURN          reduce using rule 36 (agent_body_item -> input_block .)
    IDENTIFIER      reduce using rule 36 (agent_body_item -> input_block .)
    DEDENT          reduce using rule 36 (agent_body_item -> input_block .)


state 131

    (37) agent_body_item -> output_block .

    INPUT           reduce using rule 37 (agent_body_item -> output_block .)
    OUTPUT          reduce using rule 37 (agent_body_item -> output_block .)
    MODEL           reduce using rule 37 (agent_body_item -> output_block .)
    CHAT            reduce using rule 37 (agent_body_item -> output_block .)
    FOR             reduce using rule 37 (agent_body_item -> output_block .)
    IF              reduce using rule 37 (agent_body_item -> output_block .)
    WHILE           reduce using rule 37 (agent_body_item -> output_block .)
    BREAK           reduce using rule 37 (agent_body_item -> output_block .)
    CONTINUE        reduce using rule 37 (agent_body_item -> output_block .)
    RETURN          reduce using rule 37 (agent_body_item -> output_block .)
    IDENTIFIER      reduce using rule 37 (agent_body_item -> output_block .)
    DEDENT          reduce using rule 37 (agent_body_item -> output_block .)


state 132

    (38) agent_body_item -> model_block .

    INPUT           reduce using rule 38 (agent_body_item -> model_block .)
    OUTPUT          reduce using rule 38 (agent_body_item -> model_block .)
    MODEL           reduce using rule 38 (agent_body_item -> model_block .)
    CHAT            reduce using rule 38 (agent_body_item -> model_block .)
    FOR             reduce using rule 38 (agent_body_item -> model_block .)
    IF              reduce using rule 38 (agent_body_item -> model_block .)
    WHILE           reduce using rule 38 (agent_body_item -> model_block .)
    BREAK           reduce using rule 38 (agent_body_item -> model_block .)
    CONTINUE        reduce using rule 38 (agent_body_item -> model_block .)
    RETURN          reduce using rule 38 (agent_body_item -> model_block .)
    IDENTIFIER      reduce using rule 38 (agent_body_item -> model_block .)
    DEDENT          reduce using rule 38 (agent_body_item -> model_block .)


state 133

    (39) agent_body_item -> statement .

    INPUT           reduce using rule 39 (agent_body_item -> statement .)
    OUTPUT          reduce using rule 39 (agent_body_item -> statement .)
    MODEL           reduce using rule 39 (agent_body_item -> statement .)
    CHAT            reduce using rule 39 (agent_body_item -> statement .)
    FOR             reduce using rule 39 (agent_body_item -> statement .)
    IF              reduce using rule 39 (agent_body_item -> statement .)
    WHILE           reduce using rule 39 (agent_body_item -> statement .)
    BREAK           reduce using rule 39 (agent_body_item -> statement .)
    CONTINUE        reduce using rule 39 (agent_body_item -> statement .)
    RETURN          reduce using rule 39 (agent_body_item -> statement .)
    IDENTIFIER      reduce using rule 39 (agent_body_item -> statement .)
    DEDENT          reduce using rule 39 (agent_body_item -> statement .)


state 134

    (40) agent_body_item -> chat_block .

    INPUT           reduce using rule 40 (agent_body_item -> chat_block .)
    OUTPUT          reduce using rule 40 (agent_body_item -> chat_block .)
    MODEL           reduce using rule 40 (agent_body_item -> chat_block .)
    CHAT            reduce using rule 40 (agent_body_item -> chat_block .)
    FOR             reduce using rule 40 (agent_body_item -> chat_block .)
    IF              reduce using rule 40 (agent_body_item -> chat_block .)
    WHILE           reduce using rule 40 (agent_body_item -> chat_block .)
    BREAK           reduce using rule 40 (agent_body_item -> chat_block .)
    CONTINUE        reduce using rule 40 (agent_body_item -> chat_block .)
    RETURN          reduce using rule 40 (agent_body_item -> chat_block .)
    IDENTIFIER      reduce using rule 40 (agent_body_item -> chat_block .)
    DEDENT          reduce using rule 40 (agent_body_item -> chat_block .)


state 135

    (41) input_block -> INPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 169


state 136

    (42) output_block -> OUTPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 170


state 137

    (43) model_block -> MODEL . COLON constant

    COLON           shift and go to state 171


state 138

    (44) chat_block -> CHAT . identifier COLON TRIPLE_STRING
    (45) chat_block -> CHAT . COLON TRIPLE_STRING
    (95) identifier -> . IDENTIFIER

    COLON           shift and go to state 173
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 172

state 139

    (46) connect_block -> CONNECT COLON INDENT connection_list DEDENT .

    AGENT           reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONNECT         reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FUN             reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FOR             reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IF              reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    WHILE           reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    BREAK           reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONTINUE        reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    RETURN          reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IDENTIFIER      reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    $end            reduce using rule 46 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)


state 140

    (47) connection_list -> connection connection_list .

    DEDENT          reduce using rule 47 (connection_list -> connection connection_list .)


state 141

    (49) connection -> identifier COLON . type INDENT agent_ref ARROW agent_ref DEDENT
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type                           shift and go to state 174
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 142

    (10) var_decl -> identifier COLON . type EQUALS expr
    (11) var_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type                           shift and go to state 175
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 143

    (12) var_decl -> identifier EQUALS . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    identifier                     shift and go to state 44
    expr                           shift and go to state 176
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    constant                       shift and go to state 45

state 144

    (55) func_def -> FUN identifier LPAREN param_list RPAREN . ARROW type COLON stmt_block
    (56) func_def -> FUN identifier LPAREN param_list RPAREN . COLON stmt_block

    ARROW           shift and go to state 177
    COLON           shift and go to state 178


state 145

    (57) param_list -> param_decl param_list_tail .

    RPAREN          reduce using rule 57 (param_list -> param_decl param_list_tail .)


state 146

    (59) param_list_tail -> COMMA . param_decl param_list_tail
    (61) param_decl -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    param_decl                     shift and go to state 179
    var_decl                       shift and go to state 105
    identifier                     shift and go to state 101

state 147

    (60) param_list_tail -> empty .

    RPAREN          reduce using rule 60 (param_list_tail -> empty .)


state 148

    (78) for_stmt -> FOR identifier IN expr COLON . stmt_block
    (62) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 108

    stmt_block                     shift and go to state 180

state 149

    (81) if_stmt -> IF expr COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 181


state 150

    (62) stmt_block -> INDENT statement_list . DEDENT

    DEDENT          shift and go to state 182


state 151

    (63) statement_list -> statement . statement_list
    (64) statement_list -> statement .
    (63) statement_list -> . statement statement_list
    (64) statement_list -> . statement
    (65) statement -> . for_stmt
    (66) statement -> . if_stmt
    (67) statement -> . while_stmt
    (68) statement -> . assign_stmt
    (69) statement -> . break_stmt
    (70) statement -> . continue_stmt
    (71) statement -> . return_stmt
    (78) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (81) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (82) if_stmt -> . IF expr COLON stmt_block
    (83) while_stmt -> . WHILE expr COLON stmt_block
    (72) assign_stmt -> . assign_target COLON type EQUALS expr
    (73) assign_stmt -> . assign_target EQUALS expr
    (79) break_stmt -> . BREAK
    (80) continue_stmt -> . CONTINUE
    (77) return_stmt -> . RETURN expr
    (74) assign_target -> . identifier
    (75) assign_target -> . field_access
    (76) assign_target -> . index_access
    (95) identifier -> . IDENTIFIER
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 64 (statement_list -> statement .)
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    statement                      shift and go to state 151
    statement_list                 shift and go to state 183
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 152

    (111) func_call -> identifier LPAREN arg_list RPAREN .

    PLUS            reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    MOD             reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    EQ              reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    LT              reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    GT              reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    LE              reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    GE              reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    COLON           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    AGENT           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONNECT         reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    FUN             reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    FOR             reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    IF              reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    $end            reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    INPUT           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    OUTPUT          reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    MODEL           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    CHAT            reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    DEDENT          reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 111 (func_call -> identifier LPAREN arg_list RPAREN .)


state 153

    (112) arg_list -> expr arg_list_tail .

    RPAREN          reduce using rule 112 (arg_list -> expr arg_list_tail .)


state 154

    (114) arg_list_tail -> COMMA . expr arg_list_tail
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    expr                           shift and go to state 184
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    identifier                     shift and go to state 44
    constant                       shift and go to state 45

state 155

    (115) arg_list_tail -> empty .

    RPAREN          reduce using rule 115 (arg_list_tail -> empty .)


state 156

    (101) list_elements_tail -> COMMA expr . list_elements_tail
    (102) list_elements_tail -> COMMA expr .
    (101) list_elements_tail -> . COMMA expr list_elements_tail
    (102) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 102 (list_elements_tail -> COMMA expr .)
    COMMA           shift and go to state 116

    list_elements_tail             shift and go to state 185

state 157

    (106) record_elements_tail -> COMMA instance_assign . record_elements_tail
    (107) record_elements_tail -> COMMA instance_assign .
    (106) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (107) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 107 (record_elements_tail -> COMMA instance_assign .)
    COMMA           shift and go to state 119

    record_elements_tail           shift and go to state 186

state 158

    (108) instance_assign -> identifier EQUALS expr .

    COMMA           reduce using rule 108 (instance_assign -> identifier EQUALS expr .)
    RBRACE          reduce using rule 108 (instance_assign -> identifier EQUALS expr .)


state 159

    (72) assign_stmt -> assign_target COLON type EQUALS expr .

    AGENT           reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONNECT         reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FUN             reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FOR             reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IF              reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    WHILE           reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    BREAK           reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONTINUE        reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    RETURN          reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    $end            reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    INPUT           reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    OUTPUT          reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    MODEL           reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CHAT            reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)
    DEDENT          reduce using rule 72 (assign_stmt -> assign_target COLON type EQUALS expr .)


state 160

    (28) list_type -> TYPE_LIST LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 187


state 161

    (29) record_type -> TYPE_RECORD LBRACE field_decl_list . RBRACE

    RBRACE          shift and go to state 188


state 162

    (30) field_decl_list -> field_decl . COMMA field_decl_list
    (31) field_decl_list -> field_decl .

    COMMA           shift and go to state 189
    RBRACE          reduce using rule 31 (field_decl_list -> field_decl .)


state 163

    (32) field_decl -> identifier . COLON type

    COLON           shift and go to state 190


state 164

    (25) func_ret_type -> LPAREN type_list RPAREN .

    EQUALS          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    COMMA           reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    RPAREN          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACKET        reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    INDENT          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    IDENTIFIER      reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    DEDENT          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    COLON           reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACE          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)


state 165

    (27) type_list -> type COMMA . type_list
    (26) type_list -> . type
    (27) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type                           shift and go to state 126
    type_list                      shift and go to state 191
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 166

    (24) union_type -> TYPE_UNION LBRACKET type_list . RBRACKET

    RBRACKET        shift and go to state 192


state 167

    (33) agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .

    AGENT           reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONNECT         reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FUN             reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FOR             reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IF              reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    WHILE           reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    BREAK           reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONTINUE        reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    RETURN          reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IDENTIFIER      reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    $end            reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)


state 168

    (34) agent_body -> agent_body_item agent_body .

    DEDENT          reduce using rule 34 (agent_body -> agent_body_item agent_body .)


state 169

    (41) input_block -> INPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 193


state 170

    (42) output_block -> OUTPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 194


state 171

    (43) model_block -> MODEL COLON . constant
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    constant                       shift and go to state 195

state 172

    (44) chat_block -> CHAT identifier . COLON TRIPLE_STRING

    COLON           shift and go to state 196


state 173

    (45) chat_block -> CHAT COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 197


state 174

    (49) connection -> identifier COLON type . INDENT agent_ref ARROW agent_ref DEDENT

    INDENT          shift and go to state 198


state 175

    (10) var_decl -> identifier COLON type . EQUALS expr
    (11) var_decl -> identifier COLON type .

    EQUALS          shift and go to state 199
    COMMA           reduce using rule 11 (var_decl -> identifier COLON type .)
    RPAREN          reduce using rule 11 (var_decl -> identifier COLON type .)
    IDENTIFIER      reduce using rule 11 (var_decl -> identifier COLON type .)
    DEDENT          reduce using rule 11 (var_decl -> identifier COLON type .)


state 176

    (12) var_decl -> identifier EQUALS expr .

    COMMA           reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    RPAREN          reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    IDENTIFIER      reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    DEDENT          reduce using rule 12 (var_decl -> identifier EQUALS expr .)


state 177

    (55) func_def -> FUN identifier LPAREN param_list RPAREN ARROW . type COLON stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type                           shift and go to state 200
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 178

    (56) func_def -> FUN identifier LPAREN param_list RPAREN COLON . stmt_block
    (62) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 108

    stmt_block                     shift and go to state 201

state 179

    (59) param_list_tail -> COMMA param_decl . param_list_tail
    (59) param_list_tail -> . COMMA param_decl param_list_tail
    (60) param_list_tail -> . empty
    (127) empty -> .

    COMMA           shift and go to state 146
    RPAREN          reduce using rule 127 (empty -> .)

    param_list_tail                shift and go to state 202
    empty                          shift and go to state 147

state 180

    (78) for_stmt -> FOR identifier IN expr COLON stmt_block .

    AGENT           reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONNECT         reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FUN             reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FOR             reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IF              reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    WHILE           reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    BREAK           reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONTINUE        reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    RETURN          reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    $end            reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    INPUT           reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    OUTPUT          reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    MODEL           reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CHAT            reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    DEDENT          reduce using rule 78 (for_stmt -> FOR identifier IN expr COLON stmt_block .)


state 181

    (81) if_stmt -> IF expr COLON stmt_block ELSE COLON . stmt_block
    (62) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 108

    stmt_block                     shift and go to state 203

state 182

    (62) stmt_block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    AGENT           reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    CONNECT         reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    FUN             reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    BREAK           reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    CONTINUE        reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    IDENTIFIER      reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    INPUT           reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    OUTPUT          reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    MODEL           reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    CHAT            reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 62 (stmt_block -> INDENT statement_list DEDENT .)


state 183

    (63) statement_list -> statement statement_list .

    DEDENT          reduce using rule 63 (statement_list -> statement statement_list .)


state 184

    (114) arg_list_tail -> COMMA expr . arg_list_tail
    (114) arg_list_tail -> . COMMA expr arg_list_tail
    (115) arg_list_tail -> . empty
    (127) empty -> .

    COMMA           shift and go to state 154
    RPAREN          reduce using rule 127 (empty -> .)

    arg_list_tail                  shift and go to state 204
    empty                          shift and go to state 155

state 185

    (101) list_elements_tail -> COMMA expr list_elements_tail .

    RBRACKET        reduce using rule 101 (list_elements_tail -> COMMA expr list_elements_tail .)


state 186

    (106) record_elements_tail -> COMMA instance_assign record_elements_tail .

    RBRACE          reduce using rule 106 (record_elements_tail -> COMMA instance_assign record_elements_tail .)


state 187

    (28) list_type -> TYPE_LIST LBRACKET type RBRACKET .

    EQUALS          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COMMA           reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    INDENT          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    IDENTIFIER      reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    DEDENT          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COLON           reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACE          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)


state 188

    (29) record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .

    EQUALS          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COMMA           reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RPAREN          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACKET        reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    INDENT          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IDENTIFIER      reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    DEDENT          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COLON           reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACE          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)


state 189

    (30) field_decl_list -> field_decl COMMA . field_decl_list
    (30) field_decl_list -> . field_decl COMMA field_decl_list
    (31) field_decl_list -> . field_decl
    (32) field_decl -> . identifier COLON type
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl                     shift and go to state 162
    field_decl_list                shift and go to state 205
    identifier                     shift and go to state 163

state 190

    (32) field_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 86
    TYPE_INT        shift and go to state 87
    TYPE_FLOAT      shift and go to state 88
    TYPE_BOOL       shift and go to state 89
    TYPE_UNIT       shift and go to state 90
    TYPE_LIST       shift and go to state 91
    TYPE_RECORD     shift and go to state 92
    LPAREN          shift and go to state 93
    TYPE_UNION      shift and go to state 94

    type                           shift and go to state 206
    base_type                      shift and go to state 81
    list_type                      shift and go to state 82
    record_type                    shift and go to state 83
    func_ret_type                  shift and go to state 84
    union_type                     shift and go to state 85

state 191

    (27) type_list -> type COMMA type_list .

    RPAREN          reduce using rule 27 (type_list -> type COMMA type_list .)
    RBRACKET        reduce using rule 27 (type_list -> type COMMA type_list .)


state 192

    (24) union_type -> TYPE_UNION LBRACKET type_list RBRACKET .

    EQUALS          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    COMMA           reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RPAREN          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RBRACKET        reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    INDENT          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    IDENTIFIER      reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    DEDENT          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    COLON           reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RBRACE          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)


state 193

    (41) input_block -> INPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 207
    var_decl                       shift and go to state 208
    identifier                     shift and go to state 101

state 194

    (42) output_block -> OUTPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 209
    var_decl                       shift and go to state 208
    identifier                     shift and go to state 101

state 195

    (43) model_block -> MODEL COLON constant .

    INPUT           reduce using rule 43 (model_block -> MODEL COLON constant .)
    OUTPUT          reduce using rule 43 (model_block -> MODEL COLON constant .)
    MODEL           reduce using rule 43 (model_block -> MODEL COLON constant .)
    CHAT            reduce using rule 43 (model_block -> MODEL COLON constant .)
    FOR             reduce using rule 43 (model_block -> MODEL COLON constant .)
    IF              reduce using rule 43 (model_block -> MODEL COLON constant .)
    WHILE           reduce using rule 43 (model_block -> MODEL COLON constant .)
    BREAK           reduce using rule 43 (model_block -> MODEL COLON constant .)
    CONTINUE        reduce using rule 43 (model_block -> MODEL COLON constant .)
    RETURN          reduce using rule 43 (model_block -> MODEL COLON constant .)
    IDENTIFIER      reduce using rule 43 (model_block -> MODEL COLON constant .)
    DEDENT          reduce using rule 43 (model_block -> MODEL COLON constant .)


state 196

    (44) chat_block -> CHAT identifier COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 210


state 197

    (45) chat_block -> CHAT COLON TRIPLE_STRING .

    INPUT           reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    MODEL           reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CHAT            reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    FOR             reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IF              reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    WHILE           reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    BREAK           reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    RETURN          reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 45 (chat_block -> CHAT COLON TRIPLE_STRING .)


state 198

    (49) connection -> identifier COLON type INDENT . agent_ref ARROW agent_ref DEDENT
    (50) agent_ref -> . identifier agent_ref_tail
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 211
    agent_ref                      shift and go to state 212

state 199

    (10) var_decl -> identifier COLON type EQUALS . expr
    (84) expr -> . expr_head bin_op expr_tail
    (85) expr -> . expr_head
    (86) expr_head -> . atom
    (87) expr_head -> . list_expr
    (88) expr_head -> . record_expr
    (89) expr_head -> . field_access
    (90) expr_head -> . index_access
    (91) expr_head -> . func_call
    (93) atom -> . identifier
    (94) atom -> . constant
    (98) list_expr -> . LBRACKET list_elements RBRACKET
    (103) record_expr -> . LBRACE record_elements RBRACE
    (110) field_access -> . identifier DOT identifier
    (109) index_access -> . identifier LBRACKET expr RBRACKET
    (111) func_call -> . identifier LPAREN arg_list RPAREN
    (95) identifier -> . IDENTIFIER
    (96) constant -> . STRING
    (97) constant -> . NUMBER

    LBRACKET        shift and go to state 46
    LBRACE          shift and go to state 47
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 48
    NUMBER          shift and go to state 49

    identifier                     shift and go to state 44
    expr                           shift and go to state 213
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    index_access                   shift and go to state 42
    func_call                      shift and go to state 43
    constant                       shift and go to state 45

state 200

    (55) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type . COLON stmt_block

    COLON           shift and go to state 214


state 201

    (56) func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .

    AGENT           reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FUN             reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FOR             reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IF              reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    WHILE           reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    BREAK           reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    RETURN          reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    $end            reduce using rule 56 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)


state 202

    (59) param_list_tail -> COMMA param_decl param_list_tail .

    RPAREN          reduce using rule 59 (param_list_tail -> COMMA param_decl param_list_tail .)


state 203

    (81) if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FUN             reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 81 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)


state 204

    (114) arg_list_tail -> COMMA expr arg_list_tail .

    RPAREN          reduce using rule 114 (arg_list_tail -> COMMA expr arg_list_tail .)


state 205

    (30) field_decl_list -> field_decl COMMA field_decl_list .

    RBRACE          reduce using rule 30 (field_decl_list -> field_decl COMMA field_decl_list .)


state 206

    (32) field_decl -> identifier COLON type .

    COMMA           reduce using rule 32 (field_decl -> identifier COLON type .)
    RBRACE          reduce using rule 32 (field_decl -> identifier COLON type .)


state 207

    (41) input_block -> INPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 215


state 208

    (8) var_decl_list -> var_decl . var_decl_list
    (9) var_decl_list -> var_decl .
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (95) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 9 (var_decl_list -> var_decl .)
    IDENTIFIER      shift and go to state 28

    var_decl                       shift and go to state 208
    var_decl_list                  shift and go to state 216
    identifier                     shift and go to state 101

state 209

    (42) output_block -> OUTPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 217


state 210

    (44) chat_block -> CHAT identifier COLON TRIPLE_STRING .

    INPUT           reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    MODEL           reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CHAT            reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    FOR             reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IF              reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    WHILE           reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    BREAK           reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    RETURN          reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 44 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)


state 211

    (50) agent_ref -> identifier . agent_ref_tail
    (51) agent_ref_tail -> . DOT identifier agent_ref_tail
    (52) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (53) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (54) agent_ref_tail -> . empty
    (127) empty -> .

    DOT             shift and go to state 219
    ARROW           reduce using rule 127 (empty -> .)
    DEDENT          reduce using rule 127 (empty -> .)

    agent_ref_tail                 shift and go to state 218
    empty                          shift and go to state 220

state 212

    (49) connection -> identifier COLON type INDENT agent_ref . ARROW agent_ref DEDENT

    ARROW           shift and go to state 221


state 213

    (10) var_decl -> identifier COLON type EQUALS expr .

    COMMA           reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    RPAREN          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    DEDENT          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)


state 214

    (55) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON . stmt_block
    (62) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 108

    stmt_block                     shift and go to state 222

state 215

    (41) input_block -> INPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)


state 216

    (8) var_decl_list -> var_decl var_decl_list .

    DEDENT          reduce using rule 8 (var_decl_list -> var_decl var_decl_list .)


state 217

    (42) output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 42 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)


state 218

    (50) agent_ref -> identifier agent_ref_tail .

    ARROW           reduce using rule 50 (agent_ref -> identifier agent_ref_tail .)
    DEDENT          reduce using rule 50 (agent_ref -> identifier agent_ref_tail .)


state 219

    (51) agent_ref_tail -> DOT . identifier agent_ref_tail
    (52) agent_ref_tail -> DOT . OUTPUT agent_ref_tail
    (53) agent_ref_tail -> DOT . INPUT agent_ref_tail
    (95) identifier -> . IDENTIFIER

    OUTPUT          shift and go to state 224
    INPUT           shift and go to state 225
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 223

state 220

    (54) agent_ref_tail -> empty .

    ARROW           reduce using rule 54 (agent_ref_tail -> empty .)
    DEDENT          reduce using rule 54 (agent_ref_tail -> empty .)


state 221

    (49) connection -> identifier COLON type INDENT agent_ref ARROW . agent_ref DEDENT
    (50) agent_ref -> . identifier agent_ref_tail
    (95) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 211
    agent_ref                      shift and go to state 226

state 222

    (55) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .

    AGENT           reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONNECT         reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FUN             reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FOR             reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IF              reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    WHILE           reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    BREAK           reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONTINUE        reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    RETURN          reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IDENTIFIER      reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    $end            reduce using rule 55 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)


state 223

    (51) agent_ref_tail -> DOT identifier . agent_ref_tail
    (51) agent_ref_tail -> . DOT identifier agent_ref_tail
    (52) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (53) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (54) agent_ref_tail -> . empty
    (127) empty -> .

    DOT             shift and go to state 219
    ARROW           reduce using rule 127 (empty -> .)
    DEDENT          reduce using rule 127 (empty -> .)

    agent_ref_tail                 shift and go to state 227
    empty                          shift and go to state 220

state 224

    (52) agent_ref_tail -> DOT OUTPUT . agent_ref_tail
    (51) agent_ref_tail -> . DOT identifier agent_ref_tail
    (52) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (53) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (54) agent_ref_tail -> . empty
    (127) empty -> .

    DOT             shift and go to state 219
    ARROW           reduce using rule 127 (empty -> .)
    DEDENT          reduce using rule 127 (empty -> .)

    agent_ref_tail                 shift and go to state 228
    empty                          shift and go to state 220

state 225

    (53) agent_ref_tail -> DOT INPUT . agent_ref_tail
    (51) agent_ref_tail -> . DOT identifier agent_ref_tail
    (52) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (53) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (54) agent_ref_tail -> . empty
    (127) empty -> .

    DOT             shift and go to state 219
    ARROW           reduce using rule 127 (empty -> .)
    DEDENT          reduce using rule 127 (empty -> .)

    agent_ref_tail                 shift and go to state 229
    empty                          shift and go to state 220

state 226

    (49) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref . DEDENT

    DEDENT          shift and go to state 230


state 227

    (51) agent_ref_tail -> DOT identifier agent_ref_tail .

    ARROW           reduce using rule 51 (agent_ref_tail -> DOT identifier agent_ref_tail .)
    DEDENT          reduce using rule 51 (agent_ref_tail -> DOT identifier agent_ref_tail .)


state 228

    (52) agent_ref_tail -> DOT OUTPUT agent_ref_tail .

    ARROW           reduce using rule 52 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)
    DEDENT          reduce using rule 52 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)


state 229

    (53) agent_ref_tail -> DOT INPUT agent_ref_tail .

    ARROW           reduce using rule 53 (agent_ref_tail -> DOT INPUT agent_ref_tail .)
    DEDENT          reduce using rule 53 (agent_ref_tail -> DOT INPUT agent_ref_tail .)


state 230

    (49) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .

    IDENTIFIER      reduce using rule 49 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)
    DEDENT          reduce using rule 49 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)

