Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TYPE_TUPLE

Grammar

Rule 0     S' -> program
Rule 1     program -> program_body
Rule 2     program_body -> program_body_item program_body
Rule 3     program_body -> program_body_item
Rule 4     program_body_item -> statement
Rule 5     program_body_item -> agent_def
Rule 6     program_body_item -> connect_block
Rule 7     program_body_item -> func_def
Rule 8     var_decl_list -> var_decl var_decl_list
Rule 9     var_decl_list -> var_decl
Rule 10    var_decl -> identifier COLON type EQUALS expr
Rule 11    var_decl -> identifier COLON type
Rule 12    var_decl -> identifier EQUALS expr
Rule 13    var_decl -> identifier
Rule 14    type -> base_type
Rule 15    type -> list_type
Rule 16    type -> record_type
Rule 17    type -> func_ret_type
Rule 18    base_type -> TYPE_STR
Rule 19    base_type -> TYPE_INT
Rule 20    base_type -> TYPE_FLOAT
Rule 21    base_type -> TYPE_BOOL
Rule 22    base_type -> TYPE_VOID
Rule 23    func_ret_type -> LPAREN type_list RPAREN
Rule 24    type_list -> type
Rule 25    type_list -> type COMMA type_list
Rule 26    list_type -> TYPE_LIST LBRACKET type RBRACKET
Rule 27    record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE
Rule 28    field_decl_list -> field_decl COMMA field_decl_list
Rule 29    field_decl_list -> field_decl
Rule 30    field_decl -> identifier COLON type
Rule 31    agent_def -> AGENT identifier COLON INDENT agent_body DEDENT
Rule 32    agent_body -> agent_body_item agent_body
Rule 33    agent_body -> agent_body_item
Rule 34    agent_body_item -> input_block
Rule 35    agent_body_item -> output_block
Rule 36    agent_body_item -> model_block
Rule 37    agent_body_item -> statement
Rule 38    agent_body_item -> chat_block
Rule 39    input_block -> INPUT COLON INDENT var_decl_list DEDENT
Rule 40    output_block -> OUTPUT COLON INDENT var_decl_list DEDENT
Rule 41    model_block -> MODEL COLON constant
Rule 42    chat_block -> CHAT identifier COLON TRIPLE_STRING
Rule 43    chat_block -> CHAT COLON TRIPLE_STRING
Rule 44    connect_block -> CONNECT COLON INDENT connection_list DEDENT
Rule 45    connection_list -> connection connection_list
Rule 46    connection_list -> connection
Rule 47    connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
Rule 48    agent_ref -> identifier agent_ref_tail
Rule 49    agent_ref_tail -> DOT identifier agent_ref_tail
Rule 50    agent_ref_tail -> DOT OUTPUT agent_ref_tail
Rule 51    agent_ref_tail -> DOT INPUT agent_ref_tail
Rule 52    agent_ref_tail -> empty
Rule 53    func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
Rule 54    func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block
Rule 55    param_list -> param_decl param_list_tail
Rule 56    param_list -> empty
Rule 57    param_list_tail -> COMMA param_decl param_list_tail
Rule 58    param_list_tail -> empty
Rule 59    param_decl -> var_decl
Rule 60    stmt_block -> INDENT statement_list DEDENT
Rule 61    statement_list -> statement statement_list
Rule 62    statement_list -> statement
Rule 63    statement -> for_stmt
Rule 64    statement -> if_stmt
Rule 65    statement -> while_stmt
Rule 66    statement -> assign_stmt
Rule 67    statement -> break_stmt
Rule 68    statement -> continue_stmt
Rule 69    statement -> return_stmt
Rule 70    assign_stmt -> assign_target COLON type EQUALS expr
Rule 71    assign_stmt -> assign_target EQUALS expr
Rule 72    assign_target -> identifier
Rule 73    assign_target -> field_access
Rule 74    assign_target -> index_access
Rule 75    return_stmt -> RETURN expr
Rule 76    for_stmt -> FOR identifier IN expr COLON stmt_block
Rule 77    break_stmt -> BREAK
Rule 78    continue_stmt -> CONTINUE
Rule 79    if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block
Rule 80    if_stmt -> IF expr COLON stmt_block
Rule 81    while_stmt -> WHILE expr COLON stmt_block
Rule 82    expr -> expr_head bin_op expr_tail
Rule 83    expr -> expr_head
Rule 84    expr_head -> atom
Rule 85    expr_head -> list_expr
Rule 86    expr_head -> record_expr
Rule 87    expr_head -> field_access
Rule 88    expr_head -> func_call
Rule 89    expr_tail -> expr
Rule 90    atom -> identifier
Rule 91    atom -> constant
Rule 92    identifier -> IDENTIFIER
Rule 93    constant -> STRING
Rule 94    constant -> NUMBER
Rule 95    list_expr -> LBRACKET list_elements RBRACKET
Rule 96    list_elements -> expr list_elements_tail
Rule 97    list_elements -> expr
Rule 98    list_elements_tail -> COMMA expr list_elements_tail
Rule 99    list_elements_tail -> COMMA expr
Rule 100   record_expr -> LBRACE record_elements RBRACE
Rule 101   record_elements -> instance_assign record_elements_tail
Rule 102   record_elements -> instance_assign
Rule 103   record_elements_tail -> COMMA instance_assign record_elements_tail
Rule 104   record_elements_tail -> COMMA instance_assign
Rule 105   instance_assign -> identifier EQUALS expr
Rule 106   index_access -> identifier LBRACKET expr RBRACKET
Rule 107   field_access -> identifier DOT identifier
Rule 108   func_call -> identifier LPAREN arg_list RPAREN
Rule 109   arg_list -> expr arg_list_tail
Rule 110   arg_list -> empty
Rule 111   arg_list_tail -> COMMA expr arg_list_tail
Rule 112   arg_list_tail -> empty
Rule 113   bin_op -> PLUS
Rule 114   bin_op -> MINUS
Rule 115   bin_op -> TIMES
Rule 116   bin_op -> DIVIDE
Rule 117   bin_op -> MOD
Rule 118   bin_op -> EQ
Rule 119   bin_op -> NEQ
Rule 120   bin_op -> LT
Rule 121   bin_op -> GT
Rule 122   bin_op -> LE
Rule 123   bin_op -> GE
Rule 124   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 31
ARROW                : 47 53
BREAK                : 77
CHAT                 : 42 43
COLON                : 10 11 30 31 39 40 41 42 43 44 47 53 54 70 76 79 79 80 81
COMMA                : 25 28 57 98 99 103 104 111
CONNECT              : 44
CONTINUE             : 78
DEDENT               : 31 39 40 44 47 60
DIVIDE               : 116
DOT                  : 49 50 51 107
ELSE                 : 79
EQ                   : 118
EQUALS               : 10 12 70 71 105
FOR                  : 76
FUN                  : 53 54
GE                   : 123
GT                   : 121
IDENTIFIER           : 92
IF                   : 79 80
IN                   : 76
INDENT               : 31 39 40 44 47 60
INPUT                : 39 51
LBRACE               : 27 100
LBRACKET             : 26 95 106
LE                   : 122
LPAREN               : 23 53 54 108
LT                   : 120
MINUS                : 114
MOD                  : 117
MODEL                : 41
NEQ                  : 119
NEWLINE              : 
NUMBER               : 94
OUTPUT               : 40 50
PLUS                 : 113
RBRACE               : 27 100
RBRACKET             : 26 95 106
RETURN               : 75
RPAREN               : 23 53 54 108
STRING               : 93
TIMES                : 115
TRIPLE_STRING        : 42 43
TYPE_BOOL            : 21
TYPE_FLOAT           : 20
TYPE_INT             : 19
TYPE_LIST            : 26
TYPE_RECORD          : 27
TYPE_STR             : 18
TYPE_TUPLE           : 
TYPE_VOID            : 22
WHILE                : 81
error                : 

Nonterminals, with rules where they appear

agent_body           : 31 32
agent_body_item      : 32 33
agent_def            : 5
agent_ref            : 47 47
agent_ref_tail       : 48 49 50 51
arg_list             : 108
arg_list_tail        : 109 111
assign_stmt          : 66
assign_target        : 70 71
atom                 : 84
base_type            : 14
bin_op               : 82
break_stmt           : 67
chat_block           : 38
connect_block        : 6
connection           : 45 46
connection_list      : 44 45
constant             : 41 91
continue_stmt        : 68
empty                : 52 56 58 110 112
expr                 : 10 12 70 71 75 76 79 80 81 89 96 97 98 99 105 106 109 111
expr_head            : 82 83
expr_tail            : 82
field_access         : 73 87
field_decl           : 28 29
field_decl_list      : 27 28
for_stmt             : 63
func_call            : 88
func_def             : 7
func_ret_type        : 17
identifier           : 10 11 12 13 30 31 42 47 48 49 53 54 72 76 90 105 106 107 107 108
if_stmt              : 64
index_access         : 74
input_block          : 34
instance_assign      : 101 102 103 104
list_elements        : 95
list_elements_tail   : 96 98
list_expr            : 85
list_type            : 15
model_block          : 36
output_block         : 35
param_decl           : 55 57
param_list           : 53 54
param_list_tail      : 55 57
program              : 0
program_body         : 1 2
program_body_item    : 2 3
record_elements      : 100
record_elements_tail : 101 103
record_expr          : 86
record_type          : 16
return_stmt          : 69
statement            : 4 37 61 62
statement_list       : 60 61
stmt_block           : 53 54 76 79 79 80 81
type                 : 10 11 24 25 26 30 47 53 70
type_list            : 23 25
var_decl             : 8 9 59
var_decl_list        : 8 39 40
while_stmt           : 65


state 0

    (0) S' -> . program
    (1) program -> . program_body
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (63) statement -> . for_stmt
    (64) statement -> . if_stmt
    (65) statement -> . while_stmt
    (66) statement -> . assign_stmt
    (67) statement -> . break_stmt
    (68) statement -> . continue_stmt
    (69) statement -> . return_stmt
    (31) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (44) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (53) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (54) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (76) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (79) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> . IF expr COLON stmt_block
    (81) while_stmt -> . WHILE expr COLON stmt_block
    (70) assign_stmt -> . assign_target COLON type EQUALS expr
    (71) assign_stmt -> . assign_target EQUALS expr
    (77) break_stmt -> . BREAK
    (78) continue_stmt -> . CONTINUE
    (75) return_stmt -> . RETURN expr
    (72) assign_target -> . identifier
    (73) assign_target -> . field_access
    (74) assign_target -> . index_access
    (92) identifier -> . IDENTIFIER
    (107) field_access -> . identifier DOT identifier
    (106) index_access -> . identifier LBRACKET expr RBRACKET

    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    FUN             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    program                        shift and go to state 1
    program_body                   shift and go to state 2
    program_body_item              shift and go to state 3
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (1) program -> program_body .

    $end            reduce using rule 1 (program -> program_body .)


state 3

    (2) program_body -> program_body_item . program_body
    (3) program_body -> program_body_item .
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (63) statement -> . for_stmt
    (64) statement -> . if_stmt
    (65) statement -> . while_stmt
    (66) statement -> . assign_stmt
    (67) statement -> . break_stmt
    (68) statement -> . continue_stmt
    (69) statement -> . return_stmt
    (31) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (44) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (53) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (54) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (76) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (79) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> . IF expr COLON stmt_block
    (81) while_stmt -> . WHILE expr COLON stmt_block
    (70) assign_stmt -> . assign_target COLON type EQUALS expr
    (71) assign_stmt -> . assign_target EQUALS expr
    (77) break_stmt -> . BREAK
    (78) continue_stmt -> . CONTINUE
    (75) return_stmt -> . RETURN expr
    (72) assign_target -> . identifier
    (73) assign_target -> . field_access
    (74) assign_target -> . index_access
    (92) identifier -> . IDENTIFIER
    (107) field_access -> . identifier DOT identifier
    (106) index_access -> . identifier LBRACKET expr RBRACKET

    $end            reduce using rule 3 (program_body -> program_body_item .)
    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    FUN             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    program_body_item              shift and go to state 3
    program_body                   shift and go to state 29
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 4

    (4) program_body_item -> statement .

    AGENT           reduce using rule 4 (program_body_item -> statement .)
    CONNECT         reduce using rule 4 (program_body_item -> statement .)
    FUN             reduce using rule 4 (program_body_item -> statement .)
    FOR             reduce using rule 4 (program_body_item -> statement .)
    IF              reduce using rule 4 (program_body_item -> statement .)
    WHILE           reduce using rule 4 (program_body_item -> statement .)
    BREAK           reduce using rule 4 (program_body_item -> statement .)
    CONTINUE        reduce using rule 4 (program_body_item -> statement .)
    RETURN          reduce using rule 4 (program_body_item -> statement .)
    IDENTIFIER      reduce using rule 4 (program_body_item -> statement .)
    $end            reduce using rule 4 (program_body_item -> statement .)


state 5

    (5) program_body_item -> agent_def .

    AGENT           reduce using rule 5 (program_body_item -> agent_def .)
    CONNECT         reduce using rule 5 (program_body_item -> agent_def .)
    FUN             reduce using rule 5 (program_body_item -> agent_def .)
    FOR             reduce using rule 5 (program_body_item -> agent_def .)
    IF              reduce using rule 5 (program_body_item -> agent_def .)
    WHILE           reduce using rule 5 (program_body_item -> agent_def .)
    BREAK           reduce using rule 5 (program_body_item -> agent_def .)
    CONTINUE        reduce using rule 5 (program_body_item -> agent_def .)
    RETURN          reduce using rule 5 (program_body_item -> agent_def .)
    IDENTIFIER      reduce using rule 5 (program_body_item -> agent_def .)
    $end            reduce using rule 5 (program_body_item -> agent_def .)


state 6

    (6) program_body_item -> connect_block .

    AGENT           reduce using rule 6 (program_body_item -> connect_block .)
    CONNECT         reduce using rule 6 (program_body_item -> connect_block .)
    FUN             reduce using rule 6 (program_body_item -> connect_block .)
    FOR             reduce using rule 6 (program_body_item -> connect_block .)
    IF              reduce using rule 6 (program_body_item -> connect_block .)
    WHILE           reduce using rule 6 (program_body_item -> connect_block .)
    BREAK           reduce using rule 6 (program_body_item -> connect_block .)
    CONTINUE        reduce using rule 6 (program_body_item -> connect_block .)
    RETURN          reduce using rule 6 (program_body_item -> connect_block .)
    IDENTIFIER      reduce using rule 6 (program_body_item -> connect_block .)
    $end            reduce using rule 6 (program_body_item -> connect_block .)


state 7

    (7) program_body_item -> func_def .

    AGENT           reduce using rule 7 (program_body_item -> func_def .)
    CONNECT         reduce using rule 7 (program_body_item -> func_def .)
    FUN             reduce using rule 7 (program_body_item -> func_def .)
    FOR             reduce using rule 7 (program_body_item -> func_def .)
    IF              reduce using rule 7 (program_body_item -> func_def .)
    WHILE           reduce using rule 7 (program_body_item -> func_def .)
    BREAK           reduce using rule 7 (program_body_item -> func_def .)
    CONTINUE        reduce using rule 7 (program_body_item -> func_def .)
    RETURN          reduce using rule 7 (program_body_item -> func_def .)
    IDENTIFIER      reduce using rule 7 (program_body_item -> func_def .)
    $end            reduce using rule 7 (program_body_item -> func_def .)


state 8

    (63) statement -> for_stmt .

    AGENT           reduce using rule 63 (statement -> for_stmt .)
    CONNECT         reduce using rule 63 (statement -> for_stmt .)
    FUN             reduce using rule 63 (statement -> for_stmt .)
    FOR             reduce using rule 63 (statement -> for_stmt .)
    IF              reduce using rule 63 (statement -> for_stmt .)
    WHILE           reduce using rule 63 (statement -> for_stmt .)
    BREAK           reduce using rule 63 (statement -> for_stmt .)
    CONTINUE        reduce using rule 63 (statement -> for_stmt .)
    RETURN          reduce using rule 63 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 63 (statement -> for_stmt .)
    $end            reduce using rule 63 (statement -> for_stmt .)
    INPUT           reduce using rule 63 (statement -> for_stmt .)
    OUTPUT          reduce using rule 63 (statement -> for_stmt .)
    MODEL           reduce using rule 63 (statement -> for_stmt .)
    CHAT            reduce using rule 63 (statement -> for_stmt .)
    DEDENT          reduce using rule 63 (statement -> for_stmt .)


state 9

    (64) statement -> if_stmt .

    AGENT           reduce using rule 64 (statement -> if_stmt .)
    CONNECT         reduce using rule 64 (statement -> if_stmt .)
    FUN             reduce using rule 64 (statement -> if_stmt .)
    FOR             reduce using rule 64 (statement -> if_stmt .)
    IF              reduce using rule 64 (statement -> if_stmt .)
    WHILE           reduce using rule 64 (statement -> if_stmt .)
    BREAK           reduce using rule 64 (statement -> if_stmt .)
    CONTINUE        reduce using rule 64 (statement -> if_stmt .)
    RETURN          reduce using rule 64 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 64 (statement -> if_stmt .)
    $end            reduce using rule 64 (statement -> if_stmt .)
    INPUT           reduce using rule 64 (statement -> if_stmt .)
    OUTPUT          reduce using rule 64 (statement -> if_stmt .)
    MODEL           reduce using rule 64 (statement -> if_stmt .)
    CHAT            reduce using rule 64 (statement -> if_stmt .)
    DEDENT          reduce using rule 64 (statement -> if_stmt .)


state 10

    (65) statement -> while_stmt .

    AGENT           reduce using rule 65 (statement -> while_stmt .)
    CONNECT         reduce using rule 65 (statement -> while_stmt .)
    FUN             reduce using rule 65 (statement -> while_stmt .)
    FOR             reduce using rule 65 (statement -> while_stmt .)
    IF              reduce using rule 65 (statement -> while_stmt .)
    WHILE           reduce using rule 65 (statement -> while_stmt .)
    BREAK           reduce using rule 65 (statement -> while_stmt .)
    CONTINUE        reduce using rule 65 (statement -> while_stmt .)
    RETURN          reduce using rule 65 (statement -> while_stmt .)
    IDENTIFIER      reduce using rule 65 (statement -> while_stmt .)
    $end            reduce using rule 65 (statement -> while_stmt .)
    INPUT           reduce using rule 65 (statement -> while_stmt .)
    OUTPUT          reduce using rule 65 (statement -> while_stmt .)
    MODEL           reduce using rule 65 (statement -> while_stmt .)
    CHAT            reduce using rule 65 (statement -> while_stmt .)
    DEDENT          reduce using rule 65 (statement -> while_stmt .)


state 11

    (66) statement -> assign_stmt .

    AGENT           reduce using rule 66 (statement -> assign_stmt .)
    CONNECT         reduce using rule 66 (statement -> assign_stmt .)
    FUN             reduce using rule 66 (statement -> assign_stmt .)
    FOR             reduce using rule 66 (statement -> assign_stmt .)
    IF              reduce using rule 66 (statement -> assign_stmt .)
    WHILE           reduce using rule 66 (statement -> assign_stmt .)
    BREAK           reduce using rule 66 (statement -> assign_stmt .)
    CONTINUE        reduce using rule 66 (statement -> assign_stmt .)
    RETURN          reduce using rule 66 (statement -> assign_stmt .)
    IDENTIFIER      reduce using rule 66 (statement -> assign_stmt .)
    $end            reduce using rule 66 (statement -> assign_stmt .)
    INPUT           reduce using rule 66 (statement -> assign_stmt .)
    OUTPUT          reduce using rule 66 (statement -> assign_stmt .)
    MODEL           reduce using rule 66 (statement -> assign_stmt .)
    CHAT            reduce using rule 66 (statement -> assign_stmt .)
    DEDENT          reduce using rule 66 (statement -> assign_stmt .)


state 12

    (67) statement -> break_stmt .

    AGENT           reduce using rule 67 (statement -> break_stmt .)
    CONNECT         reduce using rule 67 (statement -> break_stmt .)
    FUN             reduce using rule 67 (statement -> break_stmt .)
    FOR             reduce using rule 67 (statement -> break_stmt .)
    IF              reduce using rule 67 (statement -> break_stmt .)
    WHILE           reduce using rule 67 (statement -> break_stmt .)
    BREAK           reduce using rule 67 (statement -> break_stmt .)
    CONTINUE        reduce using rule 67 (statement -> break_stmt .)
    RETURN          reduce using rule 67 (statement -> break_stmt .)
    IDENTIFIER      reduce using rule 67 (statement -> break_stmt .)
    $end            reduce using rule 67 (statement -> break_stmt .)
    INPUT           reduce using rule 67 (statement -> break_stmt .)
    OUTPUT          reduce using rule 67 (statement -> break_stmt .)
    MODEL           reduce using rule 67 (statement -> break_stmt .)
    CHAT            reduce using rule 67 (statement -> break_stmt .)
    DEDENT          reduce using rule 67 (statement -> break_stmt .)


state 13

    (68) statement -> continue_stmt .

    AGENT           reduce using rule 68 (statement -> continue_stmt .)
    CONNECT         reduce using rule 68 (statement -> continue_stmt .)
    FUN             reduce using rule 68 (statement -> continue_stmt .)
    FOR             reduce using rule 68 (statement -> continue_stmt .)
    IF              reduce using rule 68 (statement -> continue_stmt .)
    WHILE           reduce using rule 68 (statement -> continue_stmt .)
    BREAK           reduce using rule 68 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 68 (statement -> continue_stmt .)
    RETURN          reduce using rule 68 (statement -> continue_stmt .)
    IDENTIFIER      reduce using rule 68 (statement -> continue_stmt .)
    $end            reduce using rule 68 (statement -> continue_stmt .)
    INPUT           reduce using rule 68 (statement -> continue_stmt .)
    OUTPUT          reduce using rule 68 (statement -> continue_stmt .)
    MODEL           reduce using rule 68 (statement -> continue_stmt .)
    CHAT            reduce using rule 68 (statement -> continue_stmt .)
    DEDENT          reduce using rule 68 (statement -> continue_stmt .)


state 14

    (69) statement -> return_stmt .

    AGENT           reduce using rule 69 (statement -> return_stmt .)
    CONNECT         reduce using rule 69 (statement -> return_stmt .)
    FUN             reduce using rule 69 (statement -> return_stmt .)
    FOR             reduce using rule 69 (statement -> return_stmt .)
    IF              reduce using rule 69 (statement -> return_stmt .)
    WHILE           reduce using rule 69 (statement -> return_stmt .)
    BREAK           reduce using rule 69 (statement -> return_stmt .)
    CONTINUE        reduce using rule 69 (statement -> return_stmt .)
    RETURN          reduce using rule 69 (statement -> return_stmt .)
    IDENTIFIER      reduce using rule 69 (statement -> return_stmt .)
    $end            reduce using rule 69 (statement -> return_stmt .)
    INPUT           reduce using rule 69 (statement -> return_stmt .)
    OUTPUT          reduce using rule 69 (statement -> return_stmt .)
    MODEL           reduce using rule 69 (statement -> return_stmt .)
    CHAT            reduce using rule 69 (statement -> return_stmt .)
    DEDENT          reduce using rule 69 (statement -> return_stmt .)


state 15

    (31) agent_def -> AGENT . identifier COLON INDENT agent_body DEDENT
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 30

state 16

    (72) assign_target -> identifier .
    (107) field_access -> identifier . DOT identifier
    (106) index_access -> identifier . LBRACKET expr RBRACKET

    COLON           reduce using rule 72 (assign_target -> identifier .)
    EQUALS          reduce using rule 72 (assign_target -> identifier .)
    DOT             shift and go to state 31
    LBRACKET        shift and go to state 32


state 17

    (44) connect_block -> CONNECT . COLON INDENT connection_list DEDENT

    COLON           shift and go to state 33


state 18

    (53) func_def -> FUN . identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (54) func_def -> FUN . identifier LPAREN param_list RPAREN COLON stmt_block
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 34

state 19

    (76) for_stmt -> FOR . identifier IN expr COLON stmt_block
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 35

state 20

    (79) if_stmt -> IF . expr COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> IF . expr COLON stmt_block
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr                           shift and go to state 36
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 21

    (81) while_stmt -> WHILE . expr COLON stmt_block
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr                           shift and go to state 49
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 22

    (70) assign_stmt -> assign_target . COLON type EQUALS expr
    (71) assign_stmt -> assign_target . EQUALS expr

    COLON           shift and go to state 50
    EQUALS          shift and go to state 51


state 23

    (77) break_stmt -> BREAK .

    AGENT           reduce using rule 77 (break_stmt -> BREAK .)
    CONNECT         reduce using rule 77 (break_stmt -> BREAK .)
    FUN             reduce using rule 77 (break_stmt -> BREAK .)
    FOR             reduce using rule 77 (break_stmt -> BREAK .)
    IF              reduce using rule 77 (break_stmt -> BREAK .)
    WHILE           reduce using rule 77 (break_stmt -> BREAK .)
    BREAK           reduce using rule 77 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 77 (break_stmt -> BREAK .)
    RETURN          reduce using rule 77 (break_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 77 (break_stmt -> BREAK .)
    $end            reduce using rule 77 (break_stmt -> BREAK .)
    INPUT           reduce using rule 77 (break_stmt -> BREAK .)
    OUTPUT          reduce using rule 77 (break_stmt -> BREAK .)
    MODEL           reduce using rule 77 (break_stmt -> BREAK .)
    CHAT            reduce using rule 77 (break_stmt -> BREAK .)
    DEDENT          reduce using rule 77 (break_stmt -> BREAK .)


state 24

    (78) continue_stmt -> CONTINUE .

    AGENT           reduce using rule 78 (continue_stmt -> CONTINUE .)
    CONNECT         reduce using rule 78 (continue_stmt -> CONTINUE .)
    FUN             reduce using rule 78 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 78 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 78 (continue_stmt -> CONTINUE .)
    WHILE           reduce using rule 78 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 78 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 78 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 78 (continue_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 78 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 78 (continue_stmt -> CONTINUE .)
    INPUT           reduce using rule 78 (continue_stmt -> CONTINUE .)
    OUTPUT          reduce using rule 78 (continue_stmt -> CONTINUE .)
    MODEL           reduce using rule 78 (continue_stmt -> CONTINUE .)
    CHAT            reduce using rule 78 (continue_stmt -> CONTINUE .)
    DEDENT          reduce using rule 78 (continue_stmt -> CONTINUE .)


state 25

    (75) return_stmt -> RETURN . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr                           shift and go to state 52
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 26

    (73) assign_target -> field_access .

    COLON           reduce using rule 73 (assign_target -> field_access .)
    EQUALS          reduce using rule 73 (assign_target -> field_access .)


state 27

    (74) assign_target -> index_access .

    COLON           reduce using rule 74 (assign_target -> index_access .)
    EQUALS          reduce using rule 74 (assign_target -> index_access .)


state 28

    (92) identifier -> IDENTIFIER .

    DOT             reduce using rule 92 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 92 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 92 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 92 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 92 (identifier -> IDENTIFIER .)
    IN              reduce using rule 92 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 92 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 92 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 92 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 92 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 92 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 92 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 92 (identifier -> IDENTIFIER .)
    LT              reduce using rule 92 (identifier -> IDENTIFIER .)
    GT              reduce using rule 92 (identifier -> IDENTIFIER .)
    LE              reduce using rule 92 (identifier -> IDENTIFIER .)
    GE              reduce using rule 92 (identifier -> IDENTIFIER .)
    AGENT           reduce using rule 92 (identifier -> IDENTIFIER .)
    CONNECT         reduce using rule 92 (identifier -> IDENTIFIER .)
    FUN             reduce using rule 92 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 92 (identifier -> IDENTIFIER .)
    IF              reduce using rule 92 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 92 (identifier -> IDENTIFIER .)
    BREAK           reduce using rule 92 (identifier -> IDENTIFIER .)
    CONTINUE        reduce using rule 92 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 92 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 92 (identifier -> IDENTIFIER .)
    $end            reduce using rule 92 (identifier -> IDENTIFIER .)
    INPUT           reduce using rule 92 (identifier -> IDENTIFIER .)
    OUTPUT          reduce using rule 92 (identifier -> IDENTIFIER .)
    MODEL           reduce using rule 92 (identifier -> IDENTIFIER .)
    CHAT            reduce using rule 92 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 92 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 92 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 92 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 92 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 92 (identifier -> IDENTIFIER .)
    ARROW           reduce using rule 92 (identifier -> IDENTIFIER .)


state 29

    (2) program_body -> program_body_item program_body .

    $end            reduce using rule 2 (program_body -> program_body_item program_body .)


state 30

    (31) agent_def -> AGENT identifier . COLON INDENT agent_body DEDENT

    COLON           shift and go to state 53


state 31

    (107) field_access -> identifier DOT . identifier
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 54

state 32

    (106) index_access -> identifier LBRACKET . expr RBRACKET
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    identifier                     shift and go to state 43
    expr                           shift and go to state 55
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    constant                       shift and go to state 44

state 33

    (44) connect_block -> CONNECT COLON . INDENT connection_list DEDENT

    INDENT          shift and go to state 56


state 34

    (53) func_def -> FUN identifier . LPAREN param_list RPAREN ARROW type COLON stmt_block
    (54) func_def -> FUN identifier . LPAREN param_list RPAREN COLON stmt_block

    LPAREN          shift and go to state 57


state 35

    (76) for_stmt -> FOR identifier . IN expr COLON stmt_block

    IN              shift and go to state 58


state 36

    (79) if_stmt -> IF expr . COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> IF expr . COLON stmt_block

    COLON           shift and go to state 59


state 37

    (82) expr -> expr_head . bin_op expr_tail
    (83) expr -> expr_head .
    (113) bin_op -> . PLUS
    (114) bin_op -> . MINUS
    (115) bin_op -> . TIMES
    (116) bin_op -> . DIVIDE
    (117) bin_op -> . MOD
    (118) bin_op -> . EQ
    (119) bin_op -> . NEQ
    (120) bin_op -> . LT
    (121) bin_op -> . GT
    (122) bin_op -> . LE
    (123) bin_op -> . GE

    COLON           reduce using rule 83 (expr -> expr_head .)
    AGENT           reduce using rule 83 (expr -> expr_head .)
    CONNECT         reduce using rule 83 (expr -> expr_head .)
    FUN             reduce using rule 83 (expr -> expr_head .)
    FOR             reduce using rule 83 (expr -> expr_head .)
    IF              reduce using rule 83 (expr -> expr_head .)
    WHILE           reduce using rule 83 (expr -> expr_head .)
    BREAK           reduce using rule 83 (expr -> expr_head .)
    CONTINUE        reduce using rule 83 (expr -> expr_head .)
    RETURN          reduce using rule 83 (expr -> expr_head .)
    IDENTIFIER      reduce using rule 83 (expr -> expr_head .)
    $end            reduce using rule 83 (expr -> expr_head .)
    INPUT           reduce using rule 83 (expr -> expr_head .)
    OUTPUT          reduce using rule 83 (expr -> expr_head .)
    MODEL           reduce using rule 83 (expr -> expr_head .)
    CHAT            reduce using rule 83 (expr -> expr_head .)
    DEDENT          reduce using rule 83 (expr -> expr_head .)
    RBRACKET        reduce using rule 83 (expr -> expr_head .)
    COMMA           reduce using rule 83 (expr -> expr_head .)
    RPAREN          reduce using rule 83 (expr -> expr_head .)
    RBRACE          reduce using rule 83 (expr -> expr_head .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    TIMES           shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    EQ              shift and go to state 66
    NEQ             shift and go to state 67
    LT              shift and go to state 68
    GT              shift and go to state 69
    LE              shift and go to state 70
    GE              shift and go to state 71

    bin_op                         shift and go to state 60

state 38

    (84) expr_head -> atom .

    PLUS            reduce using rule 84 (expr_head -> atom .)
    MINUS           reduce using rule 84 (expr_head -> atom .)
    TIMES           reduce using rule 84 (expr_head -> atom .)
    DIVIDE          reduce using rule 84 (expr_head -> atom .)
    MOD             reduce using rule 84 (expr_head -> atom .)
    EQ              reduce using rule 84 (expr_head -> atom .)
    NEQ             reduce using rule 84 (expr_head -> atom .)
    LT              reduce using rule 84 (expr_head -> atom .)
    GT              reduce using rule 84 (expr_head -> atom .)
    LE              reduce using rule 84 (expr_head -> atom .)
    GE              reduce using rule 84 (expr_head -> atom .)
    COLON           reduce using rule 84 (expr_head -> atom .)
    AGENT           reduce using rule 84 (expr_head -> atom .)
    CONNECT         reduce using rule 84 (expr_head -> atom .)
    FUN             reduce using rule 84 (expr_head -> atom .)
    FOR             reduce using rule 84 (expr_head -> atom .)
    IF              reduce using rule 84 (expr_head -> atom .)
    WHILE           reduce using rule 84 (expr_head -> atom .)
    BREAK           reduce using rule 84 (expr_head -> atom .)
    CONTINUE        reduce using rule 84 (expr_head -> atom .)
    RETURN          reduce using rule 84 (expr_head -> atom .)
    IDENTIFIER      reduce using rule 84 (expr_head -> atom .)
    $end            reduce using rule 84 (expr_head -> atom .)
    INPUT           reduce using rule 84 (expr_head -> atom .)
    OUTPUT          reduce using rule 84 (expr_head -> atom .)
    MODEL           reduce using rule 84 (expr_head -> atom .)
    CHAT            reduce using rule 84 (expr_head -> atom .)
    DEDENT          reduce using rule 84 (expr_head -> atom .)
    RBRACKET        reduce using rule 84 (expr_head -> atom .)
    COMMA           reduce using rule 84 (expr_head -> atom .)
    RPAREN          reduce using rule 84 (expr_head -> atom .)
    RBRACE          reduce using rule 84 (expr_head -> atom .)


state 39

    (85) expr_head -> list_expr .

    PLUS            reduce using rule 85 (expr_head -> list_expr .)
    MINUS           reduce using rule 85 (expr_head -> list_expr .)
    TIMES           reduce using rule 85 (expr_head -> list_expr .)
    DIVIDE          reduce using rule 85 (expr_head -> list_expr .)
    MOD             reduce using rule 85 (expr_head -> list_expr .)
    EQ              reduce using rule 85 (expr_head -> list_expr .)
    NEQ             reduce using rule 85 (expr_head -> list_expr .)
    LT              reduce using rule 85 (expr_head -> list_expr .)
    GT              reduce using rule 85 (expr_head -> list_expr .)
    LE              reduce using rule 85 (expr_head -> list_expr .)
    GE              reduce using rule 85 (expr_head -> list_expr .)
    COLON           reduce using rule 85 (expr_head -> list_expr .)
    AGENT           reduce using rule 85 (expr_head -> list_expr .)
    CONNECT         reduce using rule 85 (expr_head -> list_expr .)
    FUN             reduce using rule 85 (expr_head -> list_expr .)
    FOR             reduce using rule 85 (expr_head -> list_expr .)
    IF              reduce using rule 85 (expr_head -> list_expr .)
    WHILE           reduce using rule 85 (expr_head -> list_expr .)
    BREAK           reduce using rule 85 (expr_head -> list_expr .)
    CONTINUE        reduce using rule 85 (expr_head -> list_expr .)
    RETURN          reduce using rule 85 (expr_head -> list_expr .)
    IDENTIFIER      reduce using rule 85 (expr_head -> list_expr .)
    $end            reduce using rule 85 (expr_head -> list_expr .)
    INPUT           reduce using rule 85 (expr_head -> list_expr .)
    OUTPUT          reduce using rule 85 (expr_head -> list_expr .)
    MODEL           reduce using rule 85 (expr_head -> list_expr .)
    CHAT            reduce using rule 85 (expr_head -> list_expr .)
    DEDENT          reduce using rule 85 (expr_head -> list_expr .)
    RBRACKET        reduce using rule 85 (expr_head -> list_expr .)
    COMMA           reduce using rule 85 (expr_head -> list_expr .)
    RPAREN          reduce using rule 85 (expr_head -> list_expr .)
    RBRACE          reduce using rule 85 (expr_head -> list_expr .)


state 40

    (86) expr_head -> record_expr .

    PLUS            reduce using rule 86 (expr_head -> record_expr .)
    MINUS           reduce using rule 86 (expr_head -> record_expr .)
    TIMES           reduce using rule 86 (expr_head -> record_expr .)
    DIVIDE          reduce using rule 86 (expr_head -> record_expr .)
    MOD             reduce using rule 86 (expr_head -> record_expr .)
    EQ              reduce using rule 86 (expr_head -> record_expr .)
    NEQ             reduce using rule 86 (expr_head -> record_expr .)
    LT              reduce using rule 86 (expr_head -> record_expr .)
    GT              reduce using rule 86 (expr_head -> record_expr .)
    LE              reduce using rule 86 (expr_head -> record_expr .)
    GE              reduce using rule 86 (expr_head -> record_expr .)
    COLON           reduce using rule 86 (expr_head -> record_expr .)
    AGENT           reduce using rule 86 (expr_head -> record_expr .)
    CONNECT         reduce using rule 86 (expr_head -> record_expr .)
    FUN             reduce using rule 86 (expr_head -> record_expr .)
    FOR             reduce using rule 86 (expr_head -> record_expr .)
    IF              reduce using rule 86 (expr_head -> record_expr .)
    WHILE           reduce using rule 86 (expr_head -> record_expr .)
    BREAK           reduce using rule 86 (expr_head -> record_expr .)
    CONTINUE        reduce using rule 86 (expr_head -> record_expr .)
    RETURN          reduce using rule 86 (expr_head -> record_expr .)
    IDENTIFIER      reduce using rule 86 (expr_head -> record_expr .)
    $end            reduce using rule 86 (expr_head -> record_expr .)
    INPUT           reduce using rule 86 (expr_head -> record_expr .)
    OUTPUT          reduce using rule 86 (expr_head -> record_expr .)
    MODEL           reduce using rule 86 (expr_head -> record_expr .)
    CHAT            reduce using rule 86 (expr_head -> record_expr .)
    DEDENT          reduce using rule 86 (expr_head -> record_expr .)
    RBRACKET        reduce using rule 86 (expr_head -> record_expr .)
    COMMA           reduce using rule 86 (expr_head -> record_expr .)
    RPAREN          reduce using rule 86 (expr_head -> record_expr .)
    RBRACE          reduce using rule 86 (expr_head -> record_expr .)


state 41

    (87) expr_head -> field_access .

    PLUS            reduce using rule 87 (expr_head -> field_access .)
    MINUS           reduce using rule 87 (expr_head -> field_access .)
    TIMES           reduce using rule 87 (expr_head -> field_access .)
    DIVIDE          reduce using rule 87 (expr_head -> field_access .)
    MOD             reduce using rule 87 (expr_head -> field_access .)
    EQ              reduce using rule 87 (expr_head -> field_access .)
    NEQ             reduce using rule 87 (expr_head -> field_access .)
    LT              reduce using rule 87 (expr_head -> field_access .)
    GT              reduce using rule 87 (expr_head -> field_access .)
    LE              reduce using rule 87 (expr_head -> field_access .)
    GE              reduce using rule 87 (expr_head -> field_access .)
    COLON           reduce using rule 87 (expr_head -> field_access .)
    AGENT           reduce using rule 87 (expr_head -> field_access .)
    CONNECT         reduce using rule 87 (expr_head -> field_access .)
    FUN             reduce using rule 87 (expr_head -> field_access .)
    FOR             reduce using rule 87 (expr_head -> field_access .)
    IF              reduce using rule 87 (expr_head -> field_access .)
    WHILE           reduce using rule 87 (expr_head -> field_access .)
    BREAK           reduce using rule 87 (expr_head -> field_access .)
    CONTINUE        reduce using rule 87 (expr_head -> field_access .)
    RETURN          reduce using rule 87 (expr_head -> field_access .)
    IDENTIFIER      reduce using rule 87 (expr_head -> field_access .)
    $end            reduce using rule 87 (expr_head -> field_access .)
    INPUT           reduce using rule 87 (expr_head -> field_access .)
    OUTPUT          reduce using rule 87 (expr_head -> field_access .)
    MODEL           reduce using rule 87 (expr_head -> field_access .)
    CHAT            reduce using rule 87 (expr_head -> field_access .)
    DEDENT          reduce using rule 87 (expr_head -> field_access .)
    RBRACKET        reduce using rule 87 (expr_head -> field_access .)
    COMMA           reduce using rule 87 (expr_head -> field_access .)
    RPAREN          reduce using rule 87 (expr_head -> field_access .)
    RBRACE          reduce using rule 87 (expr_head -> field_access .)


state 42

    (88) expr_head -> func_call .

    PLUS            reduce using rule 88 (expr_head -> func_call .)
    MINUS           reduce using rule 88 (expr_head -> func_call .)
    TIMES           reduce using rule 88 (expr_head -> func_call .)
    DIVIDE          reduce using rule 88 (expr_head -> func_call .)
    MOD             reduce using rule 88 (expr_head -> func_call .)
    EQ              reduce using rule 88 (expr_head -> func_call .)
    NEQ             reduce using rule 88 (expr_head -> func_call .)
    LT              reduce using rule 88 (expr_head -> func_call .)
    GT              reduce using rule 88 (expr_head -> func_call .)
    LE              reduce using rule 88 (expr_head -> func_call .)
    GE              reduce using rule 88 (expr_head -> func_call .)
    COLON           reduce using rule 88 (expr_head -> func_call .)
    AGENT           reduce using rule 88 (expr_head -> func_call .)
    CONNECT         reduce using rule 88 (expr_head -> func_call .)
    FUN             reduce using rule 88 (expr_head -> func_call .)
    FOR             reduce using rule 88 (expr_head -> func_call .)
    IF              reduce using rule 88 (expr_head -> func_call .)
    WHILE           reduce using rule 88 (expr_head -> func_call .)
    BREAK           reduce using rule 88 (expr_head -> func_call .)
    CONTINUE        reduce using rule 88 (expr_head -> func_call .)
    RETURN          reduce using rule 88 (expr_head -> func_call .)
    IDENTIFIER      reduce using rule 88 (expr_head -> func_call .)
    $end            reduce using rule 88 (expr_head -> func_call .)
    INPUT           reduce using rule 88 (expr_head -> func_call .)
    OUTPUT          reduce using rule 88 (expr_head -> func_call .)
    MODEL           reduce using rule 88 (expr_head -> func_call .)
    CHAT            reduce using rule 88 (expr_head -> func_call .)
    DEDENT          reduce using rule 88 (expr_head -> func_call .)
    RBRACKET        reduce using rule 88 (expr_head -> func_call .)
    COMMA           reduce using rule 88 (expr_head -> func_call .)
    RPAREN          reduce using rule 88 (expr_head -> func_call .)
    RBRACE          reduce using rule 88 (expr_head -> func_call .)


state 43

    (90) atom -> identifier .
    (107) field_access -> identifier . DOT identifier
    (108) func_call -> identifier . LPAREN arg_list RPAREN

    PLUS            reduce using rule 90 (atom -> identifier .)
    MINUS           reduce using rule 90 (atom -> identifier .)
    TIMES           reduce using rule 90 (atom -> identifier .)
    DIVIDE          reduce using rule 90 (atom -> identifier .)
    MOD             reduce using rule 90 (atom -> identifier .)
    EQ              reduce using rule 90 (atom -> identifier .)
    NEQ             reduce using rule 90 (atom -> identifier .)
    LT              reduce using rule 90 (atom -> identifier .)
    GT              reduce using rule 90 (atom -> identifier .)
    LE              reduce using rule 90 (atom -> identifier .)
    GE              reduce using rule 90 (atom -> identifier .)
    COLON           reduce using rule 90 (atom -> identifier .)
    AGENT           reduce using rule 90 (atom -> identifier .)
    CONNECT         reduce using rule 90 (atom -> identifier .)
    FUN             reduce using rule 90 (atom -> identifier .)
    FOR             reduce using rule 90 (atom -> identifier .)
    IF              reduce using rule 90 (atom -> identifier .)
    WHILE           reduce using rule 90 (atom -> identifier .)
    BREAK           reduce using rule 90 (atom -> identifier .)
    CONTINUE        reduce using rule 90 (atom -> identifier .)
    RETURN          reduce using rule 90 (atom -> identifier .)
    IDENTIFIER      reduce using rule 90 (atom -> identifier .)
    $end            reduce using rule 90 (atom -> identifier .)
    INPUT           reduce using rule 90 (atom -> identifier .)
    OUTPUT          reduce using rule 90 (atom -> identifier .)
    MODEL           reduce using rule 90 (atom -> identifier .)
    CHAT            reduce using rule 90 (atom -> identifier .)
    DEDENT          reduce using rule 90 (atom -> identifier .)
    RBRACKET        reduce using rule 90 (atom -> identifier .)
    COMMA           reduce using rule 90 (atom -> identifier .)
    RPAREN          reduce using rule 90 (atom -> identifier .)
    RBRACE          reduce using rule 90 (atom -> identifier .)
    DOT             shift and go to state 31
    LPAREN          shift and go to state 72


state 44

    (91) atom -> constant .

    PLUS            reduce using rule 91 (atom -> constant .)
    MINUS           reduce using rule 91 (atom -> constant .)
    TIMES           reduce using rule 91 (atom -> constant .)
    DIVIDE          reduce using rule 91 (atom -> constant .)
    MOD             reduce using rule 91 (atom -> constant .)
    EQ              reduce using rule 91 (atom -> constant .)
    NEQ             reduce using rule 91 (atom -> constant .)
    LT              reduce using rule 91 (atom -> constant .)
    GT              reduce using rule 91 (atom -> constant .)
    LE              reduce using rule 91 (atom -> constant .)
    GE              reduce using rule 91 (atom -> constant .)
    COLON           reduce using rule 91 (atom -> constant .)
    AGENT           reduce using rule 91 (atom -> constant .)
    CONNECT         reduce using rule 91 (atom -> constant .)
    FUN             reduce using rule 91 (atom -> constant .)
    FOR             reduce using rule 91 (atom -> constant .)
    IF              reduce using rule 91 (atom -> constant .)
    WHILE           reduce using rule 91 (atom -> constant .)
    BREAK           reduce using rule 91 (atom -> constant .)
    CONTINUE        reduce using rule 91 (atom -> constant .)
    RETURN          reduce using rule 91 (atom -> constant .)
    IDENTIFIER      reduce using rule 91 (atom -> constant .)
    $end            reduce using rule 91 (atom -> constant .)
    INPUT           reduce using rule 91 (atom -> constant .)
    OUTPUT          reduce using rule 91 (atom -> constant .)
    MODEL           reduce using rule 91 (atom -> constant .)
    CHAT            reduce using rule 91 (atom -> constant .)
    DEDENT          reduce using rule 91 (atom -> constant .)
    RBRACKET        reduce using rule 91 (atom -> constant .)
    COMMA           reduce using rule 91 (atom -> constant .)
    RPAREN          reduce using rule 91 (atom -> constant .)
    RBRACE          reduce using rule 91 (atom -> constant .)


state 45

    (95) list_expr -> LBRACKET . list_elements RBRACKET
    (96) list_elements -> . expr list_elements_tail
    (97) list_elements -> . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    list_elements                  shift and go to state 73
    expr                           shift and go to state 74
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 46

    (100) record_expr -> LBRACE . record_elements RBRACE
    (101) record_elements -> . instance_assign record_elements_tail
    (102) record_elements -> . instance_assign
    (105) instance_assign -> . identifier EQUALS expr
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    record_elements                shift and go to state 75
    instance_assign                shift and go to state 76
    identifier                     shift and go to state 77

state 47

    (93) constant -> STRING .

    PLUS            reduce using rule 93 (constant -> STRING .)
    MINUS           reduce using rule 93 (constant -> STRING .)
    TIMES           reduce using rule 93 (constant -> STRING .)
    DIVIDE          reduce using rule 93 (constant -> STRING .)
    MOD             reduce using rule 93 (constant -> STRING .)
    EQ              reduce using rule 93 (constant -> STRING .)
    NEQ             reduce using rule 93 (constant -> STRING .)
    LT              reduce using rule 93 (constant -> STRING .)
    GT              reduce using rule 93 (constant -> STRING .)
    LE              reduce using rule 93 (constant -> STRING .)
    GE              reduce using rule 93 (constant -> STRING .)
    COLON           reduce using rule 93 (constant -> STRING .)
    AGENT           reduce using rule 93 (constant -> STRING .)
    CONNECT         reduce using rule 93 (constant -> STRING .)
    FUN             reduce using rule 93 (constant -> STRING .)
    FOR             reduce using rule 93 (constant -> STRING .)
    IF              reduce using rule 93 (constant -> STRING .)
    WHILE           reduce using rule 93 (constant -> STRING .)
    BREAK           reduce using rule 93 (constant -> STRING .)
    CONTINUE        reduce using rule 93 (constant -> STRING .)
    RETURN          reduce using rule 93 (constant -> STRING .)
    IDENTIFIER      reduce using rule 93 (constant -> STRING .)
    $end            reduce using rule 93 (constant -> STRING .)
    INPUT           reduce using rule 93 (constant -> STRING .)
    OUTPUT          reduce using rule 93 (constant -> STRING .)
    MODEL           reduce using rule 93 (constant -> STRING .)
    CHAT            reduce using rule 93 (constant -> STRING .)
    DEDENT          reduce using rule 93 (constant -> STRING .)
    RBRACKET        reduce using rule 93 (constant -> STRING .)
    COMMA           reduce using rule 93 (constant -> STRING .)
    RPAREN          reduce using rule 93 (constant -> STRING .)
    RBRACE          reduce using rule 93 (constant -> STRING .)


state 48

    (94) constant -> NUMBER .

    PLUS            reduce using rule 94 (constant -> NUMBER .)
    MINUS           reduce using rule 94 (constant -> NUMBER .)
    TIMES           reduce using rule 94 (constant -> NUMBER .)
    DIVIDE          reduce using rule 94 (constant -> NUMBER .)
    MOD             reduce using rule 94 (constant -> NUMBER .)
    EQ              reduce using rule 94 (constant -> NUMBER .)
    NEQ             reduce using rule 94 (constant -> NUMBER .)
    LT              reduce using rule 94 (constant -> NUMBER .)
    GT              reduce using rule 94 (constant -> NUMBER .)
    LE              reduce using rule 94 (constant -> NUMBER .)
    GE              reduce using rule 94 (constant -> NUMBER .)
    COLON           reduce using rule 94 (constant -> NUMBER .)
    AGENT           reduce using rule 94 (constant -> NUMBER .)
    CONNECT         reduce using rule 94 (constant -> NUMBER .)
    FUN             reduce using rule 94 (constant -> NUMBER .)
    FOR             reduce using rule 94 (constant -> NUMBER .)
    IF              reduce using rule 94 (constant -> NUMBER .)
    WHILE           reduce using rule 94 (constant -> NUMBER .)
    BREAK           reduce using rule 94 (constant -> NUMBER .)
    CONTINUE        reduce using rule 94 (constant -> NUMBER .)
    RETURN          reduce using rule 94 (constant -> NUMBER .)
    IDENTIFIER      reduce using rule 94 (constant -> NUMBER .)
    $end            reduce using rule 94 (constant -> NUMBER .)
    INPUT           reduce using rule 94 (constant -> NUMBER .)
    OUTPUT          reduce using rule 94 (constant -> NUMBER .)
    MODEL           reduce using rule 94 (constant -> NUMBER .)
    CHAT            reduce using rule 94 (constant -> NUMBER .)
    DEDENT          reduce using rule 94 (constant -> NUMBER .)
    RBRACKET        reduce using rule 94 (constant -> NUMBER .)
    COMMA           reduce using rule 94 (constant -> NUMBER .)
    RPAREN          reduce using rule 94 (constant -> NUMBER .)
    RBRACE          reduce using rule 94 (constant -> NUMBER .)


state 49

    (81) while_stmt -> WHILE expr . COLON stmt_block

    COLON           shift and go to state 78


state 50

    (70) assign_stmt -> assign_target COLON . type EQUALS expr
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type                           shift and go to state 79
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 51

    (71) assign_stmt -> assign_target EQUALS . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr                           shift and go to state 92
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 52

    (75) return_stmt -> RETURN expr .

    AGENT           reduce using rule 75 (return_stmt -> RETURN expr .)
    CONNECT         reduce using rule 75 (return_stmt -> RETURN expr .)
    FUN             reduce using rule 75 (return_stmt -> RETURN expr .)
    FOR             reduce using rule 75 (return_stmt -> RETURN expr .)
    IF              reduce using rule 75 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 75 (return_stmt -> RETURN expr .)
    BREAK           reduce using rule 75 (return_stmt -> RETURN expr .)
    CONTINUE        reduce using rule 75 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 75 (return_stmt -> RETURN expr .)
    IDENTIFIER      reduce using rule 75 (return_stmt -> RETURN expr .)
    $end            reduce using rule 75 (return_stmt -> RETURN expr .)
    INPUT           reduce using rule 75 (return_stmt -> RETURN expr .)
    OUTPUT          reduce using rule 75 (return_stmt -> RETURN expr .)
    MODEL           reduce using rule 75 (return_stmt -> RETURN expr .)
    CHAT            reduce using rule 75 (return_stmt -> RETURN expr .)
    DEDENT          reduce using rule 75 (return_stmt -> RETURN expr .)


state 53

    (31) agent_def -> AGENT identifier COLON . INDENT agent_body DEDENT

    INDENT          shift and go to state 93


state 54

    (107) field_access -> identifier DOT identifier .

    COLON           reduce using rule 107 (field_access -> identifier DOT identifier .)
    EQUALS          reduce using rule 107 (field_access -> identifier DOT identifier .)
    PLUS            reduce using rule 107 (field_access -> identifier DOT identifier .)
    MINUS           reduce using rule 107 (field_access -> identifier DOT identifier .)
    TIMES           reduce using rule 107 (field_access -> identifier DOT identifier .)
    DIVIDE          reduce using rule 107 (field_access -> identifier DOT identifier .)
    MOD             reduce using rule 107 (field_access -> identifier DOT identifier .)
    EQ              reduce using rule 107 (field_access -> identifier DOT identifier .)
    NEQ             reduce using rule 107 (field_access -> identifier DOT identifier .)
    LT              reduce using rule 107 (field_access -> identifier DOT identifier .)
    GT              reduce using rule 107 (field_access -> identifier DOT identifier .)
    LE              reduce using rule 107 (field_access -> identifier DOT identifier .)
    GE              reduce using rule 107 (field_access -> identifier DOT identifier .)
    AGENT           reduce using rule 107 (field_access -> identifier DOT identifier .)
    CONNECT         reduce using rule 107 (field_access -> identifier DOT identifier .)
    FUN             reduce using rule 107 (field_access -> identifier DOT identifier .)
    FOR             reduce using rule 107 (field_access -> identifier DOT identifier .)
    IF              reduce using rule 107 (field_access -> identifier DOT identifier .)
    WHILE           reduce using rule 107 (field_access -> identifier DOT identifier .)
    BREAK           reduce using rule 107 (field_access -> identifier DOT identifier .)
    CONTINUE        reduce using rule 107 (field_access -> identifier DOT identifier .)
    RETURN          reduce using rule 107 (field_access -> identifier DOT identifier .)
    IDENTIFIER      reduce using rule 107 (field_access -> identifier DOT identifier .)
    $end            reduce using rule 107 (field_access -> identifier DOT identifier .)
    INPUT           reduce using rule 107 (field_access -> identifier DOT identifier .)
    OUTPUT          reduce using rule 107 (field_access -> identifier DOT identifier .)
    MODEL           reduce using rule 107 (field_access -> identifier DOT identifier .)
    CHAT            reduce using rule 107 (field_access -> identifier DOT identifier .)
    DEDENT          reduce using rule 107 (field_access -> identifier DOT identifier .)
    RBRACKET        reduce using rule 107 (field_access -> identifier DOT identifier .)
    COMMA           reduce using rule 107 (field_access -> identifier DOT identifier .)
    RPAREN          reduce using rule 107 (field_access -> identifier DOT identifier .)
    RBRACE          reduce using rule 107 (field_access -> identifier DOT identifier .)


state 55

    (106) index_access -> identifier LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 94


state 56

    (44) connect_block -> CONNECT COLON INDENT . connection_list DEDENT
    (45) connection_list -> . connection connection_list
    (46) connection_list -> . connection
    (47) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    connection_list                shift and go to state 95
    connection                     shift and go to state 96
    identifier                     shift and go to state 97

state 57

    (53) func_def -> FUN identifier LPAREN . param_list RPAREN ARROW type COLON stmt_block
    (54) func_def -> FUN identifier LPAREN . param_list RPAREN COLON stmt_block
    (55) param_list -> . param_decl param_list_tail
    (56) param_list -> . empty
    (59) param_decl -> . var_decl
    (124) empty -> .
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (92) identifier -> . IDENTIFIER

    RPAREN          reduce using rule 124 (empty -> .)
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 98
    param_list                     shift and go to state 99
    param_decl                     shift and go to state 100
    empty                          shift and go to state 101
    var_decl                       shift and go to state 102

state 58

    (76) for_stmt -> FOR identifier IN . expr COLON stmt_block
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    identifier                     shift and go to state 43
    expr                           shift and go to state 103
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    constant                       shift and go to state 44

state 59

    (79) if_stmt -> IF expr COLON . stmt_block ELSE COLON stmt_block
    (80) if_stmt -> IF expr COLON . stmt_block
    (60) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 105

    stmt_block                     shift and go to state 104

state 60

    (82) expr -> expr_head bin_op . expr_tail
    (89) expr_tail -> . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr_head                      shift and go to state 37
    expr_tail                      shift and go to state 106
    expr                           shift and go to state 107
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 61

    (113) bin_op -> PLUS .

    LBRACKET        reduce using rule 113 (bin_op -> PLUS .)
    LBRACE          reduce using rule 113 (bin_op -> PLUS .)
    IDENTIFIER      reduce using rule 113 (bin_op -> PLUS .)
    STRING          reduce using rule 113 (bin_op -> PLUS .)
    NUMBER          reduce using rule 113 (bin_op -> PLUS .)


state 62

    (114) bin_op -> MINUS .

    LBRACKET        reduce using rule 114 (bin_op -> MINUS .)
    LBRACE          reduce using rule 114 (bin_op -> MINUS .)
    IDENTIFIER      reduce using rule 114 (bin_op -> MINUS .)
    STRING          reduce using rule 114 (bin_op -> MINUS .)
    NUMBER          reduce using rule 114 (bin_op -> MINUS .)


state 63

    (115) bin_op -> TIMES .

    LBRACKET        reduce using rule 115 (bin_op -> TIMES .)
    LBRACE          reduce using rule 115 (bin_op -> TIMES .)
    IDENTIFIER      reduce using rule 115 (bin_op -> TIMES .)
    STRING          reduce using rule 115 (bin_op -> TIMES .)
    NUMBER          reduce using rule 115 (bin_op -> TIMES .)


state 64

    (116) bin_op -> DIVIDE .

    LBRACKET        reduce using rule 116 (bin_op -> DIVIDE .)
    LBRACE          reduce using rule 116 (bin_op -> DIVIDE .)
    IDENTIFIER      reduce using rule 116 (bin_op -> DIVIDE .)
    STRING          reduce using rule 116 (bin_op -> DIVIDE .)
    NUMBER          reduce using rule 116 (bin_op -> DIVIDE .)


state 65

    (117) bin_op -> MOD .

    LBRACKET        reduce using rule 117 (bin_op -> MOD .)
    LBRACE          reduce using rule 117 (bin_op -> MOD .)
    IDENTIFIER      reduce using rule 117 (bin_op -> MOD .)
    STRING          reduce using rule 117 (bin_op -> MOD .)
    NUMBER          reduce using rule 117 (bin_op -> MOD .)


state 66

    (118) bin_op -> EQ .

    LBRACKET        reduce using rule 118 (bin_op -> EQ .)
    LBRACE          reduce using rule 118 (bin_op -> EQ .)
    IDENTIFIER      reduce using rule 118 (bin_op -> EQ .)
    STRING          reduce using rule 118 (bin_op -> EQ .)
    NUMBER          reduce using rule 118 (bin_op -> EQ .)


state 67

    (119) bin_op -> NEQ .

    LBRACKET        reduce using rule 119 (bin_op -> NEQ .)
    LBRACE          reduce using rule 119 (bin_op -> NEQ .)
    IDENTIFIER      reduce using rule 119 (bin_op -> NEQ .)
    STRING          reduce using rule 119 (bin_op -> NEQ .)
    NUMBER          reduce using rule 119 (bin_op -> NEQ .)


state 68

    (120) bin_op -> LT .

    LBRACKET        reduce using rule 120 (bin_op -> LT .)
    LBRACE          reduce using rule 120 (bin_op -> LT .)
    IDENTIFIER      reduce using rule 120 (bin_op -> LT .)
    STRING          reduce using rule 120 (bin_op -> LT .)
    NUMBER          reduce using rule 120 (bin_op -> LT .)


state 69

    (121) bin_op -> GT .

    LBRACKET        reduce using rule 121 (bin_op -> GT .)
    LBRACE          reduce using rule 121 (bin_op -> GT .)
    IDENTIFIER      reduce using rule 121 (bin_op -> GT .)
    STRING          reduce using rule 121 (bin_op -> GT .)
    NUMBER          reduce using rule 121 (bin_op -> GT .)


state 70

    (122) bin_op -> LE .

    LBRACKET        reduce using rule 122 (bin_op -> LE .)
    LBRACE          reduce using rule 122 (bin_op -> LE .)
    IDENTIFIER      reduce using rule 122 (bin_op -> LE .)
    STRING          reduce using rule 122 (bin_op -> LE .)
    NUMBER          reduce using rule 122 (bin_op -> LE .)


state 71

    (123) bin_op -> GE .

    LBRACKET        reduce using rule 123 (bin_op -> GE .)
    LBRACE          reduce using rule 123 (bin_op -> GE .)
    IDENTIFIER      reduce using rule 123 (bin_op -> GE .)
    STRING          reduce using rule 123 (bin_op -> GE .)
    NUMBER          reduce using rule 123 (bin_op -> GE .)


state 72

    (108) func_call -> identifier LPAREN . arg_list RPAREN
    (109) arg_list -> . expr arg_list_tail
    (110) arg_list -> . empty
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (124) empty -> .
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    RPAREN          reduce using rule 124 (empty -> .)
    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    identifier                     shift and go to state 43
    arg_list                       shift and go to state 108
    expr                           shift and go to state 109
    empty                          shift and go to state 110
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    constant                       shift and go to state 44

state 73

    (95) list_expr -> LBRACKET list_elements . RBRACKET

    RBRACKET        shift and go to state 111


state 74

    (96) list_elements -> expr . list_elements_tail
    (97) list_elements -> expr .
    (98) list_elements_tail -> . COMMA expr list_elements_tail
    (99) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 97 (list_elements -> expr .)
    COMMA           shift and go to state 113

    list_elements_tail             shift and go to state 112

state 75

    (100) record_expr -> LBRACE record_elements . RBRACE

    RBRACE          shift and go to state 114


state 76

    (101) record_elements -> instance_assign . record_elements_tail
    (102) record_elements -> instance_assign .
    (103) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (104) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 102 (record_elements -> instance_assign .)
    COMMA           shift and go to state 116

    record_elements_tail           shift and go to state 115

state 77

    (105) instance_assign -> identifier . EQUALS expr

    EQUALS          shift and go to state 117


state 78

    (81) while_stmt -> WHILE expr COLON . stmt_block
    (60) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 105

    stmt_block                     shift and go to state 118

state 79

    (70) assign_stmt -> assign_target COLON type . EQUALS expr

    EQUALS          shift and go to state 119


state 80

    (14) type -> base_type .

    EQUALS          reduce using rule 14 (type -> base_type .)
    COMMA           reduce using rule 14 (type -> base_type .)
    RPAREN          reduce using rule 14 (type -> base_type .)
    RBRACKET        reduce using rule 14 (type -> base_type .)
    INDENT          reduce using rule 14 (type -> base_type .)
    IDENTIFIER      reduce using rule 14 (type -> base_type .)
    DEDENT          reduce using rule 14 (type -> base_type .)
    COLON           reduce using rule 14 (type -> base_type .)
    RBRACE          reduce using rule 14 (type -> base_type .)


state 81

    (15) type -> list_type .

    EQUALS          reduce using rule 15 (type -> list_type .)
    COMMA           reduce using rule 15 (type -> list_type .)
    RPAREN          reduce using rule 15 (type -> list_type .)
    RBRACKET        reduce using rule 15 (type -> list_type .)
    INDENT          reduce using rule 15 (type -> list_type .)
    IDENTIFIER      reduce using rule 15 (type -> list_type .)
    DEDENT          reduce using rule 15 (type -> list_type .)
    COLON           reduce using rule 15 (type -> list_type .)
    RBRACE          reduce using rule 15 (type -> list_type .)


state 82

    (16) type -> record_type .

    EQUALS          reduce using rule 16 (type -> record_type .)
    COMMA           reduce using rule 16 (type -> record_type .)
    RPAREN          reduce using rule 16 (type -> record_type .)
    RBRACKET        reduce using rule 16 (type -> record_type .)
    INDENT          reduce using rule 16 (type -> record_type .)
    IDENTIFIER      reduce using rule 16 (type -> record_type .)
    DEDENT          reduce using rule 16 (type -> record_type .)
    COLON           reduce using rule 16 (type -> record_type .)
    RBRACE          reduce using rule 16 (type -> record_type .)


state 83

    (17) type -> func_ret_type .

    EQUALS          reduce using rule 17 (type -> func_ret_type .)
    COMMA           reduce using rule 17 (type -> func_ret_type .)
    RPAREN          reduce using rule 17 (type -> func_ret_type .)
    RBRACKET        reduce using rule 17 (type -> func_ret_type .)
    INDENT          reduce using rule 17 (type -> func_ret_type .)
    IDENTIFIER      reduce using rule 17 (type -> func_ret_type .)
    DEDENT          reduce using rule 17 (type -> func_ret_type .)
    COLON           reduce using rule 17 (type -> func_ret_type .)
    RBRACE          reduce using rule 17 (type -> func_ret_type .)


state 84

    (18) base_type -> TYPE_STR .

    EQUALS          reduce using rule 18 (base_type -> TYPE_STR .)
    COMMA           reduce using rule 18 (base_type -> TYPE_STR .)
    RPAREN          reduce using rule 18 (base_type -> TYPE_STR .)
    RBRACKET        reduce using rule 18 (base_type -> TYPE_STR .)
    INDENT          reduce using rule 18 (base_type -> TYPE_STR .)
    IDENTIFIER      reduce using rule 18 (base_type -> TYPE_STR .)
    DEDENT          reduce using rule 18 (base_type -> TYPE_STR .)
    COLON           reduce using rule 18 (base_type -> TYPE_STR .)
    RBRACE          reduce using rule 18 (base_type -> TYPE_STR .)


state 85

    (19) base_type -> TYPE_INT .

    EQUALS          reduce using rule 19 (base_type -> TYPE_INT .)
    COMMA           reduce using rule 19 (base_type -> TYPE_INT .)
    RPAREN          reduce using rule 19 (base_type -> TYPE_INT .)
    RBRACKET        reduce using rule 19 (base_type -> TYPE_INT .)
    INDENT          reduce using rule 19 (base_type -> TYPE_INT .)
    IDENTIFIER      reduce using rule 19 (base_type -> TYPE_INT .)
    DEDENT          reduce using rule 19 (base_type -> TYPE_INT .)
    COLON           reduce using rule 19 (base_type -> TYPE_INT .)
    RBRACE          reduce using rule 19 (base_type -> TYPE_INT .)


state 86

    (20) base_type -> TYPE_FLOAT .

    EQUALS          reduce using rule 20 (base_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 20 (base_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 20 (base_type -> TYPE_FLOAT .)
    RBRACKET        reduce using rule 20 (base_type -> TYPE_FLOAT .)
    INDENT          reduce using rule 20 (base_type -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 20 (base_type -> TYPE_FLOAT .)
    DEDENT          reduce using rule 20 (base_type -> TYPE_FLOAT .)
    COLON           reduce using rule 20 (base_type -> TYPE_FLOAT .)
    RBRACE          reduce using rule 20 (base_type -> TYPE_FLOAT .)


state 87

    (21) base_type -> TYPE_BOOL .

    EQUALS          reduce using rule 21 (base_type -> TYPE_BOOL .)
    COMMA           reduce using rule 21 (base_type -> TYPE_BOOL .)
    RPAREN          reduce using rule 21 (base_type -> TYPE_BOOL .)
    RBRACKET        reduce using rule 21 (base_type -> TYPE_BOOL .)
    INDENT          reduce using rule 21 (base_type -> TYPE_BOOL .)
    IDENTIFIER      reduce using rule 21 (base_type -> TYPE_BOOL .)
    DEDENT          reduce using rule 21 (base_type -> TYPE_BOOL .)
    COLON           reduce using rule 21 (base_type -> TYPE_BOOL .)
    RBRACE          reduce using rule 21 (base_type -> TYPE_BOOL .)


state 88

    (22) base_type -> TYPE_VOID .

    EQUALS          reduce using rule 22 (base_type -> TYPE_VOID .)
    COMMA           reduce using rule 22 (base_type -> TYPE_VOID .)
    RPAREN          reduce using rule 22 (base_type -> TYPE_VOID .)
    RBRACKET        reduce using rule 22 (base_type -> TYPE_VOID .)
    INDENT          reduce using rule 22 (base_type -> TYPE_VOID .)
    IDENTIFIER      reduce using rule 22 (base_type -> TYPE_VOID .)
    DEDENT          reduce using rule 22 (base_type -> TYPE_VOID .)
    COLON           reduce using rule 22 (base_type -> TYPE_VOID .)
    RBRACE          reduce using rule 22 (base_type -> TYPE_VOID .)


state 89

    (26) list_type -> TYPE_LIST . LBRACKET type RBRACKET

    LBRACKET        shift and go to state 120


state 90

    (27) record_type -> TYPE_RECORD . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 121


state 91

    (23) func_ret_type -> LPAREN . type_list RPAREN
    (24) type_list -> . type
    (25) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type_list                      shift and go to state 122
    type                           shift and go to state 123
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 92

    (71) assign_stmt -> assign_target EQUALS expr .

    AGENT           reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    CONNECT         reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    FUN             reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    FOR             reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    IF              reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    WHILE           reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    BREAK           reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    CONTINUE        reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    RETURN          reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    IDENTIFIER      reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    $end            reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    INPUT           reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    OUTPUT          reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    MODEL           reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    CHAT            reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)
    DEDENT          reduce using rule 71 (assign_stmt -> assign_target EQUALS expr .)


state 93

    (31) agent_def -> AGENT identifier COLON INDENT . agent_body DEDENT
    (32) agent_body -> . agent_body_item agent_body
    (33) agent_body -> . agent_body_item
    (34) agent_body_item -> . input_block
    (35) agent_body_item -> . output_block
    (36) agent_body_item -> . model_block
    (37) agent_body_item -> . statement
    (38) agent_body_item -> . chat_block
    (39) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (40) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (41) model_block -> . MODEL COLON constant
    (63) statement -> . for_stmt
    (64) statement -> . if_stmt
    (65) statement -> . while_stmt
    (66) statement -> . assign_stmt
    (67) statement -> . break_stmt
    (68) statement -> . continue_stmt
    (69) statement -> . return_stmt
    (42) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (43) chat_block -> . CHAT COLON TRIPLE_STRING
    (76) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (79) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> . IF expr COLON stmt_block
    (81) while_stmt -> . WHILE expr COLON stmt_block
    (70) assign_stmt -> . assign_target COLON type EQUALS expr
    (71) assign_stmt -> . assign_target EQUALS expr
    (77) break_stmt -> . BREAK
    (78) continue_stmt -> . CONTINUE
    (75) return_stmt -> . RETURN expr
    (72) assign_target -> . identifier
    (73) assign_target -> . field_access
    (74) assign_target -> . index_access
    (92) identifier -> . IDENTIFIER
    (107) field_access -> . identifier DOT identifier
    (106) index_access -> . identifier LBRACKET expr RBRACKET

    INPUT           shift and go to state 131
    OUTPUT          shift and go to state 132
    MODEL           shift and go to state 133
    CHAT            shift and go to state 134
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 16
    agent_body                     shift and go to state 124
    agent_body_item                shift and go to state 125
    input_block                    shift and go to state 126
    output_block                   shift and go to state 127
    model_block                    shift and go to state 128
    statement                      shift and go to state 129
    chat_block                     shift and go to state 130
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 94

    (106) index_access -> identifier LBRACKET expr RBRACKET .

    COLON           reduce using rule 106 (index_access -> identifier LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 106 (index_access -> identifier LBRACKET expr RBRACKET .)


state 95

    (44) connect_block -> CONNECT COLON INDENT connection_list . DEDENT

    DEDENT          shift and go to state 135


state 96

    (45) connection_list -> connection . connection_list
    (46) connection_list -> connection .
    (45) connection_list -> . connection connection_list
    (46) connection_list -> . connection
    (47) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (92) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 46 (connection_list -> connection .)
    IDENTIFIER      shift and go to state 28

    connection                     shift and go to state 96
    connection_list                shift and go to state 136
    identifier                     shift and go to state 97

state 97

    (47) connection -> identifier . COLON type INDENT agent_ref ARROW agent_ref DEDENT

    COLON           shift and go to state 137


state 98

    (10) var_decl -> identifier . COLON type EQUALS expr
    (11) var_decl -> identifier . COLON type
    (12) var_decl -> identifier . EQUALS expr
    (13) var_decl -> identifier .

    COLON           shift and go to state 138
    EQUALS          shift and go to state 139
    COMMA           reduce using rule 13 (var_decl -> identifier .)
    RPAREN          reduce using rule 13 (var_decl -> identifier .)
    IDENTIFIER      reduce using rule 13 (var_decl -> identifier .)
    DEDENT          reduce using rule 13 (var_decl -> identifier .)


state 99

    (53) func_def -> FUN identifier LPAREN param_list . RPAREN ARROW type COLON stmt_block
    (54) func_def -> FUN identifier LPAREN param_list . RPAREN COLON stmt_block

    RPAREN          shift and go to state 140


state 100

    (55) param_list -> param_decl . param_list_tail
    (57) param_list_tail -> . COMMA param_decl param_list_tail
    (58) param_list_tail -> . empty
    (124) empty -> .

    COMMA           shift and go to state 142
    RPAREN          reduce using rule 124 (empty -> .)

    param_list_tail                shift and go to state 141
    empty                          shift and go to state 143

state 101

    (56) param_list -> empty .

    RPAREN          reduce using rule 56 (param_list -> empty .)


state 102

    (59) param_decl -> var_decl .

    COMMA           reduce using rule 59 (param_decl -> var_decl .)
    RPAREN          reduce using rule 59 (param_decl -> var_decl .)


state 103

    (76) for_stmt -> FOR identifier IN expr . COLON stmt_block

    COLON           shift and go to state 144


state 104

    (79) if_stmt -> IF expr COLON stmt_block . ELSE COLON stmt_block
    (80) if_stmt -> IF expr COLON stmt_block .

    ELSE            shift and go to state 145
    AGENT           reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    CONNECT         reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    FUN             reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    FOR             reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    IF              reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    WHILE           reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    BREAK           reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    CONTINUE        reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    RETURN          reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    $end            reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    INPUT           reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    OUTPUT          reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    MODEL           reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    CHAT            reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)
    DEDENT          reduce using rule 80 (if_stmt -> IF expr COLON stmt_block .)


state 105

    (60) stmt_block -> INDENT . statement_list DEDENT
    (61) statement_list -> . statement statement_list
    (62) statement_list -> . statement
    (63) statement -> . for_stmt
    (64) statement -> . if_stmt
    (65) statement -> . while_stmt
    (66) statement -> . assign_stmt
    (67) statement -> . break_stmt
    (68) statement -> . continue_stmt
    (69) statement -> . return_stmt
    (76) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (79) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> . IF expr COLON stmt_block
    (81) while_stmt -> . WHILE expr COLON stmt_block
    (70) assign_stmt -> . assign_target COLON type EQUALS expr
    (71) assign_stmt -> . assign_target EQUALS expr
    (77) break_stmt -> . BREAK
    (78) continue_stmt -> . CONTINUE
    (75) return_stmt -> . RETURN expr
    (72) assign_target -> . identifier
    (73) assign_target -> . field_access
    (74) assign_target -> . index_access
    (92) identifier -> . IDENTIFIER
    (107) field_access -> . identifier DOT identifier
    (106) index_access -> . identifier LBRACKET expr RBRACKET

    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    statement_list                 shift and go to state 146
    statement                      shift and go to state 147
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 106

    (82) expr -> expr_head bin_op expr_tail .

    COLON           reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    AGENT           reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    CONNECT         reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    FUN             reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    FOR             reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    IF              reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    WHILE           reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    BREAK           reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    CONTINUE        reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    RETURN          reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    IDENTIFIER      reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    $end            reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    INPUT           reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    OUTPUT          reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    MODEL           reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    CHAT            reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    DEDENT          reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    RBRACKET        reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    COMMA           reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    RPAREN          reduce using rule 82 (expr -> expr_head bin_op expr_tail .)
    RBRACE          reduce using rule 82 (expr -> expr_head bin_op expr_tail .)


state 107

    (89) expr_tail -> expr .

    COLON           reduce using rule 89 (expr_tail -> expr .)
    AGENT           reduce using rule 89 (expr_tail -> expr .)
    CONNECT         reduce using rule 89 (expr_tail -> expr .)
    FUN             reduce using rule 89 (expr_tail -> expr .)
    FOR             reduce using rule 89 (expr_tail -> expr .)
    IF              reduce using rule 89 (expr_tail -> expr .)
    WHILE           reduce using rule 89 (expr_tail -> expr .)
    BREAK           reduce using rule 89 (expr_tail -> expr .)
    CONTINUE        reduce using rule 89 (expr_tail -> expr .)
    RETURN          reduce using rule 89 (expr_tail -> expr .)
    IDENTIFIER      reduce using rule 89 (expr_tail -> expr .)
    $end            reduce using rule 89 (expr_tail -> expr .)
    INPUT           reduce using rule 89 (expr_tail -> expr .)
    OUTPUT          reduce using rule 89 (expr_tail -> expr .)
    MODEL           reduce using rule 89 (expr_tail -> expr .)
    CHAT            reduce using rule 89 (expr_tail -> expr .)
    DEDENT          reduce using rule 89 (expr_tail -> expr .)
    RBRACKET        reduce using rule 89 (expr_tail -> expr .)
    COMMA           reduce using rule 89 (expr_tail -> expr .)
    RPAREN          reduce using rule 89 (expr_tail -> expr .)
    RBRACE          reduce using rule 89 (expr_tail -> expr .)


state 108

    (108) func_call -> identifier LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 148


state 109

    (109) arg_list -> expr . arg_list_tail
    (111) arg_list_tail -> . COMMA expr arg_list_tail
    (112) arg_list_tail -> . empty
    (124) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 124 (empty -> .)

    arg_list_tail                  shift and go to state 149
    empty                          shift and go to state 151

state 110

    (110) arg_list -> empty .

    RPAREN          reduce using rule 110 (arg_list -> empty .)


state 111

    (95) list_expr -> LBRACKET list_elements RBRACKET .

    PLUS            reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    MINUS           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    TIMES           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    DIVIDE          reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    MOD             reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    EQ              reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    NEQ             reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    LT              reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    GT              reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    LE              reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    GE              reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    COLON           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    AGENT           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONNECT         reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    FUN             reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    FOR             reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    IF              reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    WHILE           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    BREAK           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONTINUE        reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    RETURN          reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    IDENTIFIER      reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    $end            reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    INPUT           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    OUTPUT          reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    MODEL           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    CHAT            reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    DEDENT          reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACKET        reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    COMMA           reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    RPAREN          reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACE          reduce using rule 95 (list_expr -> LBRACKET list_elements RBRACKET .)


state 112

    (96) list_elements -> expr list_elements_tail .

    RBRACKET        reduce using rule 96 (list_elements -> expr list_elements_tail .)


state 113

    (98) list_elements_tail -> COMMA . expr list_elements_tail
    (99) list_elements_tail -> COMMA . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr                           shift and go to state 152
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 114

    (100) record_expr -> LBRACE record_elements RBRACE .

    PLUS            reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    MINUS           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    TIMES           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    DIVIDE          reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    MOD             reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    EQ              reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    NEQ             reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    LT              reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    GT              reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    LE              reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    GE              reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    COLON           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    AGENT           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    CONNECT         reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    FUN             reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    FOR             reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    IF              reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    WHILE           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    BREAK           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    CONTINUE        reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    RETURN          reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    IDENTIFIER      reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    $end            reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    INPUT           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    OUTPUT          reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    MODEL           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    CHAT            reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    DEDENT          reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACKET        reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    COMMA           reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    RPAREN          reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACE          reduce using rule 100 (record_expr -> LBRACE record_elements RBRACE .)


state 115

    (101) record_elements -> instance_assign record_elements_tail .

    RBRACE          reduce using rule 101 (record_elements -> instance_assign record_elements_tail .)


state 116

    (103) record_elements_tail -> COMMA . instance_assign record_elements_tail
    (104) record_elements_tail -> COMMA . instance_assign
    (105) instance_assign -> . identifier EQUALS expr
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    instance_assign                shift and go to state 153
    identifier                     shift and go to state 77

state 117

    (105) instance_assign -> identifier EQUALS . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    identifier                     shift and go to state 43
    expr                           shift and go to state 154
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    constant                       shift and go to state 44

state 118

    (81) while_stmt -> WHILE expr COLON stmt_block .

    AGENT           reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    CONNECT         reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    FUN             reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    FOR             reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    IF              reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    WHILE           reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    BREAK           reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    CONTINUE        reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    RETURN          reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    $end            reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    INPUT           reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    OUTPUT          reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    MODEL           reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    CHAT            reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)
    DEDENT          reduce using rule 81 (while_stmt -> WHILE expr COLON stmt_block .)


state 119

    (70) assign_stmt -> assign_target COLON type EQUALS . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr                           shift and go to state 155
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 120

    (26) list_type -> TYPE_LIST LBRACKET . type RBRACKET
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type                           shift and go to state 156
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 121

    (27) record_type -> TYPE_RECORD LBRACE . field_decl_list RBRACE
    (28) field_decl_list -> . field_decl COMMA field_decl_list
    (29) field_decl_list -> . field_decl
    (30) field_decl -> . identifier COLON type
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl_list                shift and go to state 157
    field_decl                     shift and go to state 158
    identifier                     shift and go to state 159

state 122

    (23) func_ret_type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 160


state 123

    (24) type_list -> type .
    (25) type_list -> type . COMMA type_list

    RPAREN          reduce using rule 24 (type_list -> type .)
    COMMA           shift and go to state 161


state 124

    (31) agent_def -> AGENT identifier COLON INDENT agent_body . DEDENT

    DEDENT          shift and go to state 162


state 125

    (32) agent_body -> agent_body_item . agent_body
    (33) agent_body -> agent_body_item .
    (32) agent_body -> . agent_body_item agent_body
    (33) agent_body -> . agent_body_item
    (34) agent_body_item -> . input_block
    (35) agent_body_item -> . output_block
    (36) agent_body_item -> . model_block
    (37) agent_body_item -> . statement
    (38) agent_body_item -> . chat_block
    (39) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (40) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (41) model_block -> . MODEL COLON constant
    (63) statement -> . for_stmt
    (64) statement -> . if_stmt
    (65) statement -> . while_stmt
    (66) statement -> . assign_stmt
    (67) statement -> . break_stmt
    (68) statement -> . continue_stmt
    (69) statement -> . return_stmt
    (42) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (43) chat_block -> . CHAT COLON TRIPLE_STRING
    (76) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (79) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> . IF expr COLON stmt_block
    (81) while_stmt -> . WHILE expr COLON stmt_block
    (70) assign_stmt -> . assign_target COLON type EQUALS expr
    (71) assign_stmt -> . assign_target EQUALS expr
    (77) break_stmt -> . BREAK
    (78) continue_stmt -> . CONTINUE
    (75) return_stmt -> . RETURN expr
    (72) assign_target -> . identifier
    (73) assign_target -> . field_access
    (74) assign_target -> . index_access
    (92) identifier -> . IDENTIFIER
    (107) field_access -> . identifier DOT identifier
    (106) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 33 (agent_body -> agent_body_item .)
    INPUT           shift and go to state 131
    OUTPUT          shift and go to state 132
    MODEL           shift and go to state 133
    CHAT            shift and go to state 134
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    agent_body_item                shift and go to state 125
    agent_body                     shift and go to state 163
    input_block                    shift and go to state 126
    output_block                   shift and go to state 127
    model_block                    shift and go to state 128
    statement                      shift and go to state 129
    chat_block                     shift and go to state 130
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 126

    (34) agent_body_item -> input_block .

    INPUT           reduce using rule 34 (agent_body_item -> input_block .)
    OUTPUT          reduce using rule 34 (agent_body_item -> input_block .)
    MODEL           reduce using rule 34 (agent_body_item -> input_block .)
    CHAT            reduce using rule 34 (agent_body_item -> input_block .)
    FOR             reduce using rule 34 (agent_body_item -> input_block .)
    IF              reduce using rule 34 (agent_body_item -> input_block .)
    WHILE           reduce using rule 34 (agent_body_item -> input_block .)
    BREAK           reduce using rule 34 (agent_body_item -> input_block .)
    CONTINUE        reduce using rule 34 (agent_body_item -> input_block .)
    RETURN          reduce using rule 34 (agent_body_item -> input_block .)
    IDENTIFIER      reduce using rule 34 (agent_body_item -> input_block .)
    DEDENT          reduce using rule 34 (agent_body_item -> input_block .)


state 127

    (35) agent_body_item -> output_block .

    INPUT           reduce using rule 35 (agent_body_item -> output_block .)
    OUTPUT          reduce using rule 35 (agent_body_item -> output_block .)
    MODEL           reduce using rule 35 (agent_body_item -> output_block .)
    CHAT            reduce using rule 35 (agent_body_item -> output_block .)
    FOR             reduce using rule 35 (agent_body_item -> output_block .)
    IF              reduce using rule 35 (agent_body_item -> output_block .)
    WHILE           reduce using rule 35 (agent_body_item -> output_block .)
    BREAK           reduce using rule 35 (agent_body_item -> output_block .)
    CONTINUE        reduce using rule 35 (agent_body_item -> output_block .)
    RETURN          reduce using rule 35 (agent_body_item -> output_block .)
    IDENTIFIER      reduce using rule 35 (agent_body_item -> output_block .)
    DEDENT          reduce using rule 35 (agent_body_item -> output_block .)


state 128

    (36) agent_body_item -> model_block .

    INPUT           reduce using rule 36 (agent_body_item -> model_block .)
    OUTPUT          reduce using rule 36 (agent_body_item -> model_block .)
    MODEL           reduce using rule 36 (agent_body_item -> model_block .)
    CHAT            reduce using rule 36 (agent_body_item -> model_block .)
    FOR             reduce using rule 36 (agent_body_item -> model_block .)
    IF              reduce using rule 36 (agent_body_item -> model_block .)
    WHILE           reduce using rule 36 (agent_body_item -> model_block .)
    BREAK           reduce using rule 36 (agent_body_item -> model_block .)
    CONTINUE        reduce using rule 36 (agent_body_item -> model_block .)
    RETURN          reduce using rule 36 (agent_body_item -> model_block .)
    IDENTIFIER      reduce using rule 36 (agent_body_item -> model_block .)
    DEDENT          reduce using rule 36 (agent_body_item -> model_block .)


state 129

    (37) agent_body_item -> statement .

    INPUT           reduce using rule 37 (agent_body_item -> statement .)
    OUTPUT          reduce using rule 37 (agent_body_item -> statement .)
    MODEL           reduce using rule 37 (agent_body_item -> statement .)
    CHAT            reduce using rule 37 (agent_body_item -> statement .)
    FOR             reduce using rule 37 (agent_body_item -> statement .)
    IF              reduce using rule 37 (agent_body_item -> statement .)
    WHILE           reduce using rule 37 (agent_body_item -> statement .)
    BREAK           reduce using rule 37 (agent_body_item -> statement .)
    CONTINUE        reduce using rule 37 (agent_body_item -> statement .)
    RETURN          reduce using rule 37 (agent_body_item -> statement .)
    IDENTIFIER      reduce using rule 37 (agent_body_item -> statement .)
    DEDENT          reduce using rule 37 (agent_body_item -> statement .)


state 130

    (38) agent_body_item -> chat_block .

    INPUT           reduce using rule 38 (agent_body_item -> chat_block .)
    OUTPUT          reduce using rule 38 (agent_body_item -> chat_block .)
    MODEL           reduce using rule 38 (agent_body_item -> chat_block .)
    CHAT            reduce using rule 38 (agent_body_item -> chat_block .)
    FOR             reduce using rule 38 (agent_body_item -> chat_block .)
    IF              reduce using rule 38 (agent_body_item -> chat_block .)
    WHILE           reduce using rule 38 (agent_body_item -> chat_block .)
    BREAK           reduce using rule 38 (agent_body_item -> chat_block .)
    CONTINUE        reduce using rule 38 (agent_body_item -> chat_block .)
    RETURN          reduce using rule 38 (agent_body_item -> chat_block .)
    IDENTIFIER      reduce using rule 38 (agent_body_item -> chat_block .)
    DEDENT          reduce using rule 38 (agent_body_item -> chat_block .)


state 131

    (39) input_block -> INPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 164


state 132

    (40) output_block -> OUTPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 165


state 133

    (41) model_block -> MODEL . COLON constant

    COLON           shift and go to state 166


state 134

    (42) chat_block -> CHAT . identifier COLON TRIPLE_STRING
    (43) chat_block -> CHAT . COLON TRIPLE_STRING
    (92) identifier -> . IDENTIFIER

    COLON           shift and go to state 168
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 167

state 135

    (44) connect_block -> CONNECT COLON INDENT connection_list DEDENT .

    AGENT           reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONNECT         reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FUN             reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FOR             reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IF              reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    WHILE           reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    BREAK           reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONTINUE        reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    RETURN          reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IDENTIFIER      reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    $end            reduce using rule 44 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)


state 136

    (45) connection_list -> connection connection_list .

    DEDENT          reduce using rule 45 (connection_list -> connection connection_list .)


state 137

    (47) connection -> identifier COLON . type INDENT agent_ref ARROW agent_ref DEDENT
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type                           shift and go to state 169
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 138

    (10) var_decl -> identifier COLON . type EQUALS expr
    (11) var_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type                           shift and go to state 170
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 139

    (12) var_decl -> identifier EQUALS . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    identifier                     shift and go to state 43
    expr                           shift and go to state 171
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    constant                       shift and go to state 44

state 140

    (53) func_def -> FUN identifier LPAREN param_list RPAREN . ARROW type COLON stmt_block
    (54) func_def -> FUN identifier LPAREN param_list RPAREN . COLON stmt_block

    ARROW           shift and go to state 172
    COLON           shift and go to state 173


state 141

    (55) param_list -> param_decl param_list_tail .

    RPAREN          reduce using rule 55 (param_list -> param_decl param_list_tail .)


state 142

    (57) param_list_tail -> COMMA . param_decl param_list_tail
    (59) param_decl -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    param_decl                     shift and go to state 174
    var_decl                       shift and go to state 102
    identifier                     shift and go to state 98

state 143

    (58) param_list_tail -> empty .

    RPAREN          reduce using rule 58 (param_list_tail -> empty .)


state 144

    (76) for_stmt -> FOR identifier IN expr COLON . stmt_block
    (60) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 105

    stmt_block                     shift and go to state 175

state 145

    (79) if_stmt -> IF expr COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 176


state 146

    (60) stmt_block -> INDENT statement_list . DEDENT

    DEDENT          shift and go to state 177


state 147

    (61) statement_list -> statement . statement_list
    (62) statement_list -> statement .
    (61) statement_list -> . statement statement_list
    (62) statement_list -> . statement
    (63) statement -> . for_stmt
    (64) statement -> . if_stmt
    (65) statement -> . while_stmt
    (66) statement -> . assign_stmt
    (67) statement -> . break_stmt
    (68) statement -> . continue_stmt
    (69) statement -> . return_stmt
    (76) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (79) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (80) if_stmt -> . IF expr COLON stmt_block
    (81) while_stmt -> . WHILE expr COLON stmt_block
    (70) assign_stmt -> . assign_target COLON type EQUALS expr
    (71) assign_stmt -> . assign_target EQUALS expr
    (77) break_stmt -> . BREAK
    (78) continue_stmt -> . CONTINUE
    (75) return_stmt -> . RETURN expr
    (72) assign_target -> . identifier
    (73) assign_target -> . field_access
    (74) assign_target -> . index_access
    (92) identifier -> . IDENTIFIER
    (107) field_access -> . identifier DOT identifier
    (106) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 62 (statement_list -> statement .)
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    statement                      shift and go to state 147
    statement_list                 shift and go to state 178
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 148

    (108) func_call -> identifier LPAREN arg_list RPAREN .

    PLUS            reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    MOD             reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    EQ              reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    LT              reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    GT              reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    LE              reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    GE              reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    COLON           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    AGENT           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONNECT         reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    FUN             reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    FOR             reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    IF              reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    $end            reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    INPUT           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    OUTPUT          reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    MODEL           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    CHAT            reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    DEDENT          reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 108 (func_call -> identifier LPAREN arg_list RPAREN .)


state 149

    (109) arg_list -> expr arg_list_tail .

    RPAREN          reduce using rule 109 (arg_list -> expr arg_list_tail .)


state 150

    (111) arg_list_tail -> COMMA . expr arg_list_tail
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    expr                           shift and go to state 179
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    identifier                     shift and go to state 43
    constant                       shift and go to state 44

state 151

    (112) arg_list_tail -> empty .

    RPAREN          reduce using rule 112 (arg_list_tail -> empty .)


state 152

    (98) list_elements_tail -> COMMA expr . list_elements_tail
    (99) list_elements_tail -> COMMA expr .
    (98) list_elements_tail -> . COMMA expr list_elements_tail
    (99) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 99 (list_elements_tail -> COMMA expr .)
    COMMA           shift and go to state 113

    list_elements_tail             shift and go to state 180

state 153

    (103) record_elements_tail -> COMMA instance_assign . record_elements_tail
    (104) record_elements_tail -> COMMA instance_assign .
    (103) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (104) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 104 (record_elements_tail -> COMMA instance_assign .)
    COMMA           shift and go to state 116

    record_elements_tail           shift and go to state 181

state 154

    (105) instance_assign -> identifier EQUALS expr .

    COMMA           reduce using rule 105 (instance_assign -> identifier EQUALS expr .)
    RBRACE          reduce using rule 105 (instance_assign -> identifier EQUALS expr .)


state 155

    (70) assign_stmt -> assign_target COLON type EQUALS expr .

    AGENT           reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONNECT         reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FUN             reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FOR             reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IF              reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    WHILE           reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    BREAK           reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONTINUE        reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    RETURN          reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    $end            reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    INPUT           reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    OUTPUT          reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    MODEL           reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CHAT            reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)
    DEDENT          reduce using rule 70 (assign_stmt -> assign_target COLON type EQUALS expr .)


state 156

    (26) list_type -> TYPE_LIST LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 182


state 157

    (27) record_type -> TYPE_RECORD LBRACE field_decl_list . RBRACE

    RBRACE          shift and go to state 183


state 158

    (28) field_decl_list -> field_decl . COMMA field_decl_list
    (29) field_decl_list -> field_decl .

    COMMA           shift and go to state 184
    RBRACE          reduce using rule 29 (field_decl_list -> field_decl .)


state 159

    (30) field_decl -> identifier . COLON type

    COLON           shift and go to state 185


state 160

    (23) func_ret_type -> LPAREN type_list RPAREN .

    EQUALS          reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    COMMA           reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    RPAREN          reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACKET        reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    INDENT          reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    IDENTIFIER      reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    DEDENT          reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    COLON           reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACE          reduce using rule 23 (func_ret_type -> LPAREN type_list RPAREN .)


state 161

    (25) type_list -> type COMMA . type_list
    (24) type_list -> . type
    (25) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type                           shift and go to state 123
    type_list                      shift and go to state 186
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 162

    (31) agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .

    AGENT           reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONNECT         reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FUN             reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FOR             reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IF              reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    WHILE           reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    BREAK           reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONTINUE        reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    RETURN          reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IDENTIFIER      reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    $end            reduce using rule 31 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)


state 163

    (32) agent_body -> agent_body_item agent_body .

    DEDENT          reduce using rule 32 (agent_body -> agent_body_item agent_body .)


state 164

    (39) input_block -> INPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 187


state 165

    (40) output_block -> OUTPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 188


state 166

    (41) model_block -> MODEL COLON . constant
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    constant                       shift and go to state 189

state 167

    (42) chat_block -> CHAT identifier . COLON TRIPLE_STRING

    COLON           shift and go to state 190


state 168

    (43) chat_block -> CHAT COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 191


state 169

    (47) connection -> identifier COLON type . INDENT agent_ref ARROW agent_ref DEDENT

    INDENT          shift and go to state 192


state 170

    (10) var_decl -> identifier COLON type . EQUALS expr
    (11) var_decl -> identifier COLON type .

    EQUALS          shift and go to state 193
    COMMA           reduce using rule 11 (var_decl -> identifier COLON type .)
    RPAREN          reduce using rule 11 (var_decl -> identifier COLON type .)
    IDENTIFIER      reduce using rule 11 (var_decl -> identifier COLON type .)
    DEDENT          reduce using rule 11 (var_decl -> identifier COLON type .)


state 171

    (12) var_decl -> identifier EQUALS expr .

    COMMA           reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    RPAREN          reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    IDENTIFIER      reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    DEDENT          reduce using rule 12 (var_decl -> identifier EQUALS expr .)


state 172

    (53) func_def -> FUN identifier LPAREN param_list RPAREN ARROW . type COLON stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type                           shift and go to state 194
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 173

    (54) func_def -> FUN identifier LPAREN param_list RPAREN COLON . stmt_block
    (60) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 105

    stmt_block                     shift and go to state 195

state 174

    (57) param_list_tail -> COMMA param_decl . param_list_tail
    (57) param_list_tail -> . COMMA param_decl param_list_tail
    (58) param_list_tail -> . empty
    (124) empty -> .

    COMMA           shift and go to state 142
    RPAREN          reduce using rule 124 (empty -> .)

    param_list_tail                shift and go to state 196
    empty                          shift and go to state 143

state 175

    (76) for_stmt -> FOR identifier IN expr COLON stmt_block .

    AGENT           reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONNECT         reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FUN             reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FOR             reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IF              reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    WHILE           reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    BREAK           reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONTINUE        reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    RETURN          reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    $end            reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    INPUT           reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    OUTPUT          reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    MODEL           reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CHAT            reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    DEDENT          reduce using rule 76 (for_stmt -> FOR identifier IN expr COLON stmt_block .)


state 176

    (79) if_stmt -> IF expr COLON stmt_block ELSE COLON . stmt_block
    (60) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 105

    stmt_block                     shift and go to state 197

state 177

    (60) stmt_block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    AGENT           reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    CONNECT         reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    FUN             reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    BREAK           reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    CONTINUE        reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    IDENTIFIER      reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    INPUT           reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    OUTPUT          reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    MODEL           reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    CHAT            reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 60 (stmt_block -> INDENT statement_list DEDENT .)


state 178

    (61) statement_list -> statement statement_list .

    DEDENT          reduce using rule 61 (statement_list -> statement statement_list .)


state 179

    (111) arg_list_tail -> COMMA expr . arg_list_tail
    (111) arg_list_tail -> . COMMA expr arg_list_tail
    (112) arg_list_tail -> . empty
    (124) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 124 (empty -> .)

    arg_list_tail                  shift and go to state 198
    empty                          shift and go to state 151

state 180

    (98) list_elements_tail -> COMMA expr list_elements_tail .

    RBRACKET        reduce using rule 98 (list_elements_tail -> COMMA expr list_elements_tail .)


state 181

    (103) record_elements_tail -> COMMA instance_assign record_elements_tail .

    RBRACE          reduce using rule 103 (record_elements_tail -> COMMA instance_assign record_elements_tail .)


state 182

    (26) list_type -> TYPE_LIST LBRACKET type RBRACKET .

    EQUALS          reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COMMA           reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    INDENT          reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    IDENTIFIER      reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    DEDENT          reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COLON           reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACE          reduce using rule 26 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)


state 183

    (27) record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .

    EQUALS          reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COMMA           reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RPAREN          reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACKET        reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    INDENT          reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IDENTIFIER      reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    DEDENT          reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COLON           reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACE          reduce using rule 27 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)


state 184

    (28) field_decl_list -> field_decl COMMA . field_decl_list
    (28) field_decl_list -> . field_decl COMMA field_decl_list
    (29) field_decl_list -> . field_decl
    (30) field_decl -> . identifier COLON type
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl                     shift and go to state 158
    field_decl_list                shift and go to state 199
    identifier                     shift and go to state 159

state 185

    (30) field_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) base_type -> . TYPE_STR
    (19) base_type -> . TYPE_INT
    (20) base_type -> . TYPE_FLOAT
    (21) base_type -> . TYPE_BOOL
    (22) base_type -> . TYPE_VOID
    (26) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (27) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (23) func_ret_type -> . LPAREN type_list RPAREN

    TYPE_STR        shift and go to state 84
    TYPE_INT        shift and go to state 85
    TYPE_FLOAT      shift and go to state 86
    TYPE_BOOL       shift and go to state 87
    TYPE_VOID       shift and go to state 88
    TYPE_LIST       shift and go to state 89
    TYPE_RECORD     shift and go to state 90
    LPAREN          shift and go to state 91

    type                           shift and go to state 200
    base_type                      shift and go to state 80
    list_type                      shift and go to state 81
    record_type                    shift and go to state 82
    func_ret_type                  shift and go to state 83

state 186

    (25) type_list -> type COMMA type_list .

    RPAREN          reduce using rule 25 (type_list -> type COMMA type_list .)


state 187

    (39) input_block -> INPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 201
    var_decl                       shift and go to state 202
    identifier                     shift and go to state 98

state 188

    (40) output_block -> OUTPUT COLON INDENT . var_decl_list DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 203
    var_decl                       shift and go to state 202
    identifier                     shift and go to state 98

state 189

    (41) model_block -> MODEL COLON constant .

    INPUT           reduce using rule 41 (model_block -> MODEL COLON constant .)
    OUTPUT          reduce using rule 41 (model_block -> MODEL COLON constant .)
    MODEL           reduce using rule 41 (model_block -> MODEL COLON constant .)
    CHAT            reduce using rule 41 (model_block -> MODEL COLON constant .)
    FOR             reduce using rule 41 (model_block -> MODEL COLON constant .)
    IF              reduce using rule 41 (model_block -> MODEL COLON constant .)
    WHILE           reduce using rule 41 (model_block -> MODEL COLON constant .)
    BREAK           reduce using rule 41 (model_block -> MODEL COLON constant .)
    CONTINUE        reduce using rule 41 (model_block -> MODEL COLON constant .)
    RETURN          reduce using rule 41 (model_block -> MODEL COLON constant .)
    IDENTIFIER      reduce using rule 41 (model_block -> MODEL COLON constant .)
    DEDENT          reduce using rule 41 (model_block -> MODEL COLON constant .)


state 190

    (42) chat_block -> CHAT identifier COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 204


state 191

    (43) chat_block -> CHAT COLON TRIPLE_STRING .

    INPUT           reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    MODEL           reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CHAT            reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    FOR             reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IF              reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    WHILE           reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    BREAK           reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    RETURN          reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 43 (chat_block -> CHAT COLON TRIPLE_STRING .)


state 192

    (47) connection -> identifier COLON type INDENT . agent_ref ARROW agent_ref DEDENT
    (48) agent_ref -> . identifier agent_ref_tail
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 205
    agent_ref                      shift and go to state 206

state 193

    (10) var_decl -> identifier COLON type EQUALS . expr
    (82) expr -> . expr_head bin_op expr_tail
    (83) expr -> . expr_head
    (84) expr_head -> . atom
    (85) expr_head -> . list_expr
    (86) expr_head -> . record_expr
    (87) expr_head -> . field_access
    (88) expr_head -> . func_call
    (90) atom -> . identifier
    (91) atom -> . constant
    (95) list_expr -> . LBRACKET list_elements RBRACKET
    (100) record_expr -> . LBRACE record_elements RBRACE
    (107) field_access -> . identifier DOT identifier
    (108) func_call -> . identifier LPAREN arg_list RPAREN
    (92) identifier -> . IDENTIFIER
    (93) constant -> . STRING
    (94) constant -> . NUMBER

    LBRACKET        shift and go to state 45
    LBRACE          shift and go to state 46
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 47
    NUMBER          shift and go to state 48

    identifier                     shift and go to state 43
    expr                           shift and go to state 207
    expr_head                      shift and go to state 37
    atom                           shift and go to state 38
    list_expr                      shift and go to state 39
    record_expr                    shift and go to state 40
    field_access                   shift and go to state 41
    func_call                      shift and go to state 42
    constant                       shift and go to state 44

state 194

    (53) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type . COLON stmt_block

    COLON           shift and go to state 208


state 195

    (54) func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .

    AGENT           reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FUN             reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FOR             reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IF              reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    WHILE           reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    BREAK           reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    RETURN          reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    $end            reduce using rule 54 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)


state 196

    (57) param_list_tail -> COMMA param_decl param_list_tail .

    RPAREN          reduce using rule 57 (param_list_tail -> COMMA param_decl param_list_tail .)


state 197

    (79) if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FUN             reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 79 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)


state 198

    (111) arg_list_tail -> COMMA expr arg_list_tail .

    RPAREN          reduce using rule 111 (arg_list_tail -> COMMA expr arg_list_tail .)


state 199

    (28) field_decl_list -> field_decl COMMA field_decl_list .

    RBRACE          reduce using rule 28 (field_decl_list -> field_decl COMMA field_decl_list .)


state 200

    (30) field_decl -> identifier COLON type .

    COMMA           reduce using rule 30 (field_decl -> identifier COLON type .)
    RBRACE          reduce using rule 30 (field_decl -> identifier COLON type .)


state 201

    (39) input_block -> INPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 209


state 202

    (8) var_decl_list -> var_decl . var_decl_list
    (9) var_decl_list -> var_decl .
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (92) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 9 (var_decl_list -> var_decl .)
    IDENTIFIER      shift and go to state 28

    var_decl                       shift and go to state 202
    var_decl_list                  shift and go to state 210
    identifier                     shift and go to state 98

state 203

    (40) output_block -> OUTPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 211


state 204

    (42) chat_block -> CHAT identifier COLON TRIPLE_STRING .

    INPUT           reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    MODEL           reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CHAT            reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    FOR             reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IF              reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    WHILE           reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    BREAK           reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    RETURN          reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 42 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)


state 205

    (48) agent_ref -> identifier . agent_ref_tail
    (49) agent_ref_tail -> . DOT identifier agent_ref_tail
    (50) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (51) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (52) agent_ref_tail -> . empty
    (124) empty -> .

    DOT             shift and go to state 213
    ARROW           reduce using rule 124 (empty -> .)
    DEDENT          reduce using rule 124 (empty -> .)

    agent_ref_tail                 shift and go to state 212
    empty                          shift and go to state 214

state 206

    (47) connection -> identifier COLON type INDENT agent_ref . ARROW agent_ref DEDENT

    ARROW           shift and go to state 215


state 207

    (10) var_decl -> identifier COLON type EQUALS expr .

    COMMA           reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    RPAREN          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    DEDENT          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)


state 208

    (53) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON . stmt_block
    (60) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 105

    stmt_block                     shift and go to state 216

state 209

    (39) input_block -> INPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 39 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)


state 210

    (8) var_decl_list -> var_decl var_decl_list .

    DEDENT          reduce using rule 8 (var_decl_list -> var_decl var_decl_list .)


state 211

    (40) output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 40 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)


state 212

    (48) agent_ref -> identifier agent_ref_tail .

    ARROW           reduce using rule 48 (agent_ref -> identifier agent_ref_tail .)
    DEDENT          reduce using rule 48 (agent_ref -> identifier agent_ref_tail .)


state 213

    (49) agent_ref_tail -> DOT . identifier agent_ref_tail
    (50) agent_ref_tail -> DOT . OUTPUT agent_ref_tail
    (51) agent_ref_tail -> DOT . INPUT agent_ref_tail
    (92) identifier -> . IDENTIFIER

    OUTPUT          shift and go to state 218
    INPUT           shift and go to state 219
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 217

state 214

    (52) agent_ref_tail -> empty .

    ARROW           reduce using rule 52 (agent_ref_tail -> empty .)
    DEDENT          reduce using rule 52 (agent_ref_tail -> empty .)


state 215

    (47) connection -> identifier COLON type INDENT agent_ref ARROW . agent_ref DEDENT
    (48) agent_ref -> . identifier agent_ref_tail
    (92) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 205
    agent_ref                      shift and go to state 220

state 216

    (53) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .

    AGENT           reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONNECT         reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FUN             reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FOR             reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IF              reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    WHILE           reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    BREAK           reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONTINUE        reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    RETURN          reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IDENTIFIER      reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    $end            reduce using rule 53 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)


state 217

    (49) agent_ref_tail -> DOT identifier . agent_ref_tail
    (49) agent_ref_tail -> . DOT identifier agent_ref_tail
    (50) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (51) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (52) agent_ref_tail -> . empty
    (124) empty -> .

    DOT             shift and go to state 213
    ARROW           reduce using rule 124 (empty -> .)
    DEDENT          reduce using rule 124 (empty -> .)

    agent_ref_tail                 shift and go to state 221
    empty                          shift and go to state 214

state 218

    (50) agent_ref_tail -> DOT OUTPUT . agent_ref_tail
    (49) agent_ref_tail -> . DOT identifier agent_ref_tail
    (50) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (51) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (52) agent_ref_tail -> . empty
    (124) empty -> .

    DOT             shift and go to state 213
    ARROW           reduce using rule 124 (empty -> .)
    DEDENT          reduce using rule 124 (empty -> .)

    agent_ref_tail                 shift and go to state 222
    empty                          shift and go to state 214

state 219

    (51) agent_ref_tail -> DOT INPUT . agent_ref_tail
    (49) agent_ref_tail -> . DOT identifier agent_ref_tail
    (50) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (51) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (52) agent_ref_tail -> . empty
    (124) empty -> .

    DOT             shift and go to state 213
    ARROW           reduce using rule 124 (empty -> .)
    DEDENT          reduce using rule 124 (empty -> .)

    agent_ref_tail                 shift and go to state 223
    empty                          shift and go to state 214

state 220

    (47) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref . DEDENT

    DEDENT          shift and go to state 224


state 221

    (49) agent_ref_tail -> DOT identifier agent_ref_tail .

    ARROW           reduce using rule 49 (agent_ref_tail -> DOT identifier agent_ref_tail .)
    DEDENT          reduce using rule 49 (agent_ref_tail -> DOT identifier agent_ref_tail .)


state 222

    (50) agent_ref_tail -> DOT OUTPUT agent_ref_tail .

    ARROW           reduce using rule 50 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)
    DEDENT          reduce using rule 50 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)


state 223

    (51) agent_ref_tail -> DOT INPUT agent_ref_tail .

    ARROW           reduce using rule 51 (agent_ref_tail -> DOT INPUT agent_ref_tail .)
    DEDENT          reduce using rule 51 (agent_ref_tail -> DOT INPUT agent_ref_tail .)


state 224

    (47) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .

    IDENTIFIER      reduce using rule 47 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)
    DEDENT          reduce using rule 47 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)

