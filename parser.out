Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TYPE_TUPLE

Grammar

Rule 0     S' -> program
Rule 1     program -> program_body
Rule 2     program_body -> program_body_item program_body
Rule 3     program_body -> program_body_item
Rule 4     program_body_item -> statement
Rule 5     program_body_item -> agent_def
Rule 6     program_body_item -> connect_block
Rule 7     program_body_item -> func_def
Rule 8     var_decl_list -> var_decl var_decl_list
Rule 9     var_decl_list -> var_decl
Rule 10    var_decl -> identifier COLON type EQUALS expr
Rule 11    var_decl -> identifier COLON type
Rule 12    var_decl -> identifier EQUALS expr
Rule 13    var_decl -> identifier
Rule 14    type -> base_type
Rule 15    type -> list_type
Rule 16    type -> record_type
Rule 17    type -> func_ret_type
Rule 18    type -> union_type
Rule 19    base_type -> TYPE_STR
Rule 20    base_type -> TYPE_INT
Rule 21    base_type -> TYPE_FLOAT
Rule 22    base_type -> TYPE_BOOL
Rule 23    base_type -> TYPE_UNIT
Rule 24    union_type -> TYPE_UNION LBRACKET type_list RBRACKET
Rule 25    func_ret_type -> LPAREN type_list RPAREN
Rule 26    type_list -> type
Rule 27    type_list -> type COMMA type_list
Rule 28    list_type -> TYPE_LIST LBRACKET type RBRACKET
Rule 29    record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE
Rule 30    field_decl_list -> field_decl COMMA field_decl_list
Rule 31    field_decl_list -> field_decl
Rule 32    field_decl -> identifier COLON type
Rule 33    agent_def -> AGENT identifier COLON INDENT agent_body DEDENT
Rule 34    agent_body -> agent_body_item agent_body
Rule 35    agent_body -> agent_body_item
Rule 36    agent_body_item -> input_block
Rule 37    agent_body_item -> output_block
Rule 38    agent_body_item -> model_block
Rule 39    agent_body_item -> statement
Rule 40    agent_body_item -> chat_block
Rule 41    input_block -> INPUT COLON INDENT var_decl_list DEDENT
Rule 42    input_block -> INPUT COLON INDENT error DEDENT
Rule 43    output_block -> OUTPUT COLON INDENT var_decl_list DEDENT
Rule 44    output_block -> OUTPUT COLON INDENT error DEDENT
Rule 45    model_block -> MODEL COLON constant
Rule 46    model_block -> MODEL COLON error
Rule 47    chat_block -> CHAT identifier COLON TRIPLE_STRING
Rule 48    chat_block -> CHAT COLON TRIPLE_STRING
Rule 49    connect_block -> CONNECT COLON INDENT connection_list DEDENT
Rule 50    connection_list -> connection connection_list
Rule 51    connection_list -> connection
Rule 52    connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
Rule 53    agent_ref -> identifier agent_ref_tail
Rule 54    agent_ref_tail -> DOT identifier agent_ref_tail
Rule 55    agent_ref_tail -> DOT OUTPUT agent_ref_tail
Rule 56    agent_ref_tail -> DOT INPUT agent_ref_tail
Rule 57    agent_ref_tail -> empty
Rule 58    func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
Rule 59    func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block
Rule 60    func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block
Rule 61    func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block
Rule 62    param_list -> param_decl param_list_tail
Rule 63    param_list -> empty
Rule 64    param_list_tail -> COMMA param_decl param_list_tail
Rule 65    param_list_tail -> empty
Rule 66    param_decl -> var_decl
Rule 67    stmt_block -> INDENT statement_list DEDENT
Rule 68    statement_list -> statement statement_list
Rule 69    statement_list -> statement
Rule 70    statement -> for_stmt
Rule 71    statement -> if_stmt
Rule 72    statement -> while_stmt
Rule 73    statement -> assign_stmt
Rule 74    statement -> break_stmt
Rule 75    statement -> continue_stmt
Rule 76    statement -> return_stmt
Rule 77    assign_stmt -> assign_target COLON type EQUALS expr
Rule 78    assign_stmt -> assign_target EQUALS expr
Rule 79    assign_stmt -> assign_target COLON type EQUALS error
Rule 80    assign_stmt -> assign_target EQUALS error
Rule 81    assign_target -> identifier
Rule 82    assign_target -> field_access
Rule 83    assign_target -> index_access
Rule 84    return_stmt -> RETURN expr
Rule 85    for_stmt -> FOR identifier IN expr COLON stmt_block
Rule 86    for_stmt -> FOR identifier IN error COLON stmt_block
Rule 87    break_stmt -> BREAK
Rule 88    continue_stmt -> CONTINUE
Rule 89    if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block
Rule 90    if_stmt -> IF expr COLON stmt_block
Rule 91    if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block
Rule 92    if_stmt -> IF error COLON stmt_block
Rule 93    while_stmt -> WHILE expr COLON stmt_block
Rule 94    while_stmt -> WHILE error COLON stmt_block
Rule 95    expr -> expr_head bin_op expr_tail
Rule 96    expr -> expr_head
Rule 97    expr_head -> atom
Rule 98    expr_head -> list_expr
Rule 99    expr_head -> record_expr
Rule 100   expr_head -> field_access
Rule 101   expr_head -> index_access
Rule 102   expr_head -> func_call
Rule 103   expr_tail -> expr
Rule 104   atom -> identifier
Rule 105   atom -> constant
Rule 106   identifier -> IDENTIFIER
Rule 107   constant -> STRING
Rule 108   constant -> NUMBER
Rule 109   list_expr -> LBRACKET list_elements RBRACKET
Rule 110   list_elements -> expr list_elements_tail
Rule 111   list_elements -> expr
Rule 112   list_elements_tail -> COMMA expr list_elements_tail
Rule 113   list_elements_tail -> COMMA expr
Rule 114   record_expr -> LBRACE record_elements RBRACE
Rule 115   record_elements -> instance_assign record_elements_tail
Rule 116   record_elements -> instance_assign
Rule 117   record_elements_tail -> COMMA instance_assign record_elements_tail
Rule 118   record_elements_tail -> COMMA instance_assign
Rule 119   instance_assign -> identifier EQUALS expr
Rule 120   index_access -> identifier LBRACKET expr RBRACKET
Rule 121   field_access -> identifier DOT identifier
Rule 122   func_call -> identifier LPAREN arg_list RPAREN
Rule 123   arg_list -> expr arg_list_tail
Rule 124   arg_list -> empty
Rule 125   arg_list_tail -> COMMA expr arg_list_tail
Rule 126   arg_list_tail -> empty
Rule 127   bin_op -> PLUS
Rule 128   bin_op -> MINUS
Rule 129   bin_op -> TIMES
Rule 130   bin_op -> DIVIDE
Rule 131   bin_op -> MOD
Rule 132   bin_op -> EQ
Rule 133   bin_op -> NEQ
Rule 134   bin_op -> LT
Rule 135   bin_op -> GT
Rule 136   bin_op -> LE
Rule 137   bin_op -> GE
Rule 138   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 33
ARROW                : 52 58 60
BREAK                : 87
CHAT                 : 47 48
COLON                : 10 11 32 33 41 42 43 44 45 46 47 48 49 52 58 59 60 61 77 79 85 86 89 89 90 91 91 92 93 94
COMMA                : 27 30 64 112 113 117 118 125
CONNECT              : 49
CONTINUE             : 88
DEDENT               : 33 41 42 43 44 49 52 67
DIVIDE               : 130
DOT                  : 54 55 56 121
ELSE                 : 89 91
EQ                   : 132
EQUALS               : 10 12 77 78 79 80 119
FOR                  : 85 86
FUN                  : 58 59 60 61
GE                   : 137
GT                   : 135
IDENTIFIER           : 106
IF                   : 89 90 91 92
IN                   : 85 86
INDENT               : 33 41 42 43 44 49 52 67
INPUT                : 41 42 56
LBRACE               : 29 114
LBRACKET             : 24 28 109 120
LE                   : 136
LPAREN               : 25 58 59 60 61 122
LT                   : 134
MINUS                : 128
MOD                  : 131
MODEL                : 45 46
NEQ                  : 133
NEWLINE              : 
NUMBER               : 108
OUTPUT               : 43 44 55
PLUS                 : 127
RBRACE               : 29 114
RBRACKET             : 24 28 109 120
RETURN               : 84
RPAREN               : 25 58 59 60 61 122
STRING               : 107
TIMES                : 129
TRIPLE_STRING        : 47 48
TYPE_BOOL            : 22
TYPE_FLOAT           : 21
TYPE_INT             : 20
TYPE_LIST            : 28
TYPE_RECORD          : 29
TYPE_STR             : 19
TYPE_TUPLE           : 
TYPE_UNION           : 24
TYPE_UNIT            : 23
WHILE                : 93 94
error                : 42 44 46 60 61 79 80 86 91 92 94

Nonterminals, with rules where they appear

agent_body           : 33 34
agent_body_item      : 34 35
agent_def            : 5
agent_ref            : 52 52
agent_ref_tail       : 53 54 55 56
arg_list             : 122
arg_list_tail        : 123 125
assign_stmt          : 73
assign_target        : 77 78 79 80
atom                 : 97
base_type            : 14
bin_op               : 95
break_stmt           : 74
chat_block           : 40
connect_block        : 6
connection           : 50 51
connection_list      : 49 50
constant             : 45 105
continue_stmt        : 75
empty                : 57 63 65 124 126
expr                 : 10 12 77 78 84 85 89 90 93 103 110 111 112 113 119 120 123 125
expr_head            : 95 96
expr_tail            : 95
field_access         : 82 100
field_decl           : 30 31
field_decl_list      : 29 30
for_stmt             : 70
func_call            : 102
func_def             : 7
func_ret_type        : 17
identifier           : 10 11 12 13 32 33 47 52 53 54 58 59 60 61 81 85 86 104 119 120 121 121 122
if_stmt              : 71
index_access         : 83 101
input_block          : 36
instance_assign      : 115 116 117 118
list_elements        : 109
list_elements_tail   : 110 112
list_expr            : 98
list_type            : 15
model_block          : 38
output_block         : 37
param_decl           : 62 64
param_list           : 58 59
param_list_tail      : 62 64
program              : 0
program_body         : 1 2
program_body_item    : 2 3
record_elements      : 114
record_elements_tail : 115 117
record_expr          : 99
record_type          : 16
return_stmt          : 76
statement            : 4 39 68 69
statement_list       : 67 68
stmt_block           : 58 59 60 61 85 86 89 89 90 91 91 92 93 94
type                 : 10 11 26 27 28 32 52 58 60 77 79
type_list            : 24 25 27
union_type           : 18
var_decl             : 8 9 66
var_decl_list        : 8 41 43
while_stmt           : 72


state 0

    (0) S' -> . program
    (1) program -> . program_body
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (70) statement -> . for_stmt
    (71) statement -> . if_stmt
    (72) statement -> . while_stmt
    (73) statement -> . assign_stmt
    (74) statement -> . break_stmt
    (75) statement -> . continue_stmt
    (76) statement -> . return_stmt
    (33) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (49) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (58) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (59) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (60) func_def -> . FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block
    (61) func_def -> . FUN identifier LPAREN error RPAREN COLON stmt_block
    (85) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (86) for_stmt -> . FOR identifier IN error COLON stmt_block
    (89) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> . IF expr COLON stmt_block
    (91) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> . IF error COLON stmt_block
    (93) while_stmt -> . WHILE expr COLON stmt_block
    (94) while_stmt -> . WHILE error COLON stmt_block
    (77) assign_stmt -> . assign_target COLON type EQUALS expr
    (78) assign_stmt -> . assign_target EQUALS expr
    (79) assign_stmt -> . assign_target COLON type EQUALS error
    (80) assign_stmt -> . assign_target EQUALS error
    (87) break_stmt -> . BREAK
    (88) continue_stmt -> . CONTINUE
    (84) return_stmt -> . RETURN expr
    (81) assign_target -> . identifier
    (82) assign_target -> . field_access
    (83) assign_target -> . index_access
    (106) identifier -> . IDENTIFIER
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET

    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    FUN             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    program                        shift and go to state 1
    program_body                   shift and go to state 2
    program_body_item              shift and go to state 3
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (1) program -> program_body .

    $end            reduce using rule 1 (program -> program_body .)


state 3

    (2) program_body -> program_body_item . program_body
    (3) program_body -> program_body_item .
    (2) program_body -> . program_body_item program_body
    (3) program_body -> . program_body_item
    (4) program_body_item -> . statement
    (5) program_body_item -> . agent_def
    (6) program_body_item -> . connect_block
    (7) program_body_item -> . func_def
    (70) statement -> . for_stmt
    (71) statement -> . if_stmt
    (72) statement -> . while_stmt
    (73) statement -> . assign_stmt
    (74) statement -> . break_stmt
    (75) statement -> . continue_stmt
    (76) statement -> . return_stmt
    (33) agent_def -> . AGENT identifier COLON INDENT agent_body DEDENT
    (49) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (58) func_def -> . FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (59) func_def -> . FUN identifier LPAREN param_list RPAREN COLON stmt_block
    (60) func_def -> . FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block
    (61) func_def -> . FUN identifier LPAREN error RPAREN COLON stmt_block
    (85) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (86) for_stmt -> . FOR identifier IN error COLON stmt_block
    (89) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> . IF expr COLON stmt_block
    (91) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> . IF error COLON stmt_block
    (93) while_stmt -> . WHILE expr COLON stmt_block
    (94) while_stmt -> . WHILE error COLON stmt_block
    (77) assign_stmt -> . assign_target COLON type EQUALS expr
    (78) assign_stmt -> . assign_target EQUALS expr
    (79) assign_stmt -> . assign_target COLON type EQUALS error
    (80) assign_stmt -> . assign_target EQUALS error
    (87) break_stmt -> . BREAK
    (88) continue_stmt -> . CONTINUE
    (84) return_stmt -> . RETURN expr
    (81) assign_target -> . identifier
    (82) assign_target -> . field_access
    (83) assign_target -> . index_access
    (106) identifier -> . IDENTIFIER
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET

    $end            reduce using rule 3 (program_body -> program_body_item .)
    AGENT           shift and go to state 15
    CONNECT         shift and go to state 17
    FUN             shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    program_body_item              shift and go to state 3
    program_body                   shift and go to state 29
    statement                      shift and go to state 4
    agent_def                      shift and go to state 5
    connect_block                  shift and go to state 6
    func_def                       shift and go to state 7
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 4

    (4) program_body_item -> statement .

    AGENT           reduce using rule 4 (program_body_item -> statement .)
    CONNECT         reduce using rule 4 (program_body_item -> statement .)
    FUN             reduce using rule 4 (program_body_item -> statement .)
    FOR             reduce using rule 4 (program_body_item -> statement .)
    IF              reduce using rule 4 (program_body_item -> statement .)
    WHILE           reduce using rule 4 (program_body_item -> statement .)
    BREAK           reduce using rule 4 (program_body_item -> statement .)
    CONTINUE        reduce using rule 4 (program_body_item -> statement .)
    RETURN          reduce using rule 4 (program_body_item -> statement .)
    IDENTIFIER      reduce using rule 4 (program_body_item -> statement .)
    $end            reduce using rule 4 (program_body_item -> statement .)


state 5

    (5) program_body_item -> agent_def .

    AGENT           reduce using rule 5 (program_body_item -> agent_def .)
    CONNECT         reduce using rule 5 (program_body_item -> agent_def .)
    FUN             reduce using rule 5 (program_body_item -> agent_def .)
    FOR             reduce using rule 5 (program_body_item -> agent_def .)
    IF              reduce using rule 5 (program_body_item -> agent_def .)
    WHILE           reduce using rule 5 (program_body_item -> agent_def .)
    BREAK           reduce using rule 5 (program_body_item -> agent_def .)
    CONTINUE        reduce using rule 5 (program_body_item -> agent_def .)
    RETURN          reduce using rule 5 (program_body_item -> agent_def .)
    IDENTIFIER      reduce using rule 5 (program_body_item -> agent_def .)
    $end            reduce using rule 5 (program_body_item -> agent_def .)


state 6

    (6) program_body_item -> connect_block .

    AGENT           reduce using rule 6 (program_body_item -> connect_block .)
    CONNECT         reduce using rule 6 (program_body_item -> connect_block .)
    FUN             reduce using rule 6 (program_body_item -> connect_block .)
    FOR             reduce using rule 6 (program_body_item -> connect_block .)
    IF              reduce using rule 6 (program_body_item -> connect_block .)
    WHILE           reduce using rule 6 (program_body_item -> connect_block .)
    BREAK           reduce using rule 6 (program_body_item -> connect_block .)
    CONTINUE        reduce using rule 6 (program_body_item -> connect_block .)
    RETURN          reduce using rule 6 (program_body_item -> connect_block .)
    IDENTIFIER      reduce using rule 6 (program_body_item -> connect_block .)
    $end            reduce using rule 6 (program_body_item -> connect_block .)


state 7

    (7) program_body_item -> func_def .

    AGENT           reduce using rule 7 (program_body_item -> func_def .)
    CONNECT         reduce using rule 7 (program_body_item -> func_def .)
    FUN             reduce using rule 7 (program_body_item -> func_def .)
    FOR             reduce using rule 7 (program_body_item -> func_def .)
    IF              reduce using rule 7 (program_body_item -> func_def .)
    WHILE           reduce using rule 7 (program_body_item -> func_def .)
    BREAK           reduce using rule 7 (program_body_item -> func_def .)
    CONTINUE        reduce using rule 7 (program_body_item -> func_def .)
    RETURN          reduce using rule 7 (program_body_item -> func_def .)
    IDENTIFIER      reduce using rule 7 (program_body_item -> func_def .)
    $end            reduce using rule 7 (program_body_item -> func_def .)


state 8

    (70) statement -> for_stmt .

    AGENT           reduce using rule 70 (statement -> for_stmt .)
    CONNECT         reduce using rule 70 (statement -> for_stmt .)
    FUN             reduce using rule 70 (statement -> for_stmt .)
    FOR             reduce using rule 70 (statement -> for_stmt .)
    IF              reduce using rule 70 (statement -> for_stmt .)
    WHILE           reduce using rule 70 (statement -> for_stmt .)
    BREAK           reduce using rule 70 (statement -> for_stmt .)
    CONTINUE        reduce using rule 70 (statement -> for_stmt .)
    RETURN          reduce using rule 70 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 70 (statement -> for_stmt .)
    $end            reduce using rule 70 (statement -> for_stmt .)
    INPUT           reduce using rule 70 (statement -> for_stmt .)
    OUTPUT          reduce using rule 70 (statement -> for_stmt .)
    MODEL           reduce using rule 70 (statement -> for_stmt .)
    CHAT            reduce using rule 70 (statement -> for_stmt .)
    DEDENT          reduce using rule 70 (statement -> for_stmt .)


state 9

    (71) statement -> if_stmt .

    AGENT           reduce using rule 71 (statement -> if_stmt .)
    CONNECT         reduce using rule 71 (statement -> if_stmt .)
    FUN             reduce using rule 71 (statement -> if_stmt .)
    FOR             reduce using rule 71 (statement -> if_stmt .)
    IF              reduce using rule 71 (statement -> if_stmt .)
    WHILE           reduce using rule 71 (statement -> if_stmt .)
    BREAK           reduce using rule 71 (statement -> if_stmt .)
    CONTINUE        reduce using rule 71 (statement -> if_stmt .)
    RETURN          reduce using rule 71 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 71 (statement -> if_stmt .)
    $end            reduce using rule 71 (statement -> if_stmt .)
    INPUT           reduce using rule 71 (statement -> if_stmt .)
    OUTPUT          reduce using rule 71 (statement -> if_stmt .)
    MODEL           reduce using rule 71 (statement -> if_stmt .)
    CHAT            reduce using rule 71 (statement -> if_stmt .)
    DEDENT          reduce using rule 71 (statement -> if_stmt .)


state 10

    (72) statement -> while_stmt .

    AGENT           reduce using rule 72 (statement -> while_stmt .)
    CONNECT         reduce using rule 72 (statement -> while_stmt .)
    FUN             reduce using rule 72 (statement -> while_stmt .)
    FOR             reduce using rule 72 (statement -> while_stmt .)
    IF              reduce using rule 72 (statement -> while_stmt .)
    WHILE           reduce using rule 72 (statement -> while_stmt .)
    BREAK           reduce using rule 72 (statement -> while_stmt .)
    CONTINUE        reduce using rule 72 (statement -> while_stmt .)
    RETURN          reduce using rule 72 (statement -> while_stmt .)
    IDENTIFIER      reduce using rule 72 (statement -> while_stmt .)
    $end            reduce using rule 72 (statement -> while_stmt .)
    INPUT           reduce using rule 72 (statement -> while_stmt .)
    OUTPUT          reduce using rule 72 (statement -> while_stmt .)
    MODEL           reduce using rule 72 (statement -> while_stmt .)
    CHAT            reduce using rule 72 (statement -> while_stmt .)
    DEDENT          reduce using rule 72 (statement -> while_stmt .)


state 11

    (73) statement -> assign_stmt .

    AGENT           reduce using rule 73 (statement -> assign_stmt .)
    CONNECT         reduce using rule 73 (statement -> assign_stmt .)
    FUN             reduce using rule 73 (statement -> assign_stmt .)
    FOR             reduce using rule 73 (statement -> assign_stmt .)
    IF              reduce using rule 73 (statement -> assign_stmt .)
    WHILE           reduce using rule 73 (statement -> assign_stmt .)
    BREAK           reduce using rule 73 (statement -> assign_stmt .)
    CONTINUE        reduce using rule 73 (statement -> assign_stmt .)
    RETURN          reduce using rule 73 (statement -> assign_stmt .)
    IDENTIFIER      reduce using rule 73 (statement -> assign_stmt .)
    $end            reduce using rule 73 (statement -> assign_stmt .)
    INPUT           reduce using rule 73 (statement -> assign_stmt .)
    OUTPUT          reduce using rule 73 (statement -> assign_stmt .)
    MODEL           reduce using rule 73 (statement -> assign_stmt .)
    CHAT            reduce using rule 73 (statement -> assign_stmt .)
    DEDENT          reduce using rule 73 (statement -> assign_stmt .)


state 12

    (74) statement -> break_stmt .

    AGENT           reduce using rule 74 (statement -> break_stmt .)
    CONNECT         reduce using rule 74 (statement -> break_stmt .)
    FUN             reduce using rule 74 (statement -> break_stmt .)
    FOR             reduce using rule 74 (statement -> break_stmt .)
    IF              reduce using rule 74 (statement -> break_stmt .)
    WHILE           reduce using rule 74 (statement -> break_stmt .)
    BREAK           reduce using rule 74 (statement -> break_stmt .)
    CONTINUE        reduce using rule 74 (statement -> break_stmt .)
    RETURN          reduce using rule 74 (statement -> break_stmt .)
    IDENTIFIER      reduce using rule 74 (statement -> break_stmt .)
    $end            reduce using rule 74 (statement -> break_stmt .)
    INPUT           reduce using rule 74 (statement -> break_stmt .)
    OUTPUT          reduce using rule 74 (statement -> break_stmt .)
    MODEL           reduce using rule 74 (statement -> break_stmt .)
    CHAT            reduce using rule 74 (statement -> break_stmt .)
    DEDENT          reduce using rule 74 (statement -> break_stmt .)


state 13

    (75) statement -> continue_stmt .

    AGENT           reduce using rule 75 (statement -> continue_stmt .)
    CONNECT         reduce using rule 75 (statement -> continue_stmt .)
    FUN             reduce using rule 75 (statement -> continue_stmt .)
    FOR             reduce using rule 75 (statement -> continue_stmt .)
    IF              reduce using rule 75 (statement -> continue_stmt .)
    WHILE           reduce using rule 75 (statement -> continue_stmt .)
    BREAK           reduce using rule 75 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 75 (statement -> continue_stmt .)
    RETURN          reduce using rule 75 (statement -> continue_stmt .)
    IDENTIFIER      reduce using rule 75 (statement -> continue_stmt .)
    $end            reduce using rule 75 (statement -> continue_stmt .)
    INPUT           reduce using rule 75 (statement -> continue_stmt .)
    OUTPUT          reduce using rule 75 (statement -> continue_stmt .)
    MODEL           reduce using rule 75 (statement -> continue_stmt .)
    CHAT            reduce using rule 75 (statement -> continue_stmt .)
    DEDENT          reduce using rule 75 (statement -> continue_stmt .)


state 14

    (76) statement -> return_stmt .

    AGENT           reduce using rule 76 (statement -> return_stmt .)
    CONNECT         reduce using rule 76 (statement -> return_stmt .)
    FUN             reduce using rule 76 (statement -> return_stmt .)
    FOR             reduce using rule 76 (statement -> return_stmt .)
    IF              reduce using rule 76 (statement -> return_stmt .)
    WHILE           reduce using rule 76 (statement -> return_stmt .)
    BREAK           reduce using rule 76 (statement -> return_stmt .)
    CONTINUE        reduce using rule 76 (statement -> return_stmt .)
    RETURN          reduce using rule 76 (statement -> return_stmt .)
    IDENTIFIER      reduce using rule 76 (statement -> return_stmt .)
    $end            reduce using rule 76 (statement -> return_stmt .)
    INPUT           reduce using rule 76 (statement -> return_stmt .)
    OUTPUT          reduce using rule 76 (statement -> return_stmt .)
    MODEL           reduce using rule 76 (statement -> return_stmt .)
    CHAT            reduce using rule 76 (statement -> return_stmt .)
    DEDENT          reduce using rule 76 (statement -> return_stmt .)


state 15

    (33) agent_def -> AGENT . identifier COLON INDENT agent_body DEDENT
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 30

state 16

    (81) assign_target -> identifier .
    (121) field_access -> identifier . DOT identifier
    (120) index_access -> identifier . LBRACKET expr RBRACKET

    COLON           reduce using rule 81 (assign_target -> identifier .)
    EQUALS          reduce using rule 81 (assign_target -> identifier .)
    DOT             shift and go to state 31
    LBRACKET        shift and go to state 32


state 17

    (49) connect_block -> CONNECT . COLON INDENT connection_list DEDENT

    COLON           shift and go to state 33


state 18

    (58) func_def -> FUN . identifier LPAREN param_list RPAREN ARROW type COLON stmt_block
    (59) func_def -> FUN . identifier LPAREN param_list RPAREN COLON stmt_block
    (60) func_def -> FUN . identifier LPAREN error RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN . identifier LPAREN error RPAREN COLON stmt_block
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 34

state 19

    (85) for_stmt -> FOR . identifier IN expr COLON stmt_block
    (86) for_stmt -> FOR . identifier IN error COLON stmt_block
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 35

state 20

    (89) if_stmt -> IF . expr COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> IF . expr COLON stmt_block
    (91) if_stmt -> IF . error COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> IF . error COLON stmt_block
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    error           shift and go to state 37
    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr                           shift and go to state 36
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 21

    (93) while_stmt -> WHILE . expr COLON stmt_block
    (94) while_stmt -> WHILE . error COLON stmt_block
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    error           shift and go to state 52
    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr                           shift and go to state 51
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 22

    (77) assign_stmt -> assign_target . COLON type EQUALS expr
    (78) assign_stmt -> assign_target . EQUALS expr
    (79) assign_stmt -> assign_target . COLON type EQUALS error
    (80) assign_stmt -> assign_target . EQUALS error

    COLON           shift and go to state 53
    EQUALS          shift and go to state 54


state 23

    (87) break_stmt -> BREAK .

    AGENT           reduce using rule 87 (break_stmt -> BREAK .)
    CONNECT         reduce using rule 87 (break_stmt -> BREAK .)
    FUN             reduce using rule 87 (break_stmt -> BREAK .)
    FOR             reduce using rule 87 (break_stmt -> BREAK .)
    IF              reduce using rule 87 (break_stmt -> BREAK .)
    WHILE           reduce using rule 87 (break_stmt -> BREAK .)
    BREAK           reduce using rule 87 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 87 (break_stmt -> BREAK .)
    RETURN          reduce using rule 87 (break_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 87 (break_stmt -> BREAK .)
    $end            reduce using rule 87 (break_stmt -> BREAK .)
    INPUT           reduce using rule 87 (break_stmt -> BREAK .)
    OUTPUT          reduce using rule 87 (break_stmt -> BREAK .)
    MODEL           reduce using rule 87 (break_stmt -> BREAK .)
    CHAT            reduce using rule 87 (break_stmt -> BREAK .)
    DEDENT          reduce using rule 87 (break_stmt -> BREAK .)


state 24

    (88) continue_stmt -> CONTINUE .

    AGENT           reduce using rule 88 (continue_stmt -> CONTINUE .)
    CONNECT         reduce using rule 88 (continue_stmt -> CONTINUE .)
    FUN             reduce using rule 88 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 88 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 88 (continue_stmt -> CONTINUE .)
    WHILE           reduce using rule 88 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 88 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 88 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 88 (continue_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 88 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 88 (continue_stmt -> CONTINUE .)
    INPUT           reduce using rule 88 (continue_stmt -> CONTINUE .)
    OUTPUT          reduce using rule 88 (continue_stmt -> CONTINUE .)
    MODEL           reduce using rule 88 (continue_stmt -> CONTINUE .)
    CHAT            reduce using rule 88 (continue_stmt -> CONTINUE .)
    DEDENT          reduce using rule 88 (continue_stmt -> CONTINUE .)


state 25

    (84) return_stmt -> RETURN . expr
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr                           shift and go to state 55
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 26

    (82) assign_target -> field_access .

    COLON           reduce using rule 82 (assign_target -> field_access .)
    EQUALS          reduce using rule 82 (assign_target -> field_access .)


state 27

    (83) assign_target -> index_access .

    COLON           reduce using rule 83 (assign_target -> index_access .)
    EQUALS          reduce using rule 83 (assign_target -> index_access .)


state 28

    (106) identifier -> IDENTIFIER .

    DOT             reduce using rule 106 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 106 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 106 (identifier -> IDENTIFIER .)
    EQUALS          reduce using rule 106 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 106 (identifier -> IDENTIFIER .)
    IN              reduce using rule 106 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 106 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 106 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 106 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 106 (identifier -> IDENTIFIER .)
    MOD             reduce using rule 106 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 106 (identifier -> IDENTIFIER .)
    NEQ             reduce using rule 106 (identifier -> IDENTIFIER .)
    LT              reduce using rule 106 (identifier -> IDENTIFIER .)
    GT              reduce using rule 106 (identifier -> IDENTIFIER .)
    LE              reduce using rule 106 (identifier -> IDENTIFIER .)
    GE              reduce using rule 106 (identifier -> IDENTIFIER .)
    AGENT           reduce using rule 106 (identifier -> IDENTIFIER .)
    CONNECT         reduce using rule 106 (identifier -> IDENTIFIER .)
    FUN             reduce using rule 106 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 106 (identifier -> IDENTIFIER .)
    IF              reduce using rule 106 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 106 (identifier -> IDENTIFIER .)
    BREAK           reduce using rule 106 (identifier -> IDENTIFIER .)
    CONTINUE        reduce using rule 106 (identifier -> IDENTIFIER .)
    RETURN          reduce using rule 106 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (identifier -> IDENTIFIER .)
    $end            reduce using rule 106 (identifier -> IDENTIFIER .)
    INPUT           reduce using rule 106 (identifier -> IDENTIFIER .)
    OUTPUT          reduce using rule 106 (identifier -> IDENTIFIER .)
    MODEL           reduce using rule 106 (identifier -> IDENTIFIER .)
    CHAT            reduce using rule 106 (identifier -> IDENTIFIER .)
    DEDENT          reduce using rule 106 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 106 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 106 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 106 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 106 (identifier -> IDENTIFIER .)
    ARROW           reduce using rule 106 (identifier -> IDENTIFIER .)


state 29

    (2) program_body -> program_body_item program_body .

    $end            reduce using rule 2 (program_body -> program_body_item program_body .)


state 30

    (33) agent_def -> AGENT identifier . COLON INDENT agent_body DEDENT

    COLON           shift and go to state 56


state 31

    (121) field_access -> identifier DOT . identifier
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 57

state 32

    (120) index_access -> identifier LBRACKET . expr RBRACKET
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    identifier                     shift and go to state 45
    expr                           shift and go to state 58
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    constant                       shift and go to state 46

state 33

    (49) connect_block -> CONNECT COLON . INDENT connection_list DEDENT

    INDENT          shift and go to state 59


state 34

    (58) func_def -> FUN identifier . LPAREN param_list RPAREN ARROW type COLON stmt_block
    (59) func_def -> FUN identifier . LPAREN param_list RPAREN COLON stmt_block
    (60) func_def -> FUN identifier . LPAREN error RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN identifier . LPAREN error RPAREN COLON stmt_block

    LPAREN          shift and go to state 60


state 35

    (85) for_stmt -> FOR identifier . IN expr COLON stmt_block
    (86) for_stmt -> FOR identifier . IN error COLON stmt_block

    IN              shift and go to state 61


state 36

    (89) if_stmt -> IF expr . COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> IF expr . COLON stmt_block

    COLON           shift and go to state 62


state 37

    (91) if_stmt -> IF error . COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> IF error . COLON stmt_block

    COLON           shift and go to state 63


state 38

    (95) expr -> expr_head . bin_op expr_tail
    (96) expr -> expr_head .
    (127) bin_op -> . PLUS
    (128) bin_op -> . MINUS
    (129) bin_op -> . TIMES
    (130) bin_op -> . DIVIDE
    (131) bin_op -> . MOD
    (132) bin_op -> . EQ
    (133) bin_op -> . NEQ
    (134) bin_op -> . LT
    (135) bin_op -> . GT
    (136) bin_op -> . LE
    (137) bin_op -> . GE

    COLON           reduce using rule 96 (expr -> expr_head .)
    AGENT           reduce using rule 96 (expr -> expr_head .)
    CONNECT         reduce using rule 96 (expr -> expr_head .)
    FUN             reduce using rule 96 (expr -> expr_head .)
    FOR             reduce using rule 96 (expr -> expr_head .)
    IF              reduce using rule 96 (expr -> expr_head .)
    WHILE           reduce using rule 96 (expr -> expr_head .)
    BREAK           reduce using rule 96 (expr -> expr_head .)
    CONTINUE        reduce using rule 96 (expr -> expr_head .)
    RETURN          reduce using rule 96 (expr -> expr_head .)
    IDENTIFIER      reduce using rule 96 (expr -> expr_head .)
    $end            reduce using rule 96 (expr -> expr_head .)
    INPUT           reduce using rule 96 (expr -> expr_head .)
    OUTPUT          reduce using rule 96 (expr -> expr_head .)
    MODEL           reduce using rule 96 (expr -> expr_head .)
    CHAT            reduce using rule 96 (expr -> expr_head .)
    DEDENT          reduce using rule 96 (expr -> expr_head .)
    RBRACKET        reduce using rule 96 (expr -> expr_head .)
    COMMA           reduce using rule 96 (expr -> expr_head .)
    RPAREN          reduce using rule 96 (expr -> expr_head .)
    RBRACE          reduce using rule 96 (expr -> expr_head .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 69
    EQ              shift and go to state 70
    NEQ             shift and go to state 71
    LT              shift and go to state 72
    GT              shift and go to state 73
    LE              shift and go to state 74
    GE              shift and go to state 75

    bin_op                         shift and go to state 64

state 39

    (97) expr_head -> atom .

    PLUS            reduce using rule 97 (expr_head -> atom .)
    MINUS           reduce using rule 97 (expr_head -> atom .)
    TIMES           reduce using rule 97 (expr_head -> atom .)
    DIVIDE          reduce using rule 97 (expr_head -> atom .)
    MOD             reduce using rule 97 (expr_head -> atom .)
    EQ              reduce using rule 97 (expr_head -> atom .)
    NEQ             reduce using rule 97 (expr_head -> atom .)
    LT              reduce using rule 97 (expr_head -> atom .)
    GT              reduce using rule 97 (expr_head -> atom .)
    LE              reduce using rule 97 (expr_head -> atom .)
    GE              reduce using rule 97 (expr_head -> atom .)
    COLON           reduce using rule 97 (expr_head -> atom .)
    AGENT           reduce using rule 97 (expr_head -> atom .)
    CONNECT         reduce using rule 97 (expr_head -> atom .)
    FUN             reduce using rule 97 (expr_head -> atom .)
    FOR             reduce using rule 97 (expr_head -> atom .)
    IF              reduce using rule 97 (expr_head -> atom .)
    WHILE           reduce using rule 97 (expr_head -> atom .)
    BREAK           reduce using rule 97 (expr_head -> atom .)
    CONTINUE        reduce using rule 97 (expr_head -> atom .)
    RETURN          reduce using rule 97 (expr_head -> atom .)
    IDENTIFIER      reduce using rule 97 (expr_head -> atom .)
    $end            reduce using rule 97 (expr_head -> atom .)
    INPUT           reduce using rule 97 (expr_head -> atom .)
    OUTPUT          reduce using rule 97 (expr_head -> atom .)
    MODEL           reduce using rule 97 (expr_head -> atom .)
    CHAT            reduce using rule 97 (expr_head -> atom .)
    DEDENT          reduce using rule 97 (expr_head -> atom .)
    RBRACKET        reduce using rule 97 (expr_head -> atom .)
    COMMA           reduce using rule 97 (expr_head -> atom .)
    RPAREN          reduce using rule 97 (expr_head -> atom .)
    RBRACE          reduce using rule 97 (expr_head -> atom .)


state 40

    (98) expr_head -> list_expr .

    PLUS            reduce using rule 98 (expr_head -> list_expr .)
    MINUS           reduce using rule 98 (expr_head -> list_expr .)
    TIMES           reduce using rule 98 (expr_head -> list_expr .)
    DIVIDE          reduce using rule 98 (expr_head -> list_expr .)
    MOD             reduce using rule 98 (expr_head -> list_expr .)
    EQ              reduce using rule 98 (expr_head -> list_expr .)
    NEQ             reduce using rule 98 (expr_head -> list_expr .)
    LT              reduce using rule 98 (expr_head -> list_expr .)
    GT              reduce using rule 98 (expr_head -> list_expr .)
    LE              reduce using rule 98 (expr_head -> list_expr .)
    GE              reduce using rule 98 (expr_head -> list_expr .)
    COLON           reduce using rule 98 (expr_head -> list_expr .)
    AGENT           reduce using rule 98 (expr_head -> list_expr .)
    CONNECT         reduce using rule 98 (expr_head -> list_expr .)
    FUN             reduce using rule 98 (expr_head -> list_expr .)
    FOR             reduce using rule 98 (expr_head -> list_expr .)
    IF              reduce using rule 98 (expr_head -> list_expr .)
    WHILE           reduce using rule 98 (expr_head -> list_expr .)
    BREAK           reduce using rule 98 (expr_head -> list_expr .)
    CONTINUE        reduce using rule 98 (expr_head -> list_expr .)
    RETURN          reduce using rule 98 (expr_head -> list_expr .)
    IDENTIFIER      reduce using rule 98 (expr_head -> list_expr .)
    $end            reduce using rule 98 (expr_head -> list_expr .)
    INPUT           reduce using rule 98 (expr_head -> list_expr .)
    OUTPUT          reduce using rule 98 (expr_head -> list_expr .)
    MODEL           reduce using rule 98 (expr_head -> list_expr .)
    CHAT            reduce using rule 98 (expr_head -> list_expr .)
    DEDENT          reduce using rule 98 (expr_head -> list_expr .)
    RBRACKET        reduce using rule 98 (expr_head -> list_expr .)
    COMMA           reduce using rule 98 (expr_head -> list_expr .)
    RPAREN          reduce using rule 98 (expr_head -> list_expr .)
    RBRACE          reduce using rule 98 (expr_head -> list_expr .)


state 41

    (99) expr_head -> record_expr .

    PLUS            reduce using rule 99 (expr_head -> record_expr .)
    MINUS           reduce using rule 99 (expr_head -> record_expr .)
    TIMES           reduce using rule 99 (expr_head -> record_expr .)
    DIVIDE          reduce using rule 99 (expr_head -> record_expr .)
    MOD             reduce using rule 99 (expr_head -> record_expr .)
    EQ              reduce using rule 99 (expr_head -> record_expr .)
    NEQ             reduce using rule 99 (expr_head -> record_expr .)
    LT              reduce using rule 99 (expr_head -> record_expr .)
    GT              reduce using rule 99 (expr_head -> record_expr .)
    LE              reduce using rule 99 (expr_head -> record_expr .)
    GE              reduce using rule 99 (expr_head -> record_expr .)
    COLON           reduce using rule 99 (expr_head -> record_expr .)
    AGENT           reduce using rule 99 (expr_head -> record_expr .)
    CONNECT         reduce using rule 99 (expr_head -> record_expr .)
    FUN             reduce using rule 99 (expr_head -> record_expr .)
    FOR             reduce using rule 99 (expr_head -> record_expr .)
    IF              reduce using rule 99 (expr_head -> record_expr .)
    WHILE           reduce using rule 99 (expr_head -> record_expr .)
    BREAK           reduce using rule 99 (expr_head -> record_expr .)
    CONTINUE        reduce using rule 99 (expr_head -> record_expr .)
    RETURN          reduce using rule 99 (expr_head -> record_expr .)
    IDENTIFIER      reduce using rule 99 (expr_head -> record_expr .)
    $end            reduce using rule 99 (expr_head -> record_expr .)
    INPUT           reduce using rule 99 (expr_head -> record_expr .)
    OUTPUT          reduce using rule 99 (expr_head -> record_expr .)
    MODEL           reduce using rule 99 (expr_head -> record_expr .)
    CHAT            reduce using rule 99 (expr_head -> record_expr .)
    DEDENT          reduce using rule 99 (expr_head -> record_expr .)
    RBRACKET        reduce using rule 99 (expr_head -> record_expr .)
    COMMA           reduce using rule 99 (expr_head -> record_expr .)
    RPAREN          reduce using rule 99 (expr_head -> record_expr .)
    RBRACE          reduce using rule 99 (expr_head -> record_expr .)


state 42

    (100) expr_head -> field_access .

    PLUS            reduce using rule 100 (expr_head -> field_access .)
    MINUS           reduce using rule 100 (expr_head -> field_access .)
    TIMES           reduce using rule 100 (expr_head -> field_access .)
    DIVIDE          reduce using rule 100 (expr_head -> field_access .)
    MOD             reduce using rule 100 (expr_head -> field_access .)
    EQ              reduce using rule 100 (expr_head -> field_access .)
    NEQ             reduce using rule 100 (expr_head -> field_access .)
    LT              reduce using rule 100 (expr_head -> field_access .)
    GT              reduce using rule 100 (expr_head -> field_access .)
    LE              reduce using rule 100 (expr_head -> field_access .)
    GE              reduce using rule 100 (expr_head -> field_access .)
    COLON           reduce using rule 100 (expr_head -> field_access .)
    AGENT           reduce using rule 100 (expr_head -> field_access .)
    CONNECT         reduce using rule 100 (expr_head -> field_access .)
    FUN             reduce using rule 100 (expr_head -> field_access .)
    FOR             reduce using rule 100 (expr_head -> field_access .)
    IF              reduce using rule 100 (expr_head -> field_access .)
    WHILE           reduce using rule 100 (expr_head -> field_access .)
    BREAK           reduce using rule 100 (expr_head -> field_access .)
    CONTINUE        reduce using rule 100 (expr_head -> field_access .)
    RETURN          reduce using rule 100 (expr_head -> field_access .)
    IDENTIFIER      reduce using rule 100 (expr_head -> field_access .)
    $end            reduce using rule 100 (expr_head -> field_access .)
    INPUT           reduce using rule 100 (expr_head -> field_access .)
    OUTPUT          reduce using rule 100 (expr_head -> field_access .)
    MODEL           reduce using rule 100 (expr_head -> field_access .)
    CHAT            reduce using rule 100 (expr_head -> field_access .)
    DEDENT          reduce using rule 100 (expr_head -> field_access .)
    RBRACKET        reduce using rule 100 (expr_head -> field_access .)
    COMMA           reduce using rule 100 (expr_head -> field_access .)
    RPAREN          reduce using rule 100 (expr_head -> field_access .)
    RBRACE          reduce using rule 100 (expr_head -> field_access .)


state 43

    (101) expr_head -> index_access .

    PLUS            reduce using rule 101 (expr_head -> index_access .)
    MINUS           reduce using rule 101 (expr_head -> index_access .)
    TIMES           reduce using rule 101 (expr_head -> index_access .)
    DIVIDE          reduce using rule 101 (expr_head -> index_access .)
    MOD             reduce using rule 101 (expr_head -> index_access .)
    EQ              reduce using rule 101 (expr_head -> index_access .)
    NEQ             reduce using rule 101 (expr_head -> index_access .)
    LT              reduce using rule 101 (expr_head -> index_access .)
    GT              reduce using rule 101 (expr_head -> index_access .)
    LE              reduce using rule 101 (expr_head -> index_access .)
    GE              reduce using rule 101 (expr_head -> index_access .)
    COLON           reduce using rule 101 (expr_head -> index_access .)
    AGENT           reduce using rule 101 (expr_head -> index_access .)
    CONNECT         reduce using rule 101 (expr_head -> index_access .)
    FUN             reduce using rule 101 (expr_head -> index_access .)
    FOR             reduce using rule 101 (expr_head -> index_access .)
    IF              reduce using rule 101 (expr_head -> index_access .)
    WHILE           reduce using rule 101 (expr_head -> index_access .)
    BREAK           reduce using rule 101 (expr_head -> index_access .)
    CONTINUE        reduce using rule 101 (expr_head -> index_access .)
    RETURN          reduce using rule 101 (expr_head -> index_access .)
    IDENTIFIER      reduce using rule 101 (expr_head -> index_access .)
    $end            reduce using rule 101 (expr_head -> index_access .)
    INPUT           reduce using rule 101 (expr_head -> index_access .)
    OUTPUT          reduce using rule 101 (expr_head -> index_access .)
    MODEL           reduce using rule 101 (expr_head -> index_access .)
    CHAT            reduce using rule 101 (expr_head -> index_access .)
    DEDENT          reduce using rule 101 (expr_head -> index_access .)
    RBRACKET        reduce using rule 101 (expr_head -> index_access .)
    COMMA           reduce using rule 101 (expr_head -> index_access .)
    RPAREN          reduce using rule 101 (expr_head -> index_access .)
    RBRACE          reduce using rule 101 (expr_head -> index_access .)


state 44

    (102) expr_head -> func_call .

    PLUS            reduce using rule 102 (expr_head -> func_call .)
    MINUS           reduce using rule 102 (expr_head -> func_call .)
    TIMES           reduce using rule 102 (expr_head -> func_call .)
    DIVIDE          reduce using rule 102 (expr_head -> func_call .)
    MOD             reduce using rule 102 (expr_head -> func_call .)
    EQ              reduce using rule 102 (expr_head -> func_call .)
    NEQ             reduce using rule 102 (expr_head -> func_call .)
    LT              reduce using rule 102 (expr_head -> func_call .)
    GT              reduce using rule 102 (expr_head -> func_call .)
    LE              reduce using rule 102 (expr_head -> func_call .)
    GE              reduce using rule 102 (expr_head -> func_call .)
    COLON           reduce using rule 102 (expr_head -> func_call .)
    AGENT           reduce using rule 102 (expr_head -> func_call .)
    CONNECT         reduce using rule 102 (expr_head -> func_call .)
    FUN             reduce using rule 102 (expr_head -> func_call .)
    FOR             reduce using rule 102 (expr_head -> func_call .)
    IF              reduce using rule 102 (expr_head -> func_call .)
    WHILE           reduce using rule 102 (expr_head -> func_call .)
    BREAK           reduce using rule 102 (expr_head -> func_call .)
    CONTINUE        reduce using rule 102 (expr_head -> func_call .)
    RETURN          reduce using rule 102 (expr_head -> func_call .)
    IDENTIFIER      reduce using rule 102 (expr_head -> func_call .)
    $end            reduce using rule 102 (expr_head -> func_call .)
    INPUT           reduce using rule 102 (expr_head -> func_call .)
    OUTPUT          reduce using rule 102 (expr_head -> func_call .)
    MODEL           reduce using rule 102 (expr_head -> func_call .)
    CHAT            reduce using rule 102 (expr_head -> func_call .)
    DEDENT          reduce using rule 102 (expr_head -> func_call .)
    RBRACKET        reduce using rule 102 (expr_head -> func_call .)
    COMMA           reduce using rule 102 (expr_head -> func_call .)
    RPAREN          reduce using rule 102 (expr_head -> func_call .)
    RBRACE          reduce using rule 102 (expr_head -> func_call .)


state 45

    (104) atom -> identifier .
    (121) field_access -> identifier . DOT identifier
    (120) index_access -> identifier . LBRACKET expr RBRACKET
    (122) func_call -> identifier . LPAREN arg_list RPAREN

    PLUS            reduce using rule 104 (atom -> identifier .)
    MINUS           reduce using rule 104 (atom -> identifier .)
    TIMES           reduce using rule 104 (atom -> identifier .)
    DIVIDE          reduce using rule 104 (atom -> identifier .)
    MOD             reduce using rule 104 (atom -> identifier .)
    EQ              reduce using rule 104 (atom -> identifier .)
    NEQ             reduce using rule 104 (atom -> identifier .)
    LT              reduce using rule 104 (atom -> identifier .)
    GT              reduce using rule 104 (atom -> identifier .)
    LE              reduce using rule 104 (atom -> identifier .)
    GE              reduce using rule 104 (atom -> identifier .)
    COLON           reduce using rule 104 (atom -> identifier .)
    AGENT           reduce using rule 104 (atom -> identifier .)
    CONNECT         reduce using rule 104 (atom -> identifier .)
    FUN             reduce using rule 104 (atom -> identifier .)
    FOR             reduce using rule 104 (atom -> identifier .)
    IF              reduce using rule 104 (atom -> identifier .)
    WHILE           reduce using rule 104 (atom -> identifier .)
    BREAK           reduce using rule 104 (atom -> identifier .)
    CONTINUE        reduce using rule 104 (atom -> identifier .)
    RETURN          reduce using rule 104 (atom -> identifier .)
    IDENTIFIER      reduce using rule 104 (atom -> identifier .)
    $end            reduce using rule 104 (atom -> identifier .)
    INPUT           reduce using rule 104 (atom -> identifier .)
    OUTPUT          reduce using rule 104 (atom -> identifier .)
    MODEL           reduce using rule 104 (atom -> identifier .)
    CHAT            reduce using rule 104 (atom -> identifier .)
    DEDENT          reduce using rule 104 (atom -> identifier .)
    RBRACKET        reduce using rule 104 (atom -> identifier .)
    COMMA           reduce using rule 104 (atom -> identifier .)
    RPAREN          reduce using rule 104 (atom -> identifier .)
    RBRACE          reduce using rule 104 (atom -> identifier .)
    DOT             shift and go to state 31
    LBRACKET        shift and go to state 32
    LPAREN          shift and go to state 76


state 46

    (105) atom -> constant .

    PLUS            reduce using rule 105 (atom -> constant .)
    MINUS           reduce using rule 105 (atom -> constant .)
    TIMES           reduce using rule 105 (atom -> constant .)
    DIVIDE          reduce using rule 105 (atom -> constant .)
    MOD             reduce using rule 105 (atom -> constant .)
    EQ              reduce using rule 105 (atom -> constant .)
    NEQ             reduce using rule 105 (atom -> constant .)
    LT              reduce using rule 105 (atom -> constant .)
    GT              reduce using rule 105 (atom -> constant .)
    LE              reduce using rule 105 (atom -> constant .)
    GE              reduce using rule 105 (atom -> constant .)
    COLON           reduce using rule 105 (atom -> constant .)
    AGENT           reduce using rule 105 (atom -> constant .)
    CONNECT         reduce using rule 105 (atom -> constant .)
    FUN             reduce using rule 105 (atom -> constant .)
    FOR             reduce using rule 105 (atom -> constant .)
    IF              reduce using rule 105 (atom -> constant .)
    WHILE           reduce using rule 105 (atom -> constant .)
    BREAK           reduce using rule 105 (atom -> constant .)
    CONTINUE        reduce using rule 105 (atom -> constant .)
    RETURN          reduce using rule 105 (atom -> constant .)
    IDENTIFIER      reduce using rule 105 (atom -> constant .)
    $end            reduce using rule 105 (atom -> constant .)
    INPUT           reduce using rule 105 (atom -> constant .)
    OUTPUT          reduce using rule 105 (atom -> constant .)
    MODEL           reduce using rule 105 (atom -> constant .)
    CHAT            reduce using rule 105 (atom -> constant .)
    DEDENT          reduce using rule 105 (atom -> constant .)
    RBRACKET        reduce using rule 105 (atom -> constant .)
    COMMA           reduce using rule 105 (atom -> constant .)
    RPAREN          reduce using rule 105 (atom -> constant .)
    RBRACE          reduce using rule 105 (atom -> constant .)


state 47

    (109) list_expr -> LBRACKET . list_elements RBRACKET
    (110) list_elements -> . expr list_elements_tail
    (111) list_elements -> . expr
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    list_elements                  shift and go to state 77
    expr                           shift and go to state 78
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 48

    (114) record_expr -> LBRACE . record_elements RBRACE
    (115) record_elements -> . instance_assign record_elements_tail
    (116) record_elements -> . instance_assign
    (119) instance_assign -> . identifier EQUALS expr
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    record_elements                shift and go to state 79
    instance_assign                shift and go to state 80
    identifier                     shift and go to state 81

state 49

    (107) constant -> STRING .

    PLUS            reduce using rule 107 (constant -> STRING .)
    MINUS           reduce using rule 107 (constant -> STRING .)
    TIMES           reduce using rule 107 (constant -> STRING .)
    DIVIDE          reduce using rule 107 (constant -> STRING .)
    MOD             reduce using rule 107 (constant -> STRING .)
    EQ              reduce using rule 107 (constant -> STRING .)
    NEQ             reduce using rule 107 (constant -> STRING .)
    LT              reduce using rule 107 (constant -> STRING .)
    GT              reduce using rule 107 (constant -> STRING .)
    LE              reduce using rule 107 (constant -> STRING .)
    GE              reduce using rule 107 (constant -> STRING .)
    COLON           reduce using rule 107 (constant -> STRING .)
    AGENT           reduce using rule 107 (constant -> STRING .)
    CONNECT         reduce using rule 107 (constant -> STRING .)
    FUN             reduce using rule 107 (constant -> STRING .)
    FOR             reduce using rule 107 (constant -> STRING .)
    IF              reduce using rule 107 (constant -> STRING .)
    WHILE           reduce using rule 107 (constant -> STRING .)
    BREAK           reduce using rule 107 (constant -> STRING .)
    CONTINUE        reduce using rule 107 (constant -> STRING .)
    RETURN          reduce using rule 107 (constant -> STRING .)
    IDENTIFIER      reduce using rule 107 (constant -> STRING .)
    $end            reduce using rule 107 (constant -> STRING .)
    INPUT           reduce using rule 107 (constant -> STRING .)
    OUTPUT          reduce using rule 107 (constant -> STRING .)
    MODEL           reduce using rule 107 (constant -> STRING .)
    CHAT            reduce using rule 107 (constant -> STRING .)
    DEDENT          reduce using rule 107 (constant -> STRING .)
    RBRACKET        reduce using rule 107 (constant -> STRING .)
    COMMA           reduce using rule 107 (constant -> STRING .)
    RPAREN          reduce using rule 107 (constant -> STRING .)
    RBRACE          reduce using rule 107 (constant -> STRING .)


state 50

    (108) constant -> NUMBER .

    PLUS            reduce using rule 108 (constant -> NUMBER .)
    MINUS           reduce using rule 108 (constant -> NUMBER .)
    TIMES           reduce using rule 108 (constant -> NUMBER .)
    DIVIDE          reduce using rule 108 (constant -> NUMBER .)
    MOD             reduce using rule 108 (constant -> NUMBER .)
    EQ              reduce using rule 108 (constant -> NUMBER .)
    NEQ             reduce using rule 108 (constant -> NUMBER .)
    LT              reduce using rule 108 (constant -> NUMBER .)
    GT              reduce using rule 108 (constant -> NUMBER .)
    LE              reduce using rule 108 (constant -> NUMBER .)
    GE              reduce using rule 108 (constant -> NUMBER .)
    COLON           reduce using rule 108 (constant -> NUMBER .)
    AGENT           reduce using rule 108 (constant -> NUMBER .)
    CONNECT         reduce using rule 108 (constant -> NUMBER .)
    FUN             reduce using rule 108 (constant -> NUMBER .)
    FOR             reduce using rule 108 (constant -> NUMBER .)
    IF              reduce using rule 108 (constant -> NUMBER .)
    WHILE           reduce using rule 108 (constant -> NUMBER .)
    BREAK           reduce using rule 108 (constant -> NUMBER .)
    CONTINUE        reduce using rule 108 (constant -> NUMBER .)
    RETURN          reduce using rule 108 (constant -> NUMBER .)
    IDENTIFIER      reduce using rule 108 (constant -> NUMBER .)
    $end            reduce using rule 108 (constant -> NUMBER .)
    INPUT           reduce using rule 108 (constant -> NUMBER .)
    OUTPUT          reduce using rule 108 (constant -> NUMBER .)
    MODEL           reduce using rule 108 (constant -> NUMBER .)
    CHAT            reduce using rule 108 (constant -> NUMBER .)
    DEDENT          reduce using rule 108 (constant -> NUMBER .)
    RBRACKET        reduce using rule 108 (constant -> NUMBER .)
    COMMA           reduce using rule 108 (constant -> NUMBER .)
    RPAREN          reduce using rule 108 (constant -> NUMBER .)
    RBRACE          reduce using rule 108 (constant -> NUMBER .)


state 51

    (93) while_stmt -> WHILE expr . COLON stmt_block

    COLON           shift and go to state 82


state 52

    (94) while_stmt -> WHILE error . COLON stmt_block

    COLON           shift and go to state 83


state 53

    (77) assign_stmt -> assign_target COLON . type EQUALS expr
    (79) assign_stmt -> assign_target COLON . type EQUALS error
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 84
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 54

    (78) assign_stmt -> assign_target EQUALS . expr
    (80) assign_stmt -> assign_target EQUALS . error
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    error           shift and go to state 100
    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr                           shift and go to state 99
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 55

    (84) return_stmt -> RETURN expr .

    AGENT           reduce using rule 84 (return_stmt -> RETURN expr .)
    CONNECT         reduce using rule 84 (return_stmt -> RETURN expr .)
    FUN             reduce using rule 84 (return_stmt -> RETURN expr .)
    FOR             reduce using rule 84 (return_stmt -> RETURN expr .)
    IF              reduce using rule 84 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 84 (return_stmt -> RETURN expr .)
    BREAK           reduce using rule 84 (return_stmt -> RETURN expr .)
    CONTINUE        reduce using rule 84 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 84 (return_stmt -> RETURN expr .)
    IDENTIFIER      reduce using rule 84 (return_stmt -> RETURN expr .)
    $end            reduce using rule 84 (return_stmt -> RETURN expr .)
    INPUT           reduce using rule 84 (return_stmt -> RETURN expr .)
    OUTPUT          reduce using rule 84 (return_stmt -> RETURN expr .)
    MODEL           reduce using rule 84 (return_stmt -> RETURN expr .)
    CHAT            reduce using rule 84 (return_stmt -> RETURN expr .)
    DEDENT          reduce using rule 84 (return_stmt -> RETURN expr .)


state 56

    (33) agent_def -> AGENT identifier COLON . INDENT agent_body DEDENT

    INDENT          shift and go to state 101


state 57

    (121) field_access -> identifier DOT identifier .

    COLON           reduce using rule 121 (field_access -> identifier DOT identifier .)
    EQUALS          reduce using rule 121 (field_access -> identifier DOT identifier .)
    PLUS            reduce using rule 121 (field_access -> identifier DOT identifier .)
    MINUS           reduce using rule 121 (field_access -> identifier DOT identifier .)
    TIMES           reduce using rule 121 (field_access -> identifier DOT identifier .)
    DIVIDE          reduce using rule 121 (field_access -> identifier DOT identifier .)
    MOD             reduce using rule 121 (field_access -> identifier DOT identifier .)
    EQ              reduce using rule 121 (field_access -> identifier DOT identifier .)
    NEQ             reduce using rule 121 (field_access -> identifier DOT identifier .)
    LT              reduce using rule 121 (field_access -> identifier DOT identifier .)
    GT              reduce using rule 121 (field_access -> identifier DOT identifier .)
    LE              reduce using rule 121 (field_access -> identifier DOT identifier .)
    GE              reduce using rule 121 (field_access -> identifier DOT identifier .)
    AGENT           reduce using rule 121 (field_access -> identifier DOT identifier .)
    CONNECT         reduce using rule 121 (field_access -> identifier DOT identifier .)
    FUN             reduce using rule 121 (field_access -> identifier DOT identifier .)
    FOR             reduce using rule 121 (field_access -> identifier DOT identifier .)
    IF              reduce using rule 121 (field_access -> identifier DOT identifier .)
    WHILE           reduce using rule 121 (field_access -> identifier DOT identifier .)
    BREAK           reduce using rule 121 (field_access -> identifier DOT identifier .)
    CONTINUE        reduce using rule 121 (field_access -> identifier DOT identifier .)
    RETURN          reduce using rule 121 (field_access -> identifier DOT identifier .)
    IDENTIFIER      reduce using rule 121 (field_access -> identifier DOT identifier .)
    $end            reduce using rule 121 (field_access -> identifier DOT identifier .)
    INPUT           reduce using rule 121 (field_access -> identifier DOT identifier .)
    OUTPUT          reduce using rule 121 (field_access -> identifier DOT identifier .)
    MODEL           reduce using rule 121 (field_access -> identifier DOT identifier .)
    CHAT            reduce using rule 121 (field_access -> identifier DOT identifier .)
    DEDENT          reduce using rule 121 (field_access -> identifier DOT identifier .)
    RBRACKET        reduce using rule 121 (field_access -> identifier DOT identifier .)
    COMMA           reduce using rule 121 (field_access -> identifier DOT identifier .)
    RPAREN          reduce using rule 121 (field_access -> identifier DOT identifier .)
    RBRACE          reduce using rule 121 (field_access -> identifier DOT identifier .)


state 58

    (120) index_access -> identifier LBRACKET expr . RBRACKET

    RBRACKET        shift and go to state 102


state 59

    (49) connect_block -> CONNECT COLON INDENT . connection_list DEDENT
    (50) connection_list -> . connection connection_list
    (51) connection_list -> . connection
    (52) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    connection_list                shift and go to state 103
    connection                     shift and go to state 104
    identifier                     shift and go to state 105

state 60

    (58) func_def -> FUN identifier LPAREN . param_list RPAREN ARROW type COLON stmt_block
    (59) func_def -> FUN identifier LPAREN . param_list RPAREN COLON stmt_block
    (60) func_def -> FUN identifier LPAREN . error RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN identifier LPAREN . error RPAREN COLON stmt_block
    (62) param_list -> . param_decl param_list_tail
    (63) param_list -> . empty
    (66) param_decl -> . var_decl
    (138) empty -> .
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (106) identifier -> . IDENTIFIER

    error           shift and go to state 108
    RPAREN          reduce using rule 138 (empty -> .)
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 106
    param_list                     shift and go to state 107
    param_decl                     shift and go to state 109
    empty                          shift and go to state 110
    var_decl                       shift and go to state 111

state 61

    (85) for_stmt -> FOR identifier IN . expr COLON stmt_block
    (86) for_stmt -> FOR identifier IN . error COLON stmt_block
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    error           shift and go to state 113
    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    identifier                     shift and go to state 45
    expr                           shift and go to state 112
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    constant                       shift and go to state 46

state 62

    (89) if_stmt -> IF expr COLON . stmt_block ELSE COLON stmt_block
    (90) if_stmt -> IF expr COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 114

state 63

    (91) if_stmt -> IF error COLON . stmt_block ELSE COLON stmt_block
    (92) if_stmt -> IF error COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 116

state 64

    (95) expr -> expr_head bin_op . expr_tail
    (103) expr_tail -> . expr
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr_head                      shift and go to state 38
    expr_tail                      shift and go to state 117
    expr                           shift and go to state 118
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 65

    (127) bin_op -> PLUS .

    LBRACKET        reduce using rule 127 (bin_op -> PLUS .)
    LBRACE          reduce using rule 127 (bin_op -> PLUS .)
    IDENTIFIER      reduce using rule 127 (bin_op -> PLUS .)
    STRING          reduce using rule 127 (bin_op -> PLUS .)
    NUMBER          reduce using rule 127 (bin_op -> PLUS .)


state 66

    (128) bin_op -> MINUS .

    LBRACKET        reduce using rule 128 (bin_op -> MINUS .)
    LBRACE          reduce using rule 128 (bin_op -> MINUS .)
    IDENTIFIER      reduce using rule 128 (bin_op -> MINUS .)
    STRING          reduce using rule 128 (bin_op -> MINUS .)
    NUMBER          reduce using rule 128 (bin_op -> MINUS .)


state 67

    (129) bin_op -> TIMES .

    LBRACKET        reduce using rule 129 (bin_op -> TIMES .)
    LBRACE          reduce using rule 129 (bin_op -> TIMES .)
    IDENTIFIER      reduce using rule 129 (bin_op -> TIMES .)
    STRING          reduce using rule 129 (bin_op -> TIMES .)
    NUMBER          reduce using rule 129 (bin_op -> TIMES .)


state 68

    (130) bin_op -> DIVIDE .

    LBRACKET        reduce using rule 130 (bin_op -> DIVIDE .)
    LBRACE          reduce using rule 130 (bin_op -> DIVIDE .)
    IDENTIFIER      reduce using rule 130 (bin_op -> DIVIDE .)
    STRING          reduce using rule 130 (bin_op -> DIVIDE .)
    NUMBER          reduce using rule 130 (bin_op -> DIVIDE .)


state 69

    (131) bin_op -> MOD .

    LBRACKET        reduce using rule 131 (bin_op -> MOD .)
    LBRACE          reduce using rule 131 (bin_op -> MOD .)
    IDENTIFIER      reduce using rule 131 (bin_op -> MOD .)
    STRING          reduce using rule 131 (bin_op -> MOD .)
    NUMBER          reduce using rule 131 (bin_op -> MOD .)


state 70

    (132) bin_op -> EQ .

    LBRACKET        reduce using rule 132 (bin_op -> EQ .)
    LBRACE          reduce using rule 132 (bin_op -> EQ .)
    IDENTIFIER      reduce using rule 132 (bin_op -> EQ .)
    STRING          reduce using rule 132 (bin_op -> EQ .)
    NUMBER          reduce using rule 132 (bin_op -> EQ .)


state 71

    (133) bin_op -> NEQ .

    LBRACKET        reduce using rule 133 (bin_op -> NEQ .)
    LBRACE          reduce using rule 133 (bin_op -> NEQ .)
    IDENTIFIER      reduce using rule 133 (bin_op -> NEQ .)
    STRING          reduce using rule 133 (bin_op -> NEQ .)
    NUMBER          reduce using rule 133 (bin_op -> NEQ .)


state 72

    (134) bin_op -> LT .

    LBRACKET        reduce using rule 134 (bin_op -> LT .)
    LBRACE          reduce using rule 134 (bin_op -> LT .)
    IDENTIFIER      reduce using rule 134 (bin_op -> LT .)
    STRING          reduce using rule 134 (bin_op -> LT .)
    NUMBER          reduce using rule 134 (bin_op -> LT .)


state 73

    (135) bin_op -> GT .

    LBRACKET        reduce using rule 135 (bin_op -> GT .)
    LBRACE          reduce using rule 135 (bin_op -> GT .)
    IDENTIFIER      reduce using rule 135 (bin_op -> GT .)
    STRING          reduce using rule 135 (bin_op -> GT .)
    NUMBER          reduce using rule 135 (bin_op -> GT .)


state 74

    (136) bin_op -> LE .

    LBRACKET        reduce using rule 136 (bin_op -> LE .)
    LBRACE          reduce using rule 136 (bin_op -> LE .)
    IDENTIFIER      reduce using rule 136 (bin_op -> LE .)
    STRING          reduce using rule 136 (bin_op -> LE .)
    NUMBER          reduce using rule 136 (bin_op -> LE .)


state 75

    (137) bin_op -> GE .

    LBRACKET        reduce using rule 137 (bin_op -> GE .)
    LBRACE          reduce using rule 137 (bin_op -> GE .)
    IDENTIFIER      reduce using rule 137 (bin_op -> GE .)
    STRING          reduce using rule 137 (bin_op -> GE .)
    NUMBER          reduce using rule 137 (bin_op -> GE .)


state 76

    (122) func_call -> identifier LPAREN . arg_list RPAREN
    (123) arg_list -> . expr arg_list_tail
    (124) arg_list -> . empty
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (138) empty -> .
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    RPAREN          reduce using rule 138 (empty -> .)
    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    identifier                     shift and go to state 45
    arg_list                       shift and go to state 119
    expr                           shift and go to state 120
    empty                          shift and go to state 121
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    constant                       shift and go to state 46

state 77

    (109) list_expr -> LBRACKET list_elements . RBRACKET

    RBRACKET        shift and go to state 122


state 78

    (110) list_elements -> expr . list_elements_tail
    (111) list_elements -> expr .
    (112) list_elements_tail -> . COMMA expr list_elements_tail
    (113) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 111 (list_elements -> expr .)
    COMMA           shift and go to state 124

    list_elements_tail             shift and go to state 123

state 79

    (114) record_expr -> LBRACE record_elements . RBRACE

    RBRACE          shift and go to state 125


state 80

    (115) record_elements -> instance_assign . record_elements_tail
    (116) record_elements -> instance_assign .
    (117) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (118) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 116 (record_elements -> instance_assign .)
    COMMA           shift and go to state 127

    record_elements_tail           shift and go to state 126

state 81

    (119) instance_assign -> identifier . EQUALS expr

    EQUALS          shift and go to state 128


state 82

    (93) while_stmt -> WHILE expr COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 129

state 83

    (94) while_stmt -> WHILE error COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 130

state 84

    (77) assign_stmt -> assign_target COLON type . EQUALS expr
    (79) assign_stmt -> assign_target COLON type . EQUALS error

    EQUALS          shift and go to state 131


state 85

    (14) type -> base_type .

    EQUALS          reduce using rule 14 (type -> base_type .)
    COMMA           reduce using rule 14 (type -> base_type .)
    RPAREN          reduce using rule 14 (type -> base_type .)
    RBRACKET        reduce using rule 14 (type -> base_type .)
    INDENT          reduce using rule 14 (type -> base_type .)
    IDENTIFIER      reduce using rule 14 (type -> base_type .)
    DEDENT          reduce using rule 14 (type -> base_type .)
    COLON           reduce using rule 14 (type -> base_type .)
    RBRACE          reduce using rule 14 (type -> base_type .)


state 86

    (15) type -> list_type .

    EQUALS          reduce using rule 15 (type -> list_type .)
    COMMA           reduce using rule 15 (type -> list_type .)
    RPAREN          reduce using rule 15 (type -> list_type .)
    RBRACKET        reduce using rule 15 (type -> list_type .)
    INDENT          reduce using rule 15 (type -> list_type .)
    IDENTIFIER      reduce using rule 15 (type -> list_type .)
    DEDENT          reduce using rule 15 (type -> list_type .)
    COLON           reduce using rule 15 (type -> list_type .)
    RBRACE          reduce using rule 15 (type -> list_type .)


state 87

    (16) type -> record_type .

    EQUALS          reduce using rule 16 (type -> record_type .)
    COMMA           reduce using rule 16 (type -> record_type .)
    RPAREN          reduce using rule 16 (type -> record_type .)
    RBRACKET        reduce using rule 16 (type -> record_type .)
    INDENT          reduce using rule 16 (type -> record_type .)
    IDENTIFIER      reduce using rule 16 (type -> record_type .)
    DEDENT          reduce using rule 16 (type -> record_type .)
    COLON           reduce using rule 16 (type -> record_type .)
    RBRACE          reduce using rule 16 (type -> record_type .)


state 88

    (17) type -> func_ret_type .

    EQUALS          reduce using rule 17 (type -> func_ret_type .)
    COMMA           reduce using rule 17 (type -> func_ret_type .)
    RPAREN          reduce using rule 17 (type -> func_ret_type .)
    RBRACKET        reduce using rule 17 (type -> func_ret_type .)
    INDENT          reduce using rule 17 (type -> func_ret_type .)
    IDENTIFIER      reduce using rule 17 (type -> func_ret_type .)
    DEDENT          reduce using rule 17 (type -> func_ret_type .)
    COLON           reduce using rule 17 (type -> func_ret_type .)
    RBRACE          reduce using rule 17 (type -> func_ret_type .)


state 89

    (18) type -> union_type .

    EQUALS          reduce using rule 18 (type -> union_type .)
    COMMA           reduce using rule 18 (type -> union_type .)
    RPAREN          reduce using rule 18 (type -> union_type .)
    RBRACKET        reduce using rule 18 (type -> union_type .)
    INDENT          reduce using rule 18 (type -> union_type .)
    IDENTIFIER      reduce using rule 18 (type -> union_type .)
    DEDENT          reduce using rule 18 (type -> union_type .)
    COLON           reduce using rule 18 (type -> union_type .)
    RBRACE          reduce using rule 18 (type -> union_type .)


state 90

    (19) base_type -> TYPE_STR .

    EQUALS          reduce using rule 19 (base_type -> TYPE_STR .)
    COMMA           reduce using rule 19 (base_type -> TYPE_STR .)
    RPAREN          reduce using rule 19 (base_type -> TYPE_STR .)
    RBRACKET        reduce using rule 19 (base_type -> TYPE_STR .)
    INDENT          reduce using rule 19 (base_type -> TYPE_STR .)
    IDENTIFIER      reduce using rule 19 (base_type -> TYPE_STR .)
    DEDENT          reduce using rule 19 (base_type -> TYPE_STR .)
    COLON           reduce using rule 19 (base_type -> TYPE_STR .)
    RBRACE          reduce using rule 19 (base_type -> TYPE_STR .)


state 91

    (20) base_type -> TYPE_INT .

    EQUALS          reduce using rule 20 (base_type -> TYPE_INT .)
    COMMA           reduce using rule 20 (base_type -> TYPE_INT .)
    RPAREN          reduce using rule 20 (base_type -> TYPE_INT .)
    RBRACKET        reduce using rule 20 (base_type -> TYPE_INT .)
    INDENT          reduce using rule 20 (base_type -> TYPE_INT .)
    IDENTIFIER      reduce using rule 20 (base_type -> TYPE_INT .)
    DEDENT          reduce using rule 20 (base_type -> TYPE_INT .)
    COLON           reduce using rule 20 (base_type -> TYPE_INT .)
    RBRACE          reduce using rule 20 (base_type -> TYPE_INT .)


state 92

    (21) base_type -> TYPE_FLOAT .

    EQUALS          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RBRACKET        reduce using rule 21 (base_type -> TYPE_FLOAT .)
    INDENT          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 21 (base_type -> TYPE_FLOAT .)
    DEDENT          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    COLON           reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RBRACE          reduce using rule 21 (base_type -> TYPE_FLOAT .)


state 93

    (22) base_type -> TYPE_BOOL .

    EQUALS          reduce using rule 22 (base_type -> TYPE_BOOL .)
    COMMA           reduce using rule 22 (base_type -> TYPE_BOOL .)
    RPAREN          reduce using rule 22 (base_type -> TYPE_BOOL .)
    RBRACKET        reduce using rule 22 (base_type -> TYPE_BOOL .)
    INDENT          reduce using rule 22 (base_type -> TYPE_BOOL .)
    IDENTIFIER      reduce using rule 22 (base_type -> TYPE_BOOL .)
    DEDENT          reduce using rule 22 (base_type -> TYPE_BOOL .)
    COLON           reduce using rule 22 (base_type -> TYPE_BOOL .)
    RBRACE          reduce using rule 22 (base_type -> TYPE_BOOL .)


state 94

    (23) base_type -> TYPE_UNIT .

    EQUALS          reduce using rule 23 (base_type -> TYPE_UNIT .)
    COMMA           reduce using rule 23 (base_type -> TYPE_UNIT .)
    RPAREN          reduce using rule 23 (base_type -> TYPE_UNIT .)
    RBRACKET        reduce using rule 23 (base_type -> TYPE_UNIT .)
    INDENT          reduce using rule 23 (base_type -> TYPE_UNIT .)
    IDENTIFIER      reduce using rule 23 (base_type -> TYPE_UNIT .)
    DEDENT          reduce using rule 23 (base_type -> TYPE_UNIT .)
    COLON           reduce using rule 23 (base_type -> TYPE_UNIT .)
    RBRACE          reduce using rule 23 (base_type -> TYPE_UNIT .)


state 95

    (28) list_type -> TYPE_LIST . LBRACKET type RBRACKET

    LBRACKET        shift and go to state 132


state 96

    (29) record_type -> TYPE_RECORD . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 133


state 97

    (25) func_ret_type -> LPAREN . type_list RPAREN
    (26) type_list -> . type
    (27) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type_list                      shift and go to state 134
    type                           shift and go to state 135
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 98

    (24) union_type -> TYPE_UNION . LBRACKET type_list RBRACKET

    LBRACKET        shift and go to state 136


state 99

    (78) assign_stmt -> assign_target EQUALS expr .

    AGENT           reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    CONNECT         reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    FUN             reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    FOR             reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    IF              reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    WHILE           reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    BREAK           reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    CONTINUE        reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    RETURN          reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    IDENTIFIER      reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    $end            reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    INPUT           reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    OUTPUT          reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    MODEL           reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    CHAT            reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)
    DEDENT          reduce using rule 78 (assign_stmt -> assign_target EQUALS expr .)


state 100

    (80) assign_stmt -> assign_target EQUALS error .

    AGENT           reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    CONNECT         reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    FUN             reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    FOR             reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    IF              reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    WHILE           reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    BREAK           reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    CONTINUE        reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    RETURN          reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    IDENTIFIER      reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    $end            reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    INPUT           reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    OUTPUT          reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    MODEL           reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    CHAT            reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)
    DEDENT          reduce using rule 80 (assign_stmt -> assign_target EQUALS error .)


state 101

    (33) agent_def -> AGENT identifier COLON INDENT . agent_body DEDENT
    (34) agent_body -> . agent_body_item agent_body
    (35) agent_body -> . agent_body_item
    (36) agent_body_item -> . input_block
    (37) agent_body_item -> . output_block
    (38) agent_body_item -> . model_block
    (39) agent_body_item -> . statement
    (40) agent_body_item -> . chat_block
    (41) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (42) input_block -> . INPUT COLON INDENT error DEDENT
    (43) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (44) output_block -> . OUTPUT COLON INDENT error DEDENT
    (45) model_block -> . MODEL COLON constant
    (46) model_block -> . MODEL COLON error
    (70) statement -> . for_stmt
    (71) statement -> . if_stmt
    (72) statement -> . while_stmt
    (73) statement -> . assign_stmt
    (74) statement -> . break_stmt
    (75) statement -> . continue_stmt
    (76) statement -> . return_stmt
    (47) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (48) chat_block -> . CHAT COLON TRIPLE_STRING
    (85) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (86) for_stmt -> . FOR identifier IN error COLON stmt_block
    (89) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> . IF expr COLON stmt_block
    (91) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> . IF error COLON stmt_block
    (93) while_stmt -> . WHILE expr COLON stmt_block
    (94) while_stmt -> . WHILE error COLON stmt_block
    (77) assign_stmt -> . assign_target COLON type EQUALS expr
    (78) assign_stmt -> . assign_target EQUALS expr
    (79) assign_stmt -> . assign_target COLON type EQUALS error
    (80) assign_stmt -> . assign_target EQUALS error
    (87) break_stmt -> . BREAK
    (88) continue_stmt -> . CONTINUE
    (84) return_stmt -> . RETURN expr
    (81) assign_target -> . identifier
    (82) assign_target -> . field_access
    (83) assign_target -> . index_access
    (106) identifier -> . IDENTIFIER
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET

    INPUT           shift and go to state 144
    OUTPUT          shift and go to state 145
    MODEL           shift and go to state 146
    CHAT            shift and go to state 147
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 16
    agent_body                     shift and go to state 137
    agent_body_item                shift and go to state 138
    input_block                    shift and go to state 139
    output_block                   shift and go to state 140
    model_block                    shift and go to state 141
    statement                      shift and go to state 142
    chat_block                     shift and go to state 143
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 102

    (120) index_access -> identifier LBRACKET expr RBRACKET .

    COLON           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    EQUALS          reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    MOD             reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    EQ              reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    NEQ             reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    LT              reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    GT              reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    LE              reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    GE              reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    AGENT           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    CONNECT         reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    FUN             reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    FOR             reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    IF              reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    WHILE           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    BREAK           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    CONTINUE        reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    RETURN          reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    IDENTIFIER      reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    $end            reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    INPUT           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    OUTPUT          reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    MODEL           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    CHAT            reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    DEDENT          reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)
    RBRACE          reduce using rule 120 (index_access -> identifier LBRACKET expr RBRACKET .)


state 103

    (49) connect_block -> CONNECT COLON INDENT connection_list . DEDENT

    DEDENT          shift and go to state 148


state 104

    (50) connection_list -> connection . connection_list
    (51) connection_list -> connection .
    (50) connection_list -> . connection connection_list
    (51) connection_list -> . connection
    (52) connection -> . identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT
    (106) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 51 (connection_list -> connection .)
    IDENTIFIER      shift and go to state 28

    connection                     shift and go to state 104
    connection_list                shift and go to state 149
    identifier                     shift and go to state 105

state 105

    (52) connection -> identifier . COLON type INDENT agent_ref ARROW agent_ref DEDENT

    COLON           shift and go to state 150


state 106

    (10) var_decl -> identifier . COLON type EQUALS expr
    (11) var_decl -> identifier . COLON type
    (12) var_decl -> identifier . EQUALS expr
    (13) var_decl -> identifier .

    COLON           shift and go to state 151
    EQUALS          shift and go to state 152
    COMMA           reduce using rule 13 (var_decl -> identifier .)
    RPAREN          reduce using rule 13 (var_decl -> identifier .)
    IDENTIFIER      reduce using rule 13 (var_decl -> identifier .)
    DEDENT          reduce using rule 13 (var_decl -> identifier .)


state 107

    (58) func_def -> FUN identifier LPAREN param_list . RPAREN ARROW type COLON stmt_block
    (59) func_def -> FUN identifier LPAREN param_list . RPAREN COLON stmt_block

    RPAREN          shift and go to state 153


state 108

    (60) func_def -> FUN identifier LPAREN error . RPAREN ARROW type COLON stmt_block
    (61) func_def -> FUN identifier LPAREN error . RPAREN COLON stmt_block

    RPAREN          shift and go to state 154


state 109

    (62) param_list -> param_decl . param_list_tail
    (64) param_list_tail -> . COMMA param_decl param_list_tail
    (65) param_list_tail -> . empty
    (138) empty -> .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 138 (empty -> .)

    param_list_tail                shift and go to state 155
    empty                          shift and go to state 157

state 110

    (63) param_list -> empty .

    RPAREN          reduce using rule 63 (param_list -> empty .)


state 111

    (66) param_decl -> var_decl .

    COMMA           reduce using rule 66 (param_decl -> var_decl .)
    RPAREN          reduce using rule 66 (param_decl -> var_decl .)


state 112

    (85) for_stmt -> FOR identifier IN expr . COLON stmt_block

    COLON           shift and go to state 158


state 113

    (86) for_stmt -> FOR identifier IN error . COLON stmt_block

    COLON           shift and go to state 159


state 114

    (89) if_stmt -> IF expr COLON stmt_block . ELSE COLON stmt_block
    (90) if_stmt -> IF expr COLON stmt_block .

    ELSE            shift and go to state 160
    AGENT           reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    CONNECT         reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    FUN             reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    FOR             reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    IF              reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    WHILE           reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    BREAK           reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    CONTINUE        reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    RETURN          reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    $end            reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    INPUT           reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    OUTPUT          reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    MODEL           reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    CHAT            reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)
    DEDENT          reduce using rule 90 (if_stmt -> IF expr COLON stmt_block .)


state 115

    (67) stmt_block -> INDENT . statement_list DEDENT
    (68) statement_list -> . statement statement_list
    (69) statement_list -> . statement
    (70) statement -> . for_stmt
    (71) statement -> . if_stmt
    (72) statement -> . while_stmt
    (73) statement -> . assign_stmt
    (74) statement -> . break_stmt
    (75) statement -> . continue_stmt
    (76) statement -> . return_stmt
    (85) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (86) for_stmt -> . FOR identifier IN error COLON stmt_block
    (89) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> . IF expr COLON stmt_block
    (91) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> . IF error COLON stmt_block
    (93) while_stmt -> . WHILE expr COLON stmt_block
    (94) while_stmt -> . WHILE error COLON stmt_block
    (77) assign_stmt -> . assign_target COLON type EQUALS expr
    (78) assign_stmt -> . assign_target EQUALS expr
    (79) assign_stmt -> . assign_target COLON type EQUALS error
    (80) assign_stmt -> . assign_target EQUALS error
    (87) break_stmt -> . BREAK
    (88) continue_stmt -> . CONTINUE
    (84) return_stmt -> . RETURN expr
    (81) assign_target -> . identifier
    (82) assign_target -> . field_access
    (83) assign_target -> . index_access
    (106) identifier -> . IDENTIFIER
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET

    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    statement_list                 shift and go to state 161
    statement                      shift and go to state 162
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 116

    (91) if_stmt -> IF error COLON stmt_block . ELSE COLON stmt_block
    (92) if_stmt -> IF error COLON stmt_block .

    ELSE            shift and go to state 163
    AGENT           reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    CONNECT         reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    FUN             reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    FOR             reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    IF              reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    WHILE           reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    BREAK           reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    CONTINUE        reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    RETURN          reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    IDENTIFIER      reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    $end            reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    INPUT           reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    OUTPUT          reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    MODEL           reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    CHAT            reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)
    DEDENT          reduce using rule 92 (if_stmt -> IF error COLON stmt_block .)


state 117

    (95) expr -> expr_head bin_op expr_tail .

    COLON           reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    AGENT           reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    CONNECT         reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    FUN             reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    FOR             reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    IF              reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    WHILE           reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    BREAK           reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    CONTINUE        reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    RETURN          reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    IDENTIFIER      reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    $end            reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    INPUT           reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    OUTPUT          reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    MODEL           reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    CHAT            reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    DEDENT          reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    RBRACKET        reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    COMMA           reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    RPAREN          reduce using rule 95 (expr -> expr_head bin_op expr_tail .)
    RBRACE          reduce using rule 95 (expr -> expr_head bin_op expr_tail .)


state 118

    (103) expr_tail -> expr .

    COLON           reduce using rule 103 (expr_tail -> expr .)
    AGENT           reduce using rule 103 (expr_tail -> expr .)
    CONNECT         reduce using rule 103 (expr_tail -> expr .)
    FUN             reduce using rule 103 (expr_tail -> expr .)
    FOR             reduce using rule 103 (expr_tail -> expr .)
    IF              reduce using rule 103 (expr_tail -> expr .)
    WHILE           reduce using rule 103 (expr_tail -> expr .)
    BREAK           reduce using rule 103 (expr_tail -> expr .)
    CONTINUE        reduce using rule 103 (expr_tail -> expr .)
    RETURN          reduce using rule 103 (expr_tail -> expr .)
    IDENTIFIER      reduce using rule 103 (expr_tail -> expr .)
    $end            reduce using rule 103 (expr_tail -> expr .)
    INPUT           reduce using rule 103 (expr_tail -> expr .)
    OUTPUT          reduce using rule 103 (expr_tail -> expr .)
    MODEL           reduce using rule 103 (expr_tail -> expr .)
    CHAT            reduce using rule 103 (expr_tail -> expr .)
    DEDENT          reduce using rule 103 (expr_tail -> expr .)
    RBRACKET        reduce using rule 103 (expr_tail -> expr .)
    COMMA           reduce using rule 103 (expr_tail -> expr .)
    RPAREN          reduce using rule 103 (expr_tail -> expr .)
    RBRACE          reduce using rule 103 (expr_tail -> expr .)


state 119

    (122) func_call -> identifier LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 164


state 120

    (123) arg_list -> expr . arg_list_tail
    (125) arg_list_tail -> . COMMA expr arg_list_tail
    (126) arg_list_tail -> . empty
    (138) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 138 (empty -> .)

    arg_list_tail                  shift and go to state 165
    empty                          shift and go to state 167

state 121

    (124) arg_list -> empty .

    RPAREN          reduce using rule 124 (arg_list -> empty .)


state 122

    (109) list_expr -> LBRACKET list_elements RBRACKET .

    PLUS            reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    MINUS           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    TIMES           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    DIVIDE          reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    MOD             reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    EQ              reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    NEQ             reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    LT              reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    GT              reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    LE              reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    GE              reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    COLON           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    AGENT           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONNECT         reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    FUN             reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    FOR             reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    IF              reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    WHILE           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    BREAK           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    CONTINUE        reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    RETURN          reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    IDENTIFIER      reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    $end            reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    INPUT           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    OUTPUT          reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    MODEL           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    CHAT            reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    DEDENT          reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACKET        reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    COMMA           reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    RPAREN          reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)
    RBRACE          reduce using rule 109 (list_expr -> LBRACKET list_elements RBRACKET .)


state 123

    (110) list_elements -> expr list_elements_tail .

    RBRACKET        reduce using rule 110 (list_elements -> expr list_elements_tail .)


state 124

    (112) list_elements_tail -> COMMA . expr list_elements_tail
    (113) list_elements_tail -> COMMA . expr
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr                           shift and go to state 168
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 125

    (114) record_expr -> LBRACE record_elements RBRACE .

    PLUS            reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    MINUS           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    TIMES           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    DIVIDE          reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    MOD             reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    EQ              reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    NEQ             reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    LT              reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    GT              reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    LE              reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    GE              reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    COLON           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    AGENT           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    CONNECT         reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    FUN             reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    FOR             reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    IF              reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    WHILE           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    BREAK           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    CONTINUE        reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    RETURN          reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    IDENTIFIER      reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    $end            reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    INPUT           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    OUTPUT          reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    MODEL           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    CHAT            reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    DEDENT          reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACKET        reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    COMMA           reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    RPAREN          reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACE          reduce using rule 114 (record_expr -> LBRACE record_elements RBRACE .)


state 126

    (115) record_elements -> instance_assign record_elements_tail .

    RBRACE          reduce using rule 115 (record_elements -> instance_assign record_elements_tail .)


state 127

    (117) record_elements_tail -> COMMA . instance_assign record_elements_tail
    (118) record_elements_tail -> COMMA . instance_assign
    (119) instance_assign -> . identifier EQUALS expr
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    instance_assign                shift and go to state 169
    identifier                     shift and go to state 81

state 128

    (119) instance_assign -> identifier EQUALS . expr
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    identifier                     shift and go to state 45
    expr                           shift and go to state 170
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    constant                       shift and go to state 46

state 129

    (93) while_stmt -> WHILE expr COLON stmt_block .

    AGENT           reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    CONNECT         reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    FUN             reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    FOR             reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    IF              reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    WHILE           reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    BREAK           reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    CONTINUE        reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    RETURN          reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    $end            reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    INPUT           reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    OUTPUT          reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    MODEL           reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    CHAT            reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)
    DEDENT          reduce using rule 93 (while_stmt -> WHILE expr COLON stmt_block .)


state 130

    (94) while_stmt -> WHILE error COLON stmt_block .

    AGENT           reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    CONNECT         reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    FUN             reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    FOR             reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    IF              reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    WHILE           reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    BREAK           reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    CONTINUE        reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    RETURN          reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    IDENTIFIER      reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    $end            reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    INPUT           reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    OUTPUT          reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    MODEL           reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    CHAT            reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)
    DEDENT          reduce using rule 94 (while_stmt -> WHILE error COLON stmt_block .)


state 131

    (77) assign_stmt -> assign_target COLON type EQUALS . expr
    (79) assign_stmt -> assign_target COLON type EQUALS . error
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    error           shift and go to state 172
    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr                           shift and go to state 171
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 132

    (28) list_type -> TYPE_LIST LBRACKET . type RBRACKET
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 173
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 133

    (29) record_type -> TYPE_RECORD LBRACE . field_decl_list RBRACE
    (30) field_decl_list -> . field_decl COMMA field_decl_list
    (31) field_decl_list -> . field_decl
    (32) field_decl -> . identifier COLON type
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl_list                shift and go to state 174
    field_decl                     shift and go to state 175
    identifier                     shift and go to state 176

state 134

    (25) func_ret_type -> LPAREN type_list . RPAREN

    RPAREN          shift and go to state 177


state 135

    (26) type_list -> type .
    (27) type_list -> type . COMMA type_list

    RPAREN          reduce using rule 26 (type_list -> type .)
    RBRACKET        reduce using rule 26 (type_list -> type .)
    COMMA           shift and go to state 178


state 136

    (24) union_type -> TYPE_UNION LBRACKET . type_list RBRACKET
    (26) type_list -> . type
    (27) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type_list                      shift and go to state 179
    type                           shift and go to state 135
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 137

    (33) agent_def -> AGENT identifier COLON INDENT agent_body . DEDENT

    DEDENT          shift and go to state 180


state 138

    (34) agent_body -> agent_body_item . agent_body
    (35) agent_body -> agent_body_item .
    (34) agent_body -> . agent_body_item agent_body
    (35) agent_body -> . agent_body_item
    (36) agent_body_item -> . input_block
    (37) agent_body_item -> . output_block
    (38) agent_body_item -> . model_block
    (39) agent_body_item -> . statement
    (40) agent_body_item -> . chat_block
    (41) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (42) input_block -> . INPUT COLON INDENT error DEDENT
    (43) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (44) output_block -> . OUTPUT COLON INDENT error DEDENT
    (45) model_block -> . MODEL COLON constant
    (46) model_block -> . MODEL COLON error
    (70) statement -> . for_stmt
    (71) statement -> . if_stmt
    (72) statement -> . while_stmt
    (73) statement -> . assign_stmt
    (74) statement -> . break_stmt
    (75) statement -> . continue_stmt
    (76) statement -> . return_stmt
    (47) chat_block -> . CHAT identifier COLON TRIPLE_STRING
    (48) chat_block -> . CHAT COLON TRIPLE_STRING
    (85) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (86) for_stmt -> . FOR identifier IN error COLON stmt_block
    (89) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> . IF expr COLON stmt_block
    (91) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> . IF error COLON stmt_block
    (93) while_stmt -> . WHILE expr COLON stmt_block
    (94) while_stmt -> . WHILE error COLON stmt_block
    (77) assign_stmt -> . assign_target COLON type EQUALS expr
    (78) assign_stmt -> . assign_target EQUALS expr
    (79) assign_stmt -> . assign_target COLON type EQUALS error
    (80) assign_stmt -> . assign_target EQUALS error
    (87) break_stmt -> . BREAK
    (88) continue_stmt -> . CONTINUE
    (84) return_stmt -> . RETURN expr
    (81) assign_target -> . identifier
    (82) assign_target -> . field_access
    (83) assign_target -> . index_access
    (106) identifier -> . IDENTIFIER
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 35 (agent_body -> agent_body_item .)
    INPUT           shift and go to state 144
    OUTPUT          shift and go to state 145
    MODEL           shift and go to state 146
    CHAT            shift and go to state 147
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    agent_body_item                shift and go to state 138
    agent_body                     shift and go to state 181
    input_block                    shift and go to state 139
    output_block                   shift and go to state 140
    model_block                    shift and go to state 141
    statement                      shift and go to state 142
    chat_block                     shift and go to state 143
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 139

    (36) agent_body_item -> input_block .

    INPUT           reduce using rule 36 (agent_body_item -> input_block .)
    OUTPUT          reduce using rule 36 (agent_body_item -> input_block .)
    MODEL           reduce using rule 36 (agent_body_item -> input_block .)
    CHAT            reduce using rule 36 (agent_body_item -> input_block .)
    FOR             reduce using rule 36 (agent_body_item -> input_block .)
    IF              reduce using rule 36 (agent_body_item -> input_block .)
    WHILE           reduce using rule 36 (agent_body_item -> input_block .)
    BREAK           reduce using rule 36 (agent_body_item -> input_block .)
    CONTINUE        reduce using rule 36 (agent_body_item -> input_block .)
    RETURN          reduce using rule 36 (agent_body_item -> input_block .)
    IDENTIFIER      reduce using rule 36 (agent_body_item -> input_block .)
    DEDENT          reduce using rule 36 (agent_body_item -> input_block .)


state 140

    (37) agent_body_item -> output_block .

    INPUT           reduce using rule 37 (agent_body_item -> output_block .)
    OUTPUT          reduce using rule 37 (agent_body_item -> output_block .)
    MODEL           reduce using rule 37 (agent_body_item -> output_block .)
    CHAT            reduce using rule 37 (agent_body_item -> output_block .)
    FOR             reduce using rule 37 (agent_body_item -> output_block .)
    IF              reduce using rule 37 (agent_body_item -> output_block .)
    WHILE           reduce using rule 37 (agent_body_item -> output_block .)
    BREAK           reduce using rule 37 (agent_body_item -> output_block .)
    CONTINUE        reduce using rule 37 (agent_body_item -> output_block .)
    RETURN          reduce using rule 37 (agent_body_item -> output_block .)
    IDENTIFIER      reduce using rule 37 (agent_body_item -> output_block .)
    DEDENT          reduce using rule 37 (agent_body_item -> output_block .)


state 141

    (38) agent_body_item -> model_block .

    INPUT           reduce using rule 38 (agent_body_item -> model_block .)
    OUTPUT          reduce using rule 38 (agent_body_item -> model_block .)
    MODEL           reduce using rule 38 (agent_body_item -> model_block .)
    CHAT            reduce using rule 38 (agent_body_item -> model_block .)
    FOR             reduce using rule 38 (agent_body_item -> model_block .)
    IF              reduce using rule 38 (agent_body_item -> model_block .)
    WHILE           reduce using rule 38 (agent_body_item -> model_block .)
    BREAK           reduce using rule 38 (agent_body_item -> model_block .)
    CONTINUE        reduce using rule 38 (agent_body_item -> model_block .)
    RETURN          reduce using rule 38 (agent_body_item -> model_block .)
    IDENTIFIER      reduce using rule 38 (agent_body_item -> model_block .)
    DEDENT          reduce using rule 38 (agent_body_item -> model_block .)


state 142

    (39) agent_body_item -> statement .

    INPUT           reduce using rule 39 (agent_body_item -> statement .)
    OUTPUT          reduce using rule 39 (agent_body_item -> statement .)
    MODEL           reduce using rule 39 (agent_body_item -> statement .)
    CHAT            reduce using rule 39 (agent_body_item -> statement .)
    FOR             reduce using rule 39 (agent_body_item -> statement .)
    IF              reduce using rule 39 (agent_body_item -> statement .)
    WHILE           reduce using rule 39 (agent_body_item -> statement .)
    BREAK           reduce using rule 39 (agent_body_item -> statement .)
    CONTINUE        reduce using rule 39 (agent_body_item -> statement .)
    RETURN          reduce using rule 39 (agent_body_item -> statement .)
    IDENTIFIER      reduce using rule 39 (agent_body_item -> statement .)
    DEDENT          reduce using rule 39 (agent_body_item -> statement .)


state 143

    (40) agent_body_item -> chat_block .

    INPUT           reduce using rule 40 (agent_body_item -> chat_block .)
    OUTPUT          reduce using rule 40 (agent_body_item -> chat_block .)
    MODEL           reduce using rule 40 (agent_body_item -> chat_block .)
    CHAT            reduce using rule 40 (agent_body_item -> chat_block .)
    FOR             reduce using rule 40 (agent_body_item -> chat_block .)
    IF              reduce using rule 40 (agent_body_item -> chat_block .)
    WHILE           reduce using rule 40 (agent_body_item -> chat_block .)
    BREAK           reduce using rule 40 (agent_body_item -> chat_block .)
    CONTINUE        reduce using rule 40 (agent_body_item -> chat_block .)
    RETURN          reduce using rule 40 (agent_body_item -> chat_block .)
    IDENTIFIER      reduce using rule 40 (agent_body_item -> chat_block .)
    DEDENT          reduce using rule 40 (agent_body_item -> chat_block .)


state 144

    (41) input_block -> INPUT . COLON INDENT var_decl_list DEDENT
    (42) input_block -> INPUT . COLON INDENT error DEDENT

    COLON           shift and go to state 182


state 145

    (43) output_block -> OUTPUT . COLON INDENT var_decl_list DEDENT
    (44) output_block -> OUTPUT . COLON INDENT error DEDENT

    COLON           shift and go to state 183


state 146

    (45) model_block -> MODEL . COLON constant
    (46) model_block -> MODEL . COLON error

    COLON           shift and go to state 184


state 147

    (47) chat_block -> CHAT . identifier COLON TRIPLE_STRING
    (48) chat_block -> CHAT . COLON TRIPLE_STRING
    (106) identifier -> . IDENTIFIER

    COLON           shift and go to state 186
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 185

state 148

    (49) connect_block -> CONNECT COLON INDENT connection_list DEDENT .

    AGENT           reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONNECT         reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FUN             reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FOR             reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IF              reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    WHILE           reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    BREAK           reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONTINUE        reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    RETURN          reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IDENTIFIER      reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    $end            reduce using rule 49 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)


state 149

    (50) connection_list -> connection connection_list .

    DEDENT          reduce using rule 50 (connection_list -> connection connection_list .)


state 150

    (52) connection -> identifier COLON . type INDENT agent_ref ARROW agent_ref DEDENT
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 187
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 151

    (10) var_decl -> identifier COLON . type EQUALS expr
    (11) var_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 188
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 152

    (12) var_decl -> identifier EQUALS . expr
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    identifier                     shift and go to state 45
    expr                           shift and go to state 189
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    constant                       shift and go to state 46

state 153

    (58) func_def -> FUN identifier LPAREN param_list RPAREN . ARROW type COLON stmt_block
    (59) func_def -> FUN identifier LPAREN param_list RPAREN . COLON stmt_block

    ARROW           shift and go to state 190
    COLON           shift and go to state 191


state 154

    (60) func_def -> FUN identifier LPAREN error RPAREN . ARROW type COLON stmt_block
    (61) func_def -> FUN identifier LPAREN error RPAREN . COLON stmt_block

    ARROW           shift and go to state 192
    COLON           shift and go to state 193


state 155

    (62) param_list -> param_decl param_list_tail .

    RPAREN          reduce using rule 62 (param_list -> param_decl param_list_tail .)


state 156

    (64) param_list_tail -> COMMA . param_decl param_list_tail
    (66) param_decl -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    param_decl                     shift and go to state 194
    var_decl                       shift and go to state 111
    identifier                     shift and go to state 106

state 157

    (65) param_list_tail -> empty .

    RPAREN          reduce using rule 65 (param_list_tail -> empty .)


state 158

    (85) for_stmt -> FOR identifier IN expr COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 195

state 159

    (86) for_stmt -> FOR identifier IN error COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 196

state 160

    (89) if_stmt -> IF expr COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 197


state 161

    (67) stmt_block -> INDENT statement_list . DEDENT

    DEDENT          shift and go to state 198


state 162

    (68) statement_list -> statement . statement_list
    (69) statement_list -> statement .
    (68) statement_list -> . statement statement_list
    (69) statement_list -> . statement
    (70) statement -> . for_stmt
    (71) statement -> . if_stmt
    (72) statement -> . while_stmt
    (73) statement -> . assign_stmt
    (74) statement -> . break_stmt
    (75) statement -> . continue_stmt
    (76) statement -> . return_stmt
    (85) for_stmt -> . FOR identifier IN expr COLON stmt_block
    (86) for_stmt -> . FOR identifier IN error COLON stmt_block
    (89) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (90) if_stmt -> . IF expr COLON stmt_block
    (91) if_stmt -> . IF error COLON stmt_block ELSE COLON stmt_block
    (92) if_stmt -> . IF error COLON stmt_block
    (93) while_stmt -> . WHILE expr COLON stmt_block
    (94) while_stmt -> . WHILE error COLON stmt_block
    (77) assign_stmt -> . assign_target COLON type EQUALS expr
    (78) assign_stmt -> . assign_target EQUALS expr
    (79) assign_stmt -> . assign_target COLON type EQUALS error
    (80) assign_stmt -> . assign_target EQUALS error
    (87) break_stmt -> . BREAK
    (88) continue_stmt -> . CONTINUE
    (84) return_stmt -> . RETURN expr
    (81) assign_target -> . identifier
    (82) assign_target -> . field_access
    (83) assign_target -> . index_access
    (106) identifier -> . IDENTIFIER
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET

    DEDENT          reduce using rule 69 (statement_list -> statement .)
    FOR             shift and go to state 19
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    IDENTIFIER      shift and go to state 28

    statement                      shift and go to state 162
    statement_list                 shift and go to state 199
    for_stmt                       shift and go to state 8
    if_stmt                        shift and go to state 9
    while_stmt                     shift and go to state 10
    assign_stmt                    shift and go to state 11
    break_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    return_stmt                    shift and go to state 14
    identifier                     shift and go to state 16
    assign_target                  shift and go to state 22
    field_access                   shift and go to state 26
    index_access                   shift and go to state 27

state 163

    (91) if_stmt -> IF error COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 200


state 164

    (122) func_call -> identifier LPAREN arg_list RPAREN .

    PLUS            reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    MOD             reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    EQ              reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    LT              reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    GT              reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    LE              reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    GE              reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    COLON           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    AGENT           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONNECT         reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    FUN             reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    FOR             reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    IF              reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    $end            reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    INPUT           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    OUTPUT          reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    MODEL           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    CHAT            reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    DEDENT          reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACKET        reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 122 (func_call -> identifier LPAREN arg_list RPAREN .)


state 165

    (123) arg_list -> expr arg_list_tail .

    RPAREN          reduce using rule 123 (arg_list -> expr arg_list_tail .)


state 166

    (125) arg_list_tail -> COMMA . expr arg_list_tail
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    expr                           shift and go to state 201
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    identifier                     shift and go to state 45
    constant                       shift and go to state 46

state 167

    (126) arg_list_tail -> empty .

    RPAREN          reduce using rule 126 (arg_list_tail -> empty .)


state 168

    (112) list_elements_tail -> COMMA expr . list_elements_tail
    (113) list_elements_tail -> COMMA expr .
    (112) list_elements_tail -> . COMMA expr list_elements_tail
    (113) list_elements_tail -> . COMMA expr

    RBRACKET        reduce using rule 113 (list_elements_tail -> COMMA expr .)
    COMMA           shift and go to state 124

    list_elements_tail             shift and go to state 202

state 169

    (117) record_elements_tail -> COMMA instance_assign . record_elements_tail
    (118) record_elements_tail -> COMMA instance_assign .
    (117) record_elements_tail -> . COMMA instance_assign record_elements_tail
    (118) record_elements_tail -> . COMMA instance_assign

    RBRACE          reduce using rule 118 (record_elements_tail -> COMMA instance_assign .)
    COMMA           shift and go to state 127

    record_elements_tail           shift and go to state 203

state 170

    (119) instance_assign -> identifier EQUALS expr .

    COMMA           reduce using rule 119 (instance_assign -> identifier EQUALS expr .)
    RBRACE          reduce using rule 119 (instance_assign -> identifier EQUALS expr .)


state 171

    (77) assign_stmt -> assign_target COLON type EQUALS expr .

    AGENT           reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONNECT         reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FUN             reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    FOR             reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IF              reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    WHILE           reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    BREAK           reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CONTINUE        reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    RETURN          reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    $end            reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    INPUT           reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    OUTPUT          reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    MODEL           reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    CHAT            reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)
    DEDENT          reduce using rule 77 (assign_stmt -> assign_target COLON type EQUALS expr .)


state 172

    (79) assign_stmt -> assign_target COLON type EQUALS error .

    AGENT           reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    CONNECT         reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    FUN             reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    FOR             reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    IF              reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    WHILE           reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    BREAK           reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    CONTINUE        reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    RETURN          reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    IDENTIFIER      reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    $end            reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    INPUT           reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    OUTPUT          reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    MODEL           reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    CHAT            reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)
    DEDENT          reduce using rule 79 (assign_stmt -> assign_target COLON type EQUALS error .)


state 173

    (28) list_type -> TYPE_LIST LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 204


state 174

    (29) record_type -> TYPE_RECORD LBRACE field_decl_list . RBRACE

    RBRACE          shift and go to state 205


state 175

    (30) field_decl_list -> field_decl . COMMA field_decl_list
    (31) field_decl_list -> field_decl .

    COMMA           shift and go to state 206
    RBRACE          reduce using rule 31 (field_decl_list -> field_decl .)


state 176

    (32) field_decl -> identifier . COLON type

    COLON           shift and go to state 207


state 177

    (25) func_ret_type -> LPAREN type_list RPAREN .

    EQUALS          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    COMMA           reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    RPAREN          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACKET        reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    INDENT          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    IDENTIFIER      reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    DEDENT          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    COLON           reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)
    RBRACE          reduce using rule 25 (func_ret_type -> LPAREN type_list RPAREN .)


state 178

    (27) type_list -> type COMMA . type_list
    (26) type_list -> . type
    (27) type_list -> . type COMMA type_list
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 135
    type_list                      shift and go to state 208
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 179

    (24) union_type -> TYPE_UNION LBRACKET type_list . RBRACKET

    RBRACKET        shift and go to state 209


state 180

    (33) agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .

    AGENT           reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONNECT         reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FUN             reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    FOR             reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IF              reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    WHILE           reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    BREAK           reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    CONTINUE        reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    RETURN          reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    IDENTIFIER      reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)
    $end            reduce using rule 33 (agent_def -> AGENT identifier COLON INDENT agent_body DEDENT .)


state 181

    (34) agent_body -> agent_body_item agent_body .

    DEDENT          reduce using rule 34 (agent_body -> agent_body_item agent_body .)


state 182

    (41) input_block -> INPUT COLON . INDENT var_decl_list DEDENT
    (42) input_block -> INPUT COLON . INDENT error DEDENT

    INDENT          shift and go to state 210


state 183

    (43) output_block -> OUTPUT COLON . INDENT var_decl_list DEDENT
    (44) output_block -> OUTPUT COLON . INDENT error DEDENT

    INDENT          shift and go to state 211


state 184

    (45) model_block -> MODEL COLON . constant
    (46) model_block -> MODEL COLON . error
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    error           shift and go to state 213
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    constant                       shift and go to state 212

state 185

    (47) chat_block -> CHAT identifier . COLON TRIPLE_STRING

    COLON           shift and go to state 214


state 186

    (48) chat_block -> CHAT COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 215


state 187

    (52) connection -> identifier COLON type . INDENT agent_ref ARROW agent_ref DEDENT

    INDENT          shift and go to state 216


state 188

    (10) var_decl -> identifier COLON type . EQUALS expr
    (11) var_decl -> identifier COLON type .

    EQUALS          shift and go to state 217
    COMMA           reduce using rule 11 (var_decl -> identifier COLON type .)
    RPAREN          reduce using rule 11 (var_decl -> identifier COLON type .)
    IDENTIFIER      reduce using rule 11 (var_decl -> identifier COLON type .)
    DEDENT          reduce using rule 11 (var_decl -> identifier COLON type .)


state 189

    (12) var_decl -> identifier EQUALS expr .

    COMMA           reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    RPAREN          reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    IDENTIFIER      reduce using rule 12 (var_decl -> identifier EQUALS expr .)
    DEDENT          reduce using rule 12 (var_decl -> identifier EQUALS expr .)


state 190

    (58) func_def -> FUN identifier LPAREN param_list RPAREN ARROW . type COLON stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 218
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 191

    (59) func_def -> FUN identifier LPAREN param_list RPAREN COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 219

state 192

    (60) func_def -> FUN identifier LPAREN error RPAREN ARROW . type COLON stmt_block
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 220
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 193

    (61) func_def -> FUN identifier LPAREN error RPAREN COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 221

state 194

    (64) param_list_tail -> COMMA param_decl . param_list_tail
    (64) param_list_tail -> . COMMA param_decl param_list_tail
    (65) param_list_tail -> . empty
    (138) empty -> .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 138 (empty -> .)

    param_list_tail                shift and go to state 222
    empty                          shift and go to state 157

state 195

    (85) for_stmt -> FOR identifier IN expr COLON stmt_block .

    AGENT           reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONNECT         reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FUN             reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    FOR             reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IF              reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    WHILE           reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    BREAK           reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CONTINUE        reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    RETURN          reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    $end            reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    INPUT           reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    OUTPUT          reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    MODEL           reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    CHAT            reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)
    DEDENT          reduce using rule 85 (for_stmt -> FOR identifier IN expr COLON stmt_block .)


state 196

    (86) for_stmt -> FOR identifier IN error COLON stmt_block .

    AGENT           reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    CONNECT         reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    FUN             reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    FOR             reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    IF              reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    WHILE           reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    BREAK           reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    CONTINUE        reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    RETURN          reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    IDENTIFIER      reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    $end            reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    INPUT           reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    OUTPUT          reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    MODEL           reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    CHAT            reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)
    DEDENT          reduce using rule 86 (for_stmt -> FOR identifier IN error COLON stmt_block .)


state 197

    (89) if_stmt -> IF expr COLON stmt_block ELSE COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 223

state 198

    (67) stmt_block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    AGENT           reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    CONNECT         reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    FUN             reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    BREAK           reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    CONTINUE        reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    IDENTIFIER      reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    INPUT           reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    OUTPUT          reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    MODEL           reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    CHAT            reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 67 (stmt_block -> INDENT statement_list DEDENT .)


state 199

    (68) statement_list -> statement statement_list .

    DEDENT          reduce using rule 68 (statement_list -> statement statement_list .)


state 200

    (91) if_stmt -> IF error COLON stmt_block ELSE COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 224

state 201

    (125) arg_list_tail -> COMMA expr . arg_list_tail
    (125) arg_list_tail -> . COMMA expr arg_list_tail
    (126) arg_list_tail -> . empty
    (138) empty -> .

    COMMA           shift and go to state 166
    RPAREN          reduce using rule 138 (empty -> .)

    arg_list_tail                  shift and go to state 225
    empty                          shift and go to state 167

state 202

    (112) list_elements_tail -> COMMA expr list_elements_tail .

    RBRACKET        reduce using rule 112 (list_elements_tail -> COMMA expr list_elements_tail .)


state 203

    (117) record_elements_tail -> COMMA instance_assign record_elements_tail .

    RBRACE          reduce using rule 117 (record_elements_tail -> COMMA instance_assign record_elements_tail .)


state 204

    (28) list_type -> TYPE_LIST LBRACKET type RBRACKET .

    EQUALS          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COMMA           reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    INDENT          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    IDENTIFIER      reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    DEDENT          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    COLON           reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)
    RBRACE          reduce using rule 28 (list_type -> TYPE_LIST LBRACKET type RBRACKET .)


state 205

    (29) record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .

    EQUALS          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COMMA           reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RPAREN          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACKET        reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    INDENT          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IDENTIFIER      reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    DEDENT          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COLON           reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACE          reduce using rule 29 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)


state 206

    (30) field_decl_list -> field_decl COMMA . field_decl_list
    (30) field_decl_list -> . field_decl COMMA field_decl_list
    (31) field_decl_list -> . field_decl
    (32) field_decl -> . identifier COLON type
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    field_decl                     shift and go to state 175
    field_decl_list                shift and go to state 226
    identifier                     shift and go to state 176

state 207

    (32) field_decl -> identifier COLON . type
    (14) type -> . base_type
    (15) type -> . list_type
    (16) type -> . record_type
    (17) type -> . func_ret_type
    (18) type -> . union_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) base_type -> . TYPE_UNIT
    (28) list_type -> . TYPE_LIST LBRACKET type RBRACKET
    (29) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE
    (25) func_ret_type -> . LPAREN type_list RPAREN
    (24) union_type -> . TYPE_UNION LBRACKET type_list RBRACKET

    TYPE_STR        shift and go to state 90
    TYPE_INT        shift and go to state 91
    TYPE_FLOAT      shift and go to state 92
    TYPE_BOOL       shift and go to state 93
    TYPE_UNIT       shift and go to state 94
    TYPE_LIST       shift and go to state 95
    TYPE_RECORD     shift and go to state 96
    LPAREN          shift and go to state 97
    TYPE_UNION      shift and go to state 98

    type                           shift and go to state 227
    base_type                      shift and go to state 85
    list_type                      shift and go to state 86
    record_type                    shift and go to state 87
    func_ret_type                  shift and go to state 88
    union_type                     shift and go to state 89

state 208

    (27) type_list -> type COMMA type_list .

    RPAREN          reduce using rule 27 (type_list -> type COMMA type_list .)
    RBRACKET        reduce using rule 27 (type_list -> type COMMA type_list .)


state 209

    (24) union_type -> TYPE_UNION LBRACKET type_list RBRACKET .

    EQUALS          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    COMMA           reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RPAREN          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RBRACKET        reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    INDENT          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    IDENTIFIER      reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    DEDENT          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    COLON           reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)
    RBRACE          reduce using rule 24 (union_type -> TYPE_UNION LBRACKET type_list RBRACKET .)


state 210

    (41) input_block -> INPUT COLON INDENT . var_decl_list DEDENT
    (42) input_block -> INPUT COLON INDENT . error DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (106) identifier -> . IDENTIFIER

    error           shift and go to state 229
    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 228
    var_decl                       shift and go to state 230
    identifier                     shift and go to state 106

state 211

    (43) output_block -> OUTPUT COLON INDENT . var_decl_list DEDENT
    (44) output_block -> OUTPUT COLON INDENT . error DEDENT
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (106) identifier -> . IDENTIFIER

    error           shift and go to state 232
    IDENTIFIER      shift and go to state 28

    var_decl_list                  shift and go to state 231
    var_decl                       shift and go to state 230
    identifier                     shift and go to state 106

state 212

    (45) model_block -> MODEL COLON constant .

    INPUT           reduce using rule 45 (model_block -> MODEL COLON constant .)
    OUTPUT          reduce using rule 45 (model_block -> MODEL COLON constant .)
    MODEL           reduce using rule 45 (model_block -> MODEL COLON constant .)
    CHAT            reduce using rule 45 (model_block -> MODEL COLON constant .)
    FOR             reduce using rule 45 (model_block -> MODEL COLON constant .)
    IF              reduce using rule 45 (model_block -> MODEL COLON constant .)
    WHILE           reduce using rule 45 (model_block -> MODEL COLON constant .)
    BREAK           reduce using rule 45 (model_block -> MODEL COLON constant .)
    CONTINUE        reduce using rule 45 (model_block -> MODEL COLON constant .)
    RETURN          reduce using rule 45 (model_block -> MODEL COLON constant .)
    IDENTIFIER      reduce using rule 45 (model_block -> MODEL COLON constant .)
    DEDENT          reduce using rule 45 (model_block -> MODEL COLON constant .)


state 213

    (46) model_block -> MODEL COLON error .

    INPUT           reduce using rule 46 (model_block -> MODEL COLON error .)
    OUTPUT          reduce using rule 46 (model_block -> MODEL COLON error .)
    MODEL           reduce using rule 46 (model_block -> MODEL COLON error .)
    CHAT            reduce using rule 46 (model_block -> MODEL COLON error .)
    FOR             reduce using rule 46 (model_block -> MODEL COLON error .)
    IF              reduce using rule 46 (model_block -> MODEL COLON error .)
    WHILE           reduce using rule 46 (model_block -> MODEL COLON error .)
    BREAK           reduce using rule 46 (model_block -> MODEL COLON error .)
    CONTINUE        reduce using rule 46 (model_block -> MODEL COLON error .)
    RETURN          reduce using rule 46 (model_block -> MODEL COLON error .)
    IDENTIFIER      reduce using rule 46 (model_block -> MODEL COLON error .)
    DEDENT          reduce using rule 46 (model_block -> MODEL COLON error .)


state 214

    (47) chat_block -> CHAT identifier COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 233


state 215

    (48) chat_block -> CHAT COLON TRIPLE_STRING .

    INPUT           reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    MODEL           reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CHAT            reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    FOR             reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IF              reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    WHILE           reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    BREAK           reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    RETURN          reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 48 (chat_block -> CHAT COLON TRIPLE_STRING .)


state 216

    (52) connection -> identifier COLON type INDENT . agent_ref ARROW agent_ref DEDENT
    (53) agent_ref -> . identifier agent_ref_tail
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 234
    agent_ref                      shift and go to state 235

state 217

    (10) var_decl -> identifier COLON type EQUALS . expr
    (95) expr -> . expr_head bin_op expr_tail
    (96) expr -> . expr_head
    (97) expr_head -> . atom
    (98) expr_head -> . list_expr
    (99) expr_head -> . record_expr
    (100) expr_head -> . field_access
    (101) expr_head -> . index_access
    (102) expr_head -> . func_call
    (104) atom -> . identifier
    (105) atom -> . constant
    (109) list_expr -> . LBRACKET list_elements RBRACKET
    (114) record_expr -> . LBRACE record_elements RBRACE
    (121) field_access -> . identifier DOT identifier
    (120) index_access -> . identifier LBRACKET expr RBRACKET
    (122) func_call -> . identifier LPAREN arg_list RPAREN
    (106) identifier -> . IDENTIFIER
    (107) constant -> . STRING
    (108) constant -> . NUMBER

    LBRACKET        shift and go to state 47
    LBRACE          shift and go to state 48
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50

    identifier                     shift and go to state 45
    expr                           shift and go to state 236
    expr_head                      shift and go to state 38
    atom                           shift and go to state 39
    list_expr                      shift and go to state 40
    record_expr                    shift and go to state 41
    field_access                   shift and go to state 42
    index_access                   shift and go to state 43
    func_call                      shift and go to state 44
    constant                       shift and go to state 46

state 218

    (58) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type . COLON stmt_block

    COLON           shift and go to state 237


state 219

    (59) func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .

    AGENT           reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FUN             reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    FOR             reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IF              reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    WHILE           reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    BREAK           reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    RETURN          reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)
    $end            reduce using rule 59 (func_def -> FUN identifier LPAREN param_list RPAREN COLON stmt_block .)


state 220

    (60) func_def -> FUN identifier LPAREN error RPAREN ARROW type . COLON stmt_block

    COLON           shift and go to state 238


state 221

    (61) func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .

    AGENT           reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    CONNECT         reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    FUN             reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    FOR             reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    IF              reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    WHILE           reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    BREAK           reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    CONTINUE        reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    RETURN          reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    IDENTIFIER      reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)
    $end            reduce using rule 61 (func_def -> FUN identifier LPAREN error RPAREN COLON stmt_block .)


state 222

    (64) param_list_tail -> COMMA param_decl param_list_tail .

    RPAREN          reduce using rule 64 (param_list_tail -> COMMA param_decl param_list_tail .)


state 223

    (89) if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FUN             reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 89 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)


state 224

    (91) if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    FUN             reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 91 (if_stmt -> IF error COLON stmt_block ELSE COLON stmt_block .)


state 225

    (125) arg_list_tail -> COMMA expr arg_list_tail .

    RPAREN          reduce using rule 125 (arg_list_tail -> COMMA expr arg_list_tail .)


state 226

    (30) field_decl_list -> field_decl COMMA field_decl_list .

    RBRACE          reduce using rule 30 (field_decl_list -> field_decl COMMA field_decl_list .)


state 227

    (32) field_decl -> identifier COLON type .

    COMMA           reduce using rule 32 (field_decl -> identifier COLON type .)
    RBRACE          reduce using rule 32 (field_decl -> identifier COLON type .)


state 228

    (41) input_block -> INPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 239


state 229

    (42) input_block -> INPUT COLON INDENT error . DEDENT

    DEDENT          shift and go to state 240


state 230

    (8) var_decl_list -> var_decl . var_decl_list
    (9) var_decl_list -> var_decl .
    (8) var_decl_list -> . var_decl var_decl_list
    (9) var_decl_list -> . var_decl
    (10) var_decl -> . identifier COLON type EQUALS expr
    (11) var_decl -> . identifier COLON type
    (12) var_decl -> . identifier EQUALS expr
    (13) var_decl -> . identifier
    (106) identifier -> . IDENTIFIER

    DEDENT          reduce using rule 9 (var_decl_list -> var_decl .)
    IDENTIFIER      shift and go to state 28

    var_decl                       shift and go to state 230
    var_decl_list                  shift and go to state 241
    identifier                     shift and go to state 106

state 231

    (43) output_block -> OUTPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 242


state 232

    (44) output_block -> OUTPUT COLON INDENT error . DEDENT

    DEDENT          shift and go to state 243


state 233

    (47) chat_block -> CHAT identifier COLON TRIPLE_STRING .

    INPUT           reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    MODEL           reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CHAT            reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    FOR             reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IF              reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    WHILE           reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    BREAK           reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    RETURN          reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 47 (chat_block -> CHAT identifier COLON TRIPLE_STRING .)


state 234

    (53) agent_ref -> identifier . agent_ref_tail
    (54) agent_ref_tail -> . DOT identifier agent_ref_tail
    (55) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (56) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (57) agent_ref_tail -> . empty
    (138) empty -> .

    DOT             shift and go to state 245
    ARROW           reduce using rule 138 (empty -> .)
    DEDENT          reduce using rule 138 (empty -> .)

    agent_ref_tail                 shift and go to state 244
    empty                          shift and go to state 246

state 235

    (52) connection -> identifier COLON type INDENT agent_ref . ARROW agent_ref DEDENT

    ARROW           shift and go to state 247


state 236

    (10) var_decl -> identifier COLON type EQUALS expr .

    COMMA           reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    RPAREN          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)
    DEDENT          reduce using rule 10 (var_decl -> identifier COLON type EQUALS expr .)


state 237

    (58) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 248

state 238

    (60) func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON . stmt_block
    (67) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 115

    stmt_block                     shift and go to state 249

state 239

    (41) input_block -> INPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 41 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)


state 240

    (42) input_block -> INPUT COLON INDENT error DEDENT .

    INPUT           reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    OUTPUT          reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    MODEL           reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    CHAT            reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    FOR             reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    IF              reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    WHILE           reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    BREAK           reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    CONTINUE        reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    RETURN          reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    IDENTIFIER      reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)
    DEDENT          reduce using rule 42 (input_block -> INPUT COLON INDENT error DEDENT .)


state 241

    (8) var_decl_list -> var_decl var_decl_list .

    DEDENT          reduce using rule 8 (var_decl_list -> var_decl var_decl_list .)


state 242

    (43) output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 43 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)


state 243

    (44) output_block -> OUTPUT COLON INDENT error DEDENT .

    INPUT           reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    OUTPUT          reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    MODEL           reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    CHAT            reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    FOR             reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    IF              reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    WHILE           reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    BREAK           reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    CONTINUE        reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    RETURN          reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    IDENTIFIER      reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)
    DEDENT          reduce using rule 44 (output_block -> OUTPUT COLON INDENT error DEDENT .)


state 244

    (53) agent_ref -> identifier agent_ref_tail .

    ARROW           reduce using rule 53 (agent_ref -> identifier agent_ref_tail .)
    DEDENT          reduce using rule 53 (agent_ref -> identifier agent_ref_tail .)


state 245

    (54) agent_ref_tail -> DOT . identifier agent_ref_tail
    (55) agent_ref_tail -> DOT . OUTPUT agent_ref_tail
    (56) agent_ref_tail -> DOT . INPUT agent_ref_tail
    (106) identifier -> . IDENTIFIER

    OUTPUT          shift and go to state 251
    INPUT           shift and go to state 252
    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 250

state 246

    (57) agent_ref_tail -> empty .

    ARROW           reduce using rule 57 (agent_ref_tail -> empty .)
    DEDENT          reduce using rule 57 (agent_ref_tail -> empty .)


state 247

    (52) connection -> identifier COLON type INDENT agent_ref ARROW . agent_ref DEDENT
    (53) agent_ref -> . identifier agent_ref_tail
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 28

    identifier                     shift and go to state 234
    agent_ref                      shift and go to state 253

state 248

    (58) func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .

    AGENT           reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONNECT         reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FUN             reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    FOR             reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IF              reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    WHILE           reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    BREAK           reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    CONTINUE        reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    RETURN          reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    IDENTIFIER      reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)
    $end            reduce using rule 58 (func_def -> FUN identifier LPAREN param_list RPAREN ARROW type COLON stmt_block .)


state 249

    (60) func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .

    AGENT           reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    CONNECT         reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    FUN             reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    FOR             reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    IF              reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    WHILE           reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    BREAK           reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    CONTINUE        reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    RETURN          reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    IDENTIFIER      reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)
    $end            reduce using rule 60 (func_def -> FUN identifier LPAREN error RPAREN ARROW type COLON stmt_block .)


state 250

    (54) agent_ref_tail -> DOT identifier . agent_ref_tail
    (54) agent_ref_tail -> . DOT identifier agent_ref_tail
    (55) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (56) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (57) agent_ref_tail -> . empty
    (138) empty -> .

    DOT             shift and go to state 245
    ARROW           reduce using rule 138 (empty -> .)
    DEDENT          reduce using rule 138 (empty -> .)

    agent_ref_tail                 shift and go to state 254
    empty                          shift and go to state 246

state 251

    (55) agent_ref_tail -> DOT OUTPUT . agent_ref_tail
    (54) agent_ref_tail -> . DOT identifier agent_ref_tail
    (55) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (56) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (57) agent_ref_tail -> . empty
    (138) empty -> .

    DOT             shift and go to state 245
    ARROW           reduce using rule 138 (empty -> .)
    DEDENT          reduce using rule 138 (empty -> .)

    agent_ref_tail                 shift and go to state 255
    empty                          shift and go to state 246

state 252

    (56) agent_ref_tail -> DOT INPUT . agent_ref_tail
    (54) agent_ref_tail -> . DOT identifier agent_ref_tail
    (55) agent_ref_tail -> . DOT OUTPUT agent_ref_tail
    (56) agent_ref_tail -> . DOT INPUT agent_ref_tail
    (57) agent_ref_tail -> . empty
    (138) empty -> .

    DOT             shift and go to state 245
    ARROW           reduce using rule 138 (empty -> .)
    DEDENT          reduce using rule 138 (empty -> .)

    agent_ref_tail                 shift and go to state 256
    empty                          shift and go to state 246

state 253

    (52) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref . DEDENT

    DEDENT          shift and go to state 257


state 254

    (54) agent_ref_tail -> DOT identifier agent_ref_tail .

    ARROW           reduce using rule 54 (agent_ref_tail -> DOT identifier agent_ref_tail .)
    DEDENT          reduce using rule 54 (agent_ref_tail -> DOT identifier agent_ref_tail .)


state 255

    (55) agent_ref_tail -> DOT OUTPUT agent_ref_tail .

    ARROW           reduce using rule 55 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)
    DEDENT          reduce using rule 55 (agent_ref_tail -> DOT OUTPUT agent_ref_tail .)


state 256

    (56) agent_ref_tail -> DOT INPUT agent_ref_tail .

    ARROW           reduce using rule 56 (agent_ref_tail -> DOT INPUT agent_ref_tail .)
    DEDENT          reduce using rule 56 (agent_ref_tail -> DOT INPUT agent_ref_tail .)


state 257

    (52) connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .

    IDENTIFIER      reduce using rule 52 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)
    DEDENT          reduce using rule 52 (connection -> identifier COLON type INDENT agent_ref ARROW agent_ref DEDENT .)

