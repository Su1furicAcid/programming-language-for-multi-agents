Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    TYPE_TUPLE

Grammar

Rule 0     S' -> program
Rule 1     program -> global_block program_body
Rule 2     program -> program_body
Rule 3     program_body -> program_body_item program_body
Rule 4     program_body -> program_body_item
Rule 5     program_body_item -> statement
Rule 6     program_body_item -> agent_def
Rule 7     program_body_item -> connect_block
Rule 8     program_body_item -> func_def
Rule 9     global_block -> GLOBAL COLON INDENT var_decl_list DEDENT
Rule 10    var_decl_list -> var_decl var_decl_list
Rule 11    var_decl_list -> var_decl
Rule 12    var_decl -> IDENTIFIER COLON type EQUALS expr
Rule 13    var_decl -> IDENTIFIER COLON type
Rule 14    var_decl -> IDENTIFIER EQUALS expr
Rule 15    var_decl -> IDENTIFIER
Rule 16    type -> base_type
Rule 17    type -> list_type
Rule 18    type -> record_type
Rule 19    base_type -> TYPE_STR
Rule 20    base_type -> TYPE_INT
Rule 21    base_type -> TYPE_FLOAT
Rule 22    base_type -> TYPE_BOOL
Rule 23    list_type -> TYPE_LIST LBRACE type RBRACE
Rule 24    record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE
Rule 25    field_decl_list -> field_decl field_decl_list
Rule 26    field_decl_list -> field_decl
Rule 27    field_decl -> IDENTIFIER COLON type
Rule 28    agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT
Rule 29    agent_body -> agent_body_item agent_body
Rule 30    agent_body -> agent_body_item
Rule 31    agent_body_item -> input_block
Rule 32    agent_body_item -> output_block
Rule 33    agent_body_item -> memory_block
Rule 34    agent_body_item -> model_block
Rule 35    agent_body_item -> statement
Rule 36    agent_body_item -> chat_block
Rule 37    input_block -> INPUT COLON INDENT var_decl_list DEDENT
Rule 38    output_block -> OUTPUT COLON INDENT var_decl_list DEDENT
Rule 39    memory_block -> MEMORY COLON INDENT var_decl_list DEDENT
Rule 40    model_block -> MODEL COLON STRING
Rule 41    chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING
Rule 42    connect_block -> CONNECT COLON INDENT connection_list DEDENT
Rule 43    connection_list -> connection connection_list
Rule 44    connection_list -> connection
Rule 45    connection -> IDENTIFIER COLON type agent_ref ARROW agent_ref
Rule 46    agent_ref -> IDENTIFIER agent_ref_tail
Rule 47    agent_ref_tail -> DOT IDENTIFIER agent_ref_tail
Rule 48    agent_ref_tail -> empty
Rule 49    func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT
Rule 50    func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT
Rule 51    param_list -> param_decl param_list_tail
Rule 52    param_list -> empty
Rule 53    param_list_tail -> COMMA param_decl param_list_tail
Rule 54    param_list_tail -> empty
Rule 55    param_decl -> var_decl
Rule 56    stmt_block -> INDENT statement_list DEDENT
Rule 57    statement_list -> statement statement_list
Rule 58    statement_list -> statement
Rule 59    statement -> for_stmt
Rule 60    statement -> if_stmt
Rule 61    statement -> while_stmt
Rule 62    statement -> assign_stmt
Rule 63    statement -> expr_stmt
Rule 64    statement -> break_stmt
Rule 65    statement -> continue_stmt
Rule 66    statement -> return_stmt
Rule 67    assign_stmt -> IDENTIFIER COLON type EQUALS expr
Rule 68    assign_stmt -> IDENTIFIER EQUALS expr
Rule 69    expr_stmt -> expr
Rule 70    return_stmt -> RETURN expr
Rule 71    return_stmt -> RETURN
Rule 72    for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block
Rule 73    break_stmt -> BREAK
Rule 74    continue_stmt -> CONTINUE
Rule 75    if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block
Rule 76    if_stmt -> IF expr COLON stmt_block
Rule 77    while_stmt -> WHILE expr COLON stmt_block
Rule 78    expr -> expr_head bin_op expr_tail
Rule 79    expr -> expr_head
Rule 80    expr_head -> atom
Rule 81    expr_head -> list_expr
Rule 82    expr_head -> record_expr
Rule 83    expr_head -> field_access
Rule 84    expr_head -> func_call
Rule 85    expr_tail -> expr
Rule 86    atom -> IDENTIFIER
Rule 87    atom -> STRING
Rule 88    atom -> NUMBER
Rule 89    list_expr -> LBRACE list_elements RBRACE
Rule 90    list_elements -> expr list_elements_tail
Rule 91    list_elements -> empty
Rule 92    list_elements_tail -> COMMA expr list_elements_tail
Rule 93    list_elements_tail -> empty
Rule 94    record_expr -> LBRACE record_elements RBRACE
Rule 95    record_elements -> field_assign record_elements_tail
Rule 96    record_elements -> empty
Rule 97    record_elements_tail -> COMMA field_assign record_elements_tail
Rule 98    record_elements_tail -> empty
Rule 99    field_assign -> IDENTIFIER EQUALS expr
Rule 100   field_access -> IDENTIFIER DOT IDENTIFIER
Rule 101   func_call -> IDENTIFIER LPAREN arg_list RPAREN
Rule 102   arg_list -> expr arg_list_tail
Rule 103   arg_list -> empty
Rule 104   arg_list_tail -> COMMA expr arg_list_tail
Rule 105   arg_list_tail -> empty
Rule 106   bin_op -> PLUS
Rule 107   bin_op -> MINUS
Rule 108   bin_op -> TIMES
Rule 109   bin_op -> DIVIDE
Rule 110   bin_op -> MOD
Rule 111   bin_op -> EQ
Rule 112   bin_op -> NEQ
Rule 113   bin_op -> LT
Rule 114   bin_op -> GT
Rule 115   bin_op -> LE
Rule 116   bin_op -> GE
Rule 117   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 28
ARROW                : 45
BREAK                : 73
CHAT                 : 41
COLON                : 9 12 13 27 28 37 38 39 40 41 42 45 49 49 50 67 72 75 75 76 77
COMMA                : 53 92 97 104
CONNECT              : 42
CONTINUE             : 74
DEDENT               : 9 28 37 38 39 42 49 50 56
DEF                  : 49 50
DIVIDE               : 109
DOT                  : 47 100
ELSE                 : 75
EQ                   : 111
EQUALS               : 12 14 67 68 99
FOR                  : 72
GE                   : 116
GLOBAL               : 9
GT                   : 114
IDENTIFIER           : 12 13 14 15 27 28 41 45 46 47 49 50 67 68 72 86 99 100 100 101
IF                   : 75 76
IN                   : 72
INDENT               : 9 28 37 38 39 42 49 50 56
INPUT                : 37
LBRACE               : 23 24 89 94
LE                   : 115
LPAREN               : 49 50 101
LT                   : 113
MEMORY               : 39
MINUS                : 107
MOD                  : 110
MODEL                : 40
NEQ                  : 112
NEWLINE              : 
NUMBER               : 88
OUTPUT               : 38
PLUS                 : 106
RBRACE               : 23 24 89 94
RETURN               : 70 71
RPAREN               : 49 50 101
STRING               : 40 87
TIMES                : 108
TRIPLE_STRING        : 41
TYPE_BOOL            : 22
TYPE_FLOAT           : 21
TYPE_INT             : 20
TYPE_LIST            : 23
TYPE_RECORD          : 24
TYPE_STR             : 19
TYPE_TUPLE           : 
WHILE                : 77
error                : 

Nonterminals, with rules where they appear

agent_body           : 28 29
agent_body_item      : 29 30
agent_def            : 6
agent_ref            : 45 45
agent_ref_tail       : 46 47
arg_list             : 101
arg_list_tail        : 102 104
assign_stmt          : 62
atom                 : 80
base_type            : 16
bin_op               : 78
break_stmt           : 64
chat_block           : 36
connect_block        : 7
connection           : 43 44
connection_list      : 42 43
continue_stmt        : 65
empty                : 48 52 54 91 93 96 98 103 105
expr                 : 12 14 67 68 69 70 72 75 76 77 85 90 92 99 102 104
expr_head            : 78 79
expr_stmt            : 63
expr_tail            : 78
field_access         : 83
field_assign         : 95 97
field_decl           : 25 26
field_decl_list      : 24 25
for_stmt             : 59
func_call            : 84
func_def             : 8
global_block         : 1
if_stmt              : 60
input_block          : 31
list_elements        : 89
list_elements_tail   : 90 92
list_expr            : 81
list_type            : 17
memory_block         : 33
model_block          : 34
output_block         : 32
param_decl           : 51 53
param_list           : 49 50
param_list_tail      : 51 53
program              : 0
program_body         : 1 2 3
program_body_item    : 3 4
record_elements      : 94
record_elements_tail : 95 97
record_expr          : 82
record_type          : 18
return_stmt          : 66
statement            : 5 35 57 58
statement_list       : 56 57
stmt_block           : 49 50 72 75 75 76 77
type                 : 12 13 23 27 45 49 67
var_decl             : 10 11 55
var_decl_list        : 9 10 37 38 39
while_stmt           : 61


state 0

    (0) S' -> . program
    (1) program -> . global_block program_body
    (2) program -> . program_body
    (9) global_block -> . GLOBAL COLON INDENT var_decl_list DEDENT
    (3) program_body -> . program_body_item program_body
    (4) program_body -> . program_body_item
    (5) program_body_item -> . statement
    (6) program_body_item -> . agent_def
    (7) program_body_item -> . connect_block
    (8) program_body_item -> . func_def
    (59) statement -> . for_stmt
    (60) statement -> . if_stmt
    (61) statement -> . while_stmt
    (62) statement -> . assign_stmt
    (63) statement -> . expr_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (28) agent_def -> . AGENT IDENTIFIER COLON INDENT agent_body DEDENT
    (42) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (49) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (75) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> . IF expr COLON stmt_block
    (77) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) expr_stmt -> . expr
    (73) break_stmt -> . BREAK
    (74) continue_stmt -> . CONTINUE
    (70) return_stmt -> . RETURN expr
    (71) return_stmt -> . RETURN
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    GLOBAL          shift and go to state 4
    AGENT           shift and go to state 18
    CONNECT         shift and go to state 20
    DEF             shift and go to state 21
    FOR             shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    IDENTIFIER      shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 28
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    program                        shift and go to state 1
    global_block                   shift and go to state 2
    program_body                   shift and go to state 3
    program_body_item              shift and go to state 5
    statement                      shift and go to state 6
    agent_def                      shift and go to state 7
    connect_block                  shift and go to state 8
    func_def                       shift and go to state 9
    for_stmt                       shift and go to state 10
    if_stmt                        shift and go to state 11
    while_stmt                     shift and go to state 12
    assign_stmt                    shift and go to state 13
    expr_stmt                      shift and go to state 14
    break_stmt                     shift and go to state 15
    continue_stmt                  shift and go to state 16
    return_stmt                    shift and go to state 17
    expr                           shift and go to state 23
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 1

    (0) S' -> program .



state 2

    (1) program -> global_block . program_body
    (3) program_body -> . program_body_item program_body
    (4) program_body -> . program_body_item
    (5) program_body_item -> . statement
    (6) program_body_item -> . agent_def
    (7) program_body_item -> . connect_block
    (8) program_body_item -> . func_def
    (59) statement -> . for_stmt
    (60) statement -> . if_stmt
    (61) statement -> . while_stmt
    (62) statement -> . assign_stmt
    (63) statement -> . expr_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (28) agent_def -> . AGENT IDENTIFIER COLON INDENT agent_body DEDENT
    (42) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (49) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (75) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> . IF expr COLON stmt_block
    (77) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) expr_stmt -> . expr
    (73) break_stmt -> . BREAK
    (74) continue_stmt -> . CONTINUE
    (70) return_stmt -> . RETURN expr
    (71) return_stmt -> . RETURN
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    AGENT           shift and go to state 18
    CONNECT         shift and go to state 20
    DEF             shift and go to state 21
    FOR             shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    IDENTIFIER      shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 28
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    program_body                   shift and go to state 38
    program_body_item              shift and go to state 5
    statement                      shift and go to state 6
    agent_def                      shift and go to state 7
    connect_block                  shift and go to state 8
    func_def                       shift and go to state 9
    for_stmt                       shift and go to state 10
    if_stmt                        shift and go to state 11
    while_stmt                     shift and go to state 12
    assign_stmt                    shift and go to state 13
    expr_stmt                      shift and go to state 14
    break_stmt                     shift and go to state 15
    continue_stmt                  shift and go to state 16
    return_stmt                    shift and go to state 17
    expr                           shift and go to state 23
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 3

    (2) program -> program_body .

    $end            reduce using rule 2 (program -> program_body .)


state 4

    (9) global_block -> GLOBAL . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 39


state 5

    (3) program_body -> program_body_item . program_body
    (4) program_body -> program_body_item .
    (3) program_body -> . program_body_item program_body
    (4) program_body -> . program_body_item
    (5) program_body_item -> . statement
    (6) program_body_item -> . agent_def
    (7) program_body_item -> . connect_block
    (8) program_body_item -> . func_def
    (59) statement -> . for_stmt
    (60) statement -> . if_stmt
    (61) statement -> . while_stmt
    (62) statement -> . assign_stmt
    (63) statement -> . expr_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (28) agent_def -> . AGENT IDENTIFIER COLON INDENT agent_body DEDENT
    (42) connect_block -> . CONNECT COLON INDENT connection_list DEDENT
    (49) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> . DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT
    (72) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (75) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> . IF expr COLON stmt_block
    (77) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) expr_stmt -> . expr
    (73) break_stmt -> . BREAK
    (74) continue_stmt -> . CONTINUE
    (70) return_stmt -> . RETURN expr
    (71) return_stmt -> . RETURN
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    $end            reduce using rule 4 (program_body -> program_body_item .)
    AGENT           shift and go to state 18
    CONNECT         shift and go to state 20
    DEF             shift and go to state 21
    FOR             shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    IDENTIFIER      shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 28
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    program_body_item              shift and go to state 5
    program_body                   shift and go to state 40
    statement                      shift and go to state 6
    agent_def                      shift and go to state 7
    connect_block                  shift and go to state 8
    func_def                       shift and go to state 9
    for_stmt                       shift and go to state 10
    if_stmt                        shift and go to state 11
    while_stmt                     shift and go to state 12
    assign_stmt                    shift and go to state 13
    expr_stmt                      shift and go to state 14
    break_stmt                     shift and go to state 15
    continue_stmt                  shift and go to state 16
    return_stmt                    shift and go to state 17
    expr                           shift and go to state 23
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 6

    (5) program_body_item -> statement .

    AGENT           reduce using rule 5 (program_body_item -> statement .)
    CONNECT         reduce using rule 5 (program_body_item -> statement .)
    DEF             reduce using rule 5 (program_body_item -> statement .)
    FOR             reduce using rule 5 (program_body_item -> statement .)
    IF              reduce using rule 5 (program_body_item -> statement .)
    WHILE           reduce using rule 5 (program_body_item -> statement .)
    IDENTIFIER      reduce using rule 5 (program_body_item -> statement .)
    BREAK           reduce using rule 5 (program_body_item -> statement .)
    CONTINUE        reduce using rule 5 (program_body_item -> statement .)
    RETURN          reduce using rule 5 (program_body_item -> statement .)
    STRING          reduce using rule 5 (program_body_item -> statement .)
    NUMBER          reduce using rule 5 (program_body_item -> statement .)
    LBRACE          reduce using rule 5 (program_body_item -> statement .)
    $end            reduce using rule 5 (program_body_item -> statement .)


state 7

    (6) program_body_item -> agent_def .

    AGENT           reduce using rule 6 (program_body_item -> agent_def .)
    CONNECT         reduce using rule 6 (program_body_item -> agent_def .)
    DEF             reduce using rule 6 (program_body_item -> agent_def .)
    FOR             reduce using rule 6 (program_body_item -> agent_def .)
    IF              reduce using rule 6 (program_body_item -> agent_def .)
    WHILE           reduce using rule 6 (program_body_item -> agent_def .)
    IDENTIFIER      reduce using rule 6 (program_body_item -> agent_def .)
    BREAK           reduce using rule 6 (program_body_item -> agent_def .)
    CONTINUE        reduce using rule 6 (program_body_item -> agent_def .)
    RETURN          reduce using rule 6 (program_body_item -> agent_def .)
    STRING          reduce using rule 6 (program_body_item -> agent_def .)
    NUMBER          reduce using rule 6 (program_body_item -> agent_def .)
    LBRACE          reduce using rule 6 (program_body_item -> agent_def .)
    $end            reduce using rule 6 (program_body_item -> agent_def .)


state 8

    (7) program_body_item -> connect_block .

    AGENT           reduce using rule 7 (program_body_item -> connect_block .)
    CONNECT         reduce using rule 7 (program_body_item -> connect_block .)
    DEF             reduce using rule 7 (program_body_item -> connect_block .)
    FOR             reduce using rule 7 (program_body_item -> connect_block .)
    IF              reduce using rule 7 (program_body_item -> connect_block .)
    WHILE           reduce using rule 7 (program_body_item -> connect_block .)
    IDENTIFIER      reduce using rule 7 (program_body_item -> connect_block .)
    BREAK           reduce using rule 7 (program_body_item -> connect_block .)
    CONTINUE        reduce using rule 7 (program_body_item -> connect_block .)
    RETURN          reduce using rule 7 (program_body_item -> connect_block .)
    STRING          reduce using rule 7 (program_body_item -> connect_block .)
    NUMBER          reduce using rule 7 (program_body_item -> connect_block .)
    LBRACE          reduce using rule 7 (program_body_item -> connect_block .)
    $end            reduce using rule 7 (program_body_item -> connect_block .)


state 9

    (8) program_body_item -> func_def .

    AGENT           reduce using rule 8 (program_body_item -> func_def .)
    CONNECT         reduce using rule 8 (program_body_item -> func_def .)
    DEF             reduce using rule 8 (program_body_item -> func_def .)
    FOR             reduce using rule 8 (program_body_item -> func_def .)
    IF              reduce using rule 8 (program_body_item -> func_def .)
    WHILE           reduce using rule 8 (program_body_item -> func_def .)
    IDENTIFIER      reduce using rule 8 (program_body_item -> func_def .)
    BREAK           reduce using rule 8 (program_body_item -> func_def .)
    CONTINUE        reduce using rule 8 (program_body_item -> func_def .)
    RETURN          reduce using rule 8 (program_body_item -> func_def .)
    STRING          reduce using rule 8 (program_body_item -> func_def .)
    NUMBER          reduce using rule 8 (program_body_item -> func_def .)
    LBRACE          reduce using rule 8 (program_body_item -> func_def .)
    $end            reduce using rule 8 (program_body_item -> func_def .)


state 10

    (59) statement -> for_stmt .

    AGENT           reduce using rule 59 (statement -> for_stmt .)
    CONNECT         reduce using rule 59 (statement -> for_stmt .)
    DEF             reduce using rule 59 (statement -> for_stmt .)
    FOR             reduce using rule 59 (statement -> for_stmt .)
    IF              reduce using rule 59 (statement -> for_stmt .)
    WHILE           reduce using rule 59 (statement -> for_stmt .)
    IDENTIFIER      reduce using rule 59 (statement -> for_stmt .)
    BREAK           reduce using rule 59 (statement -> for_stmt .)
    CONTINUE        reduce using rule 59 (statement -> for_stmt .)
    RETURN          reduce using rule 59 (statement -> for_stmt .)
    STRING          reduce using rule 59 (statement -> for_stmt .)
    NUMBER          reduce using rule 59 (statement -> for_stmt .)
    LBRACE          reduce using rule 59 (statement -> for_stmt .)
    $end            reduce using rule 59 (statement -> for_stmt .)
    INPUT           reduce using rule 59 (statement -> for_stmt .)
    OUTPUT          reduce using rule 59 (statement -> for_stmt .)
    MEMORY          reduce using rule 59 (statement -> for_stmt .)
    MODEL           reduce using rule 59 (statement -> for_stmt .)
    CHAT            reduce using rule 59 (statement -> for_stmt .)
    DEDENT          reduce using rule 59 (statement -> for_stmt .)


state 11

    (60) statement -> if_stmt .

    AGENT           reduce using rule 60 (statement -> if_stmt .)
    CONNECT         reduce using rule 60 (statement -> if_stmt .)
    DEF             reduce using rule 60 (statement -> if_stmt .)
    FOR             reduce using rule 60 (statement -> if_stmt .)
    IF              reduce using rule 60 (statement -> if_stmt .)
    WHILE           reduce using rule 60 (statement -> if_stmt .)
    IDENTIFIER      reduce using rule 60 (statement -> if_stmt .)
    BREAK           reduce using rule 60 (statement -> if_stmt .)
    CONTINUE        reduce using rule 60 (statement -> if_stmt .)
    RETURN          reduce using rule 60 (statement -> if_stmt .)
    STRING          reduce using rule 60 (statement -> if_stmt .)
    NUMBER          reduce using rule 60 (statement -> if_stmt .)
    LBRACE          reduce using rule 60 (statement -> if_stmt .)
    $end            reduce using rule 60 (statement -> if_stmt .)
    INPUT           reduce using rule 60 (statement -> if_stmt .)
    OUTPUT          reduce using rule 60 (statement -> if_stmt .)
    MEMORY          reduce using rule 60 (statement -> if_stmt .)
    MODEL           reduce using rule 60 (statement -> if_stmt .)
    CHAT            reduce using rule 60 (statement -> if_stmt .)
    DEDENT          reduce using rule 60 (statement -> if_stmt .)


state 12

    (61) statement -> while_stmt .

    AGENT           reduce using rule 61 (statement -> while_stmt .)
    CONNECT         reduce using rule 61 (statement -> while_stmt .)
    DEF             reduce using rule 61 (statement -> while_stmt .)
    FOR             reduce using rule 61 (statement -> while_stmt .)
    IF              reduce using rule 61 (statement -> while_stmt .)
    WHILE           reduce using rule 61 (statement -> while_stmt .)
    IDENTIFIER      reduce using rule 61 (statement -> while_stmt .)
    BREAK           reduce using rule 61 (statement -> while_stmt .)
    CONTINUE        reduce using rule 61 (statement -> while_stmt .)
    RETURN          reduce using rule 61 (statement -> while_stmt .)
    STRING          reduce using rule 61 (statement -> while_stmt .)
    NUMBER          reduce using rule 61 (statement -> while_stmt .)
    LBRACE          reduce using rule 61 (statement -> while_stmt .)
    $end            reduce using rule 61 (statement -> while_stmt .)
    INPUT           reduce using rule 61 (statement -> while_stmt .)
    OUTPUT          reduce using rule 61 (statement -> while_stmt .)
    MEMORY          reduce using rule 61 (statement -> while_stmt .)
    MODEL           reduce using rule 61 (statement -> while_stmt .)
    CHAT            reduce using rule 61 (statement -> while_stmt .)
    DEDENT          reduce using rule 61 (statement -> while_stmt .)


state 13

    (62) statement -> assign_stmt .

    AGENT           reduce using rule 62 (statement -> assign_stmt .)
    CONNECT         reduce using rule 62 (statement -> assign_stmt .)
    DEF             reduce using rule 62 (statement -> assign_stmt .)
    FOR             reduce using rule 62 (statement -> assign_stmt .)
    IF              reduce using rule 62 (statement -> assign_stmt .)
    WHILE           reduce using rule 62 (statement -> assign_stmt .)
    IDENTIFIER      reduce using rule 62 (statement -> assign_stmt .)
    BREAK           reduce using rule 62 (statement -> assign_stmt .)
    CONTINUE        reduce using rule 62 (statement -> assign_stmt .)
    RETURN          reduce using rule 62 (statement -> assign_stmt .)
    STRING          reduce using rule 62 (statement -> assign_stmt .)
    NUMBER          reduce using rule 62 (statement -> assign_stmt .)
    LBRACE          reduce using rule 62 (statement -> assign_stmt .)
    $end            reduce using rule 62 (statement -> assign_stmt .)
    INPUT           reduce using rule 62 (statement -> assign_stmt .)
    OUTPUT          reduce using rule 62 (statement -> assign_stmt .)
    MEMORY          reduce using rule 62 (statement -> assign_stmt .)
    MODEL           reduce using rule 62 (statement -> assign_stmt .)
    CHAT            reduce using rule 62 (statement -> assign_stmt .)
    DEDENT          reduce using rule 62 (statement -> assign_stmt .)


state 14

    (63) statement -> expr_stmt .

    AGENT           reduce using rule 63 (statement -> expr_stmt .)
    CONNECT         reduce using rule 63 (statement -> expr_stmt .)
    DEF             reduce using rule 63 (statement -> expr_stmt .)
    FOR             reduce using rule 63 (statement -> expr_stmt .)
    IF              reduce using rule 63 (statement -> expr_stmt .)
    WHILE           reduce using rule 63 (statement -> expr_stmt .)
    IDENTIFIER      reduce using rule 63 (statement -> expr_stmt .)
    BREAK           reduce using rule 63 (statement -> expr_stmt .)
    CONTINUE        reduce using rule 63 (statement -> expr_stmt .)
    RETURN          reduce using rule 63 (statement -> expr_stmt .)
    STRING          reduce using rule 63 (statement -> expr_stmt .)
    NUMBER          reduce using rule 63 (statement -> expr_stmt .)
    LBRACE          reduce using rule 63 (statement -> expr_stmt .)
    $end            reduce using rule 63 (statement -> expr_stmt .)
    INPUT           reduce using rule 63 (statement -> expr_stmt .)
    OUTPUT          reduce using rule 63 (statement -> expr_stmt .)
    MEMORY          reduce using rule 63 (statement -> expr_stmt .)
    MODEL           reduce using rule 63 (statement -> expr_stmt .)
    CHAT            reduce using rule 63 (statement -> expr_stmt .)
    DEDENT          reduce using rule 63 (statement -> expr_stmt .)


state 15

    (64) statement -> break_stmt .

    AGENT           reduce using rule 64 (statement -> break_stmt .)
    CONNECT         reduce using rule 64 (statement -> break_stmt .)
    DEF             reduce using rule 64 (statement -> break_stmt .)
    FOR             reduce using rule 64 (statement -> break_stmt .)
    IF              reduce using rule 64 (statement -> break_stmt .)
    WHILE           reduce using rule 64 (statement -> break_stmt .)
    IDENTIFIER      reduce using rule 64 (statement -> break_stmt .)
    BREAK           reduce using rule 64 (statement -> break_stmt .)
    CONTINUE        reduce using rule 64 (statement -> break_stmt .)
    RETURN          reduce using rule 64 (statement -> break_stmt .)
    STRING          reduce using rule 64 (statement -> break_stmt .)
    NUMBER          reduce using rule 64 (statement -> break_stmt .)
    LBRACE          reduce using rule 64 (statement -> break_stmt .)
    $end            reduce using rule 64 (statement -> break_stmt .)
    INPUT           reduce using rule 64 (statement -> break_stmt .)
    OUTPUT          reduce using rule 64 (statement -> break_stmt .)
    MEMORY          reduce using rule 64 (statement -> break_stmt .)
    MODEL           reduce using rule 64 (statement -> break_stmt .)
    CHAT            reduce using rule 64 (statement -> break_stmt .)
    DEDENT          reduce using rule 64 (statement -> break_stmt .)


state 16

    (65) statement -> continue_stmt .

    AGENT           reduce using rule 65 (statement -> continue_stmt .)
    CONNECT         reduce using rule 65 (statement -> continue_stmt .)
    DEF             reduce using rule 65 (statement -> continue_stmt .)
    FOR             reduce using rule 65 (statement -> continue_stmt .)
    IF              reduce using rule 65 (statement -> continue_stmt .)
    WHILE           reduce using rule 65 (statement -> continue_stmt .)
    IDENTIFIER      reduce using rule 65 (statement -> continue_stmt .)
    BREAK           reduce using rule 65 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 65 (statement -> continue_stmt .)
    RETURN          reduce using rule 65 (statement -> continue_stmt .)
    STRING          reduce using rule 65 (statement -> continue_stmt .)
    NUMBER          reduce using rule 65 (statement -> continue_stmt .)
    LBRACE          reduce using rule 65 (statement -> continue_stmt .)
    $end            reduce using rule 65 (statement -> continue_stmt .)
    INPUT           reduce using rule 65 (statement -> continue_stmt .)
    OUTPUT          reduce using rule 65 (statement -> continue_stmt .)
    MEMORY          reduce using rule 65 (statement -> continue_stmt .)
    MODEL           reduce using rule 65 (statement -> continue_stmt .)
    CHAT            reduce using rule 65 (statement -> continue_stmt .)
    DEDENT          reduce using rule 65 (statement -> continue_stmt .)


state 17

    (66) statement -> return_stmt .

    AGENT           reduce using rule 66 (statement -> return_stmt .)
    CONNECT         reduce using rule 66 (statement -> return_stmt .)
    DEF             reduce using rule 66 (statement -> return_stmt .)
    FOR             reduce using rule 66 (statement -> return_stmt .)
    IF              reduce using rule 66 (statement -> return_stmt .)
    WHILE           reduce using rule 66 (statement -> return_stmt .)
    IDENTIFIER      reduce using rule 66 (statement -> return_stmt .)
    BREAK           reduce using rule 66 (statement -> return_stmt .)
    CONTINUE        reduce using rule 66 (statement -> return_stmt .)
    RETURN          reduce using rule 66 (statement -> return_stmt .)
    STRING          reduce using rule 66 (statement -> return_stmt .)
    NUMBER          reduce using rule 66 (statement -> return_stmt .)
    LBRACE          reduce using rule 66 (statement -> return_stmt .)
    $end            reduce using rule 66 (statement -> return_stmt .)
    INPUT           reduce using rule 66 (statement -> return_stmt .)
    OUTPUT          reduce using rule 66 (statement -> return_stmt .)
    MEMORY          reduce using rule 66 (statement -> return_stmt .)
    MODEL           reduce using rule 66 (statement -> return_stmt .)
    CHAT            reduce using rule 66 (statement -> return_stmt .)
    DEDENT          reduce using rule 66 (statement -> return_stmt .)


state 18

    (28) agent_def -> AGENT . IDENTIFIER COLON INDENT agent_body DEDENT

    IDENTIFIER      shift and go to state 41


state 19

    (67) assign_stmt -> IDENTIFIER . COLON type EQUALS expr
    (68) assign_stmt -> IDENTIFIER . EQUALS expr
    (86) atom -> IDENTIFIER .
    (100) field_access -> IDENTIFIER . DOT IDENTIFIER
    (101) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    COLON           shift and go to state 42
    EQUALS          shift and go to state 43
    PLUS            reduce using rule 86 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 86 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 86 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 86 (atom -> IDENTIFIER .)
    MOD             reduce using rule 86 (atom -> IDENTIFIER .)
    EQ              reduce using rule 86 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 86 (atom -> IDENTIFIER .)
    LT              reduce using rule 86 (atom -> IDENTIFIER .)
    GT              reduce using rule 86 (atom -> IDENTIFIER .)
    LE              reduce using rule 86 (atom -> IDENTIFIER .)
    GE              reduce using rule 86 (atom -> IDENTIFIER .)
    AGENT           reduce using rule 86 (atom -> IDENTIFIER .)
    CONNECT         reduce using rule 86 (atom -> IDENTIFIER .)
    DEF             reduce using rule 86 (atom -> IDENTIFIER .)
    FOR             reduce using rule 86 (atom -> IDENTIFIER .)
    IF              reduce using rule 86 (atom -> IDENTIFIER .)
    WHILE           reduce using rule 86 (atom -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 86 (atom -> IDENTIFIER .)
    BREAK           reduce using rule 86 (atom -> IDENTIFIER .)
    CONTINUE        reduce using rule 86 (atom -> IDENTIFIER .)
    RETURN          reduce using rule 86 (atom -> IDENTIFIER .)
    STRING          reduce using rule 86 (atom -> IDENTIFIER .)
    NUMBER          reduce using rule 86 (atom -> IDENTIFIER .)
    LBRACE          reduce using rule 86 (atom -> IDENTIFIER .)
    $end            reduce using rule 86 (atom -> IDENTIFIER .)
    INPUT           reduce using rule 86 (atom -> IDENTIFIER .)
    OUTPUT          reduce using rule 86 (atom -> IDENTIFIER .)
    MEMORY          reduce using rule 86 (atom -> IDENTIFIER .)
    MODEL           reduce using rule 86 (atom -> IDENTIFIER .)
    CHAT            reduce using rule 86 (atom -> IDENTIFIER .)
    DEDENT          reduce using rule 86 (atom -> IDENTIFIER .)
    DOT             shift and go to state 44
    LPAREN          shift and go to state 45


state 20

    (42) connect_block -> CONNECT . COLON INDENT connection_list DEDENT

    COLON           shift and go to state 46


state 21

    (49) func_def -> DEF . IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> DEF . IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT

    IDENTIFIER      shift and go to state 47


state 22

    (72) for_stmt -> FOR . IDENTIFIER IN expr COLON stmt_block

    IDENTIFIER      shift and go to state 48


state 23

    (69) expr_stmt -> expr .

    AGENT           reduce using rule 69 (expr_stmt -> expr .)
    CONNECT         reduce using rule 69 (expr_stmt -> expr .)
    DEF             reduce using rule 69 (expr_stmt -> expr .)
    FOR             reduce using rule 69 (expr_stmt -> expr .)
    IF              reduce using rule 69 (expr_stmt -> expr .)
    WHILE           reduce using rule 69 (expr_stmt -> expr .)
    IDENTIFIER      reduce using rule 69 (expr_stmt -> expr .)
    BREAK           reduce using rule 69 (expr_stmt -> expr .)
    CONTINUE        reduce using rule 69 (expr_stmt -> expr .)
    RETURN          reduce using rule 69 (expr_stmt -> expr .)
    STRING          reduce using rule 69 (expr_stmt -> expr .)
    NUMBER          reduce using rule 69 (expr_stmt -> expr .)
    LBRACE          reduce using rule 69 (expr_stmt -> expr .)
    $end            reduce using rule 69 (expr_stmt -> expr .)
    INPUT           reduce using rule 69 (expr_stmt -> expr .)
    OUTPUT          reduce using rule 69 (expr_stmt -> expr .)
    MEMORY          reduce using rule 69 (expr_stmt -> expr .)
    MODEL           reduce using rule 69 (expr_stmt -> expr .)
    CHAT            reduce using rule 69 (expr_stmt -> expr .)
    DEDENT          reduce using rule 69 (expr_stmt -> expr .)


state 24

    (75) if_stmt -> IF . expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> IF . expr COLON stmt_block
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 49
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 25

    (77) while_stmt -> WHILE . expr COLON stmt_block
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 51
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 26

    (73) break_stmt -> BREAK .

    AGENT           reduce using rule 73 (break_stmt -> BREAK .)
    CONNECT         reduce using rule 73 (break_stmt -> BREAK .)
    DEF             reduce using rule 73 (break_stmt -> BREAK .)
    FOR             reduce using rule 73 (break_stmt -> BREAK .)
    IF              reduce using rule 73 (break_stmt -> BREAK .)
    WHILE           reduce using rule 73 (break_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 73 (break_stmt -> BREAK .)
    BREAK           reduce using rule 73 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 73 (break_stmt -> BREAK .)
    RETURN          reduce using rule 73 (break_stmt -> BREAK .)
    STRING          reduce using rule 73 (break_stmt -> BREAK .)
    NUMBER          reduce using rule 73 (break_stmt -> BREAK .)
    LBRACE          reduce using rule 73 (break_stmt -> BREAK .)
    $end            reduce using rule 73 (break_stmt -> BREAK .)
    INPUT           reduce using rule 73 (break_stmt -> BREAK .)
    OUTPUT          reduce using rule 73 (break_stmt -> BREAK .)
    MEMORY          reduce using rule 73 (break_stmt -> BREAK .)
    MODEL           reduce using rule 73 (break_stmt -> BREAK .)
    CHAT            reduce using rule 73 (break_stmt -> BREAK .)
    DEDENT          reduce using rule 73 (break_stmt -> BREAK .)


state 27

    (74) continue_stmt -> CONTINUE .

    AGENT           reduce using rule 74 (continue_stmt -> CONTINUE .)
    CONNECT         reduce using rule 74 (continue_stmt -> CONTINUE .)
    DEF             reduce using rule 74 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 74 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 74 (continue_stmt -> CONTINUE .)
    WHILE           reduce using rule 74 (continue_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 74 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 74 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 74 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 74 (continue_stmt -> CONTINUE .)
    STRING          reduce using rule 74 (continue_stmt -> CONTINUE .)
    NUMBER          reduce using rule 74 (continue_stmt -> CONTINUE .)
    LBRACE          reduce using rule 74 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 74 (continue_stmt -> CONTINUE .)
    INPUT           reduce using rule 74 (continue_stmt -> CONTINUE .)
    OUTPUT          reduce using rule 74 (continue_stmt -> CONTINUE .)
    MEMORY          reduce using rule 74 (continue_stmt -> CONTINUE .)
    MODEL           reduce using rule 74 (continue_stmt -> CONTINUE .)
    CHAT            reduce using rule 74 (continue_stmt -> CONTINUE .)
    DEDENT          reduce using rule 74 (continue_stmt -> CONTINUE .)


state 28

    (70) return_stmt -> RETURN . expr
    (71) return_stmt -> RETURN .
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    AGENT           reduce using rule 71 (return_stmt -> RETURN .)
    CONNECT         reduce using rule 71 (return_stmt -> RETURN .)
    DEF             reduce using rule 71 (return_stmt -> RETURN .)
    FOR             reduce using rule 71 (return_stmt -> RETURN .)
    IF              reduce using rule 71 (return_stmt -> RETURN .)
    WHILE           reduce using rule 71 (return_stmt -> RETURN .)
    BREAK           reduce using rule 71 (return_stmt -> RETURN .)
    CONTINUE        reduce using rule 71 (return_stmt -> RETURN .)
    RETURN          reduce using rule 71 (return_stmt -> RETURN .)
    $end            reduce using rule 71 (return_stmt -> RETURN .)
    INPUT           reduce using rule 71 (return_stmt -> RETURN .)
    OUTPUT          reduce using rule 71 (return_stmt -> RETURN .)
    MEMORY          reduce using rule 71 (return_stmt -> RETURN .)
    MODEL           reduce using rule 71 (return_stmt -> RETURN .)
    CHAT            reduce using rule 71 (return_stmt -> RETURN .)
    DEDENT          reduce using rule 71 (return_stmt -> RETURN .)
    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

  ! IDENTIFIER      [ reduce using rule 71 (return_stmt -> RETURN .) ]
  ! STRING          [ reduce using rule 71 (return_stmt -> RETURN .) ]
  ! NUMBER          [ reduce using rule 71 (return_stmt -> RETURN .) ]
  ! LBRACE          [ reduce using rule 71 (return_stmt -> RETURN .) ]

    expr                           shift and go to state 52
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 29

    (78) expr -> expr_head . bin_op expr_tail
    (79) expr -> expr_head .
    (106) bin_op -> . PLUS
    (107) bin_op -> . MINUS
    (108) bin_op -> . TIMES
    (109) bin_op -> . DIVIDE
    (110) bin_op -> . MOD
    (111) bin_op -> . EQ
    (112) bin_op -> . NEQ
    (113) bin_op -> . LT
    (114) bin_op -> . GT
    (115) bin_op -> . LE
    (116) bin_op -> . GE

    AGENT           reduce using rule 79 (expr -> expr_head .)
    CONNECT         reduce using rule 79 (expr -> expr_head .)
    DEF             reduce using rule 79 (expr -> expr_head .)
    FOR             reduce using rule 79 (expr -> expr_head .)
    IF              reduce using rule 79 (expr -> expr_head .)
    WHILE           reduce using rule 79 (expr -> expr_head .)
    IDENTIFIER      reduce using rule 79 (expr -> expr_head .)
    BREAK           reduce using rule 79 (expr -> expr_head .)
    CONTINUE        reduce using rule 79 (expr -> expr_head .)
    RETURN          reduce using rule 79 (expr -> expr_head .)
    STRING          reduce using rule 79 (expr -> expr_head .)
    NUMBER          reduce using rule 79 (expr -> expr_head .)
    LBRACE          reduce using rule 79 (expr -> expr_head .)
    $end            reduce using rule 79 (expr -> expr_head .)
    COLON           reduce using rule 79 (expr -> expr_head .)
    INPUT           reduce using rule 79 (expr -> expr_head .)
    OUTPUT          reduce using rule 79 (expr -> expr_head .)
    MEMORY          reduce using rule 79 (expr -> expr_head .)
    MODEL           reduce using rule 79 (expr -> expr_head .)
    CHAT            reduce using rule 79 (expr -> expr_head .)
    DEDENT          reduce using rule 79 (expr -> expr_head .)
    COMMA           reduce using rule 79 (expr -> expr_head .)
    RBRACE          reduce using rule 79 (expr -> expr_head .)
    RPAREN          reduce using rule 79 (expr -> expr_head .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    MOD             shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LE              shift and go to state 63
    GE              shift and go to state 64

    bin_op                         shift and go to state 53

state 30

    (80) expr_head -> atom .

    PLUS            reduce using rule 80 (expr_head -> atom .)
    MINUS           reduce using rule 80 (expr_head -> atom .)
    TIMES           reduce using rule 80 (expr_head -> atom .)
    DIVIDE          reduce using rule 80 (expr_head -> atom .)
    MOD             reduce using rule 80 (expr_head -> atom .)
    EQ              reduce using rule 80 (expr_head -> atom .)
    NEQ             reduce using rule 80 (expr_head -> atom .)
    LT              reduce using rule 80 (expr_head -> atom .)
    GT              reduce using rule 80 (expr_head -> atom .)
    LE              reduce using rule 80 (expr_head -> atom .)
    GE              reduce using rule 80 (expr_head -> atom .)
    AGENT           reduce using rule 80 (expr_head -> atom .)
    CONNECT         reduce using rule 80 (expr_head -> atom .)
    DEF             reduce using rule 80 (expr_head -> atom .)
    FOR             reduce using rule 80 (expr_head -> atom .)
    IF              reduce using rule 80 (expr_head -> atom .)
    WHILE           reduce using rule 80 (expr_head -> atom .)
    IDENTIFIER      reduce using rule 80 (expr_head -> atom .)
    BREAK           reduce using rule 80 (expr_head -> atom .)
    CONTINUE        reduce using rule 80 (expr_head -> atom .)
    RETURN          reduce using rule 80 (expr_head -> atom .)
    STRING          reduce using rule 80 (expr_head -> atom .)
    NUMBER          reduce using rule 80 (expr_head -> atom .)
    LBRACE          reduce using rule 80 (expr_head -> atom .)
    $end            reduce using rule 80 (expr_head -> atom .)
    COLON           reduce using rule 80 (expr_head -> atom .)
    INPUT           reduce using rule 80 (expr_head -> atom .)
    OUTPUT          reduce using rule 80 (expr_head -> atom .)
    MEMORY          reduce using rule 80 (expr_head -> atom .)
    MODEL           reduce using rule 80 (expr_head -> atom .)
    CHAT            reduce using rule 80 (expr_head -> atom .)
    DEDENT          reduce using rule 80 (expr_head -> atom .)
    COMMA           reduce using rule 80 (expr_head -> atom .)
    RBRACE          reduce using rule 80 (expr_head -> atom .)
    RPAREN          reduce using rule 80 (expr_head -> atom .)


state 31

    (81) expr_head -> list_expr .

    PLUS            reduce using rule 81 (expr_head -> list_expr .)
    MINUS           reduce using rule 81 (expr_head -> list_expr .)
    TIMES           reduce using rule 81 (expr_head -> list_expr .)
    DIVIDE          reduce using rule 81 (expr_head -> list_expr .)
    MOD             reduce using rule 81 (expr_head -> list_expr .)
    EQ              reduce using rule 81 (expr_head -> list_expr .)
    NEQ             reduce using rule 81 (expr_head -> list_expr .)
    LT              reduce using rule 81 (expr_head -> list_expr .)
    GT              reduce using rule 81 (expr_head -> list_expr .)
    LE              reduce using rule 81 (expr_head -> list_expr .)
    GE              reduce using rule 81 (expr_head -> list_expr .)
    AGENT           reduce using rule 81 (expr_head -> list_expr .)
    CONNECT         reduce using rule 81 (expr_head -> list_expr .)
    DEF             reduce using rule 81 (expr_head -> list_expr .)
    FOR             reduce using rule 81 (expr_head -> list_expr .)
    IF              reduce using rule 81 (expr_head -> list_expr .)
    WHILE           reduce using rule 81 (expr_head -> list_expr .)
    IDENTIFIER      reduce using rule 81 (expr_head -> list_expr .)
    BREAK           reduce using rule 81 (expr_head -> list_expr .)
    CONTINUE        reduce using rule 81 (expr_head -> list_expr .)
    RETURN          reduce using rule 81 (expr_head -> list_expr .)
    STRING          reduce using rule 81 (expr_head -> list_expr .)
    NUMBER          reduce using rule 81 (expr_head -> list_expr .)
    LBRACE          reduce using rule 81 (expr_head -> list_expr .)
    $end            reduce using rule 81 (expr_head -> list_expr .)
    COLON           reduce using rule 81 (expr_head -> list_expr .)
    INPUT           reduce using rule 81 (expr_head -> list_expr .)
    OUTPUT          reduce using rule 81 (expr_head -> list_expr .)
    MEMORY          reduce using rule 81 (expr_head -> list_expr .)
    MODEL           reduce using rule 81 (expr_head -> list_expr .)
    CHAT            reduce using rule 81 (expr_head -> list_expr .)
    DEDENT          reduce using rule 81 (expr_head -> list_expr .)
    COMMA           reduce using rule 81 (expr_head -> list_expr .)
    RBRACE          reduce using rule 81 (expr_head -> list_expr .)
    RPAREN          reduce using rule 81 (expr_head -> list_expr .)


state 32

    (82) expr_head -> record_expr .

    PLUS            reduce using rule 82 (expr_head -> record_expr .)
    MINUS           reduce using rule 82 (expr_head -> record_expr .)
    TIMES           reduce using rule 82 (expr_head -> record_expr .)
    DIVIDE          reduce using rule 82 (expr_head -> record_expr .)
    MOD             reduce using rule 82 (expr_head -> record_expr .)
    EQ              reduce using rule 82 (expr_head -> record_expr .)
    NEQ             reduce using rule 82 (expr_head -> record_expr .)
    LT              reduce using rule 82 (expr_head -> record_expr .)
    GT              reduce using rule 82 (expr_head -> record_expr .)
    LE              reduce using rule 82 (expr_head -> record_expr .)
    GE              reduce using rule 82 (expr_head -> record_expr .)
    AGENT           reduce using rule 82 (expr_head -> record_expr .)
    CONNECT         reduce using rule 82 (expr_head -> record_expr .)
    DEF             reduce using rule 82 (expr_head -> record_expr .)
    FOR             reduce using rule 82 (expr_head -> record_expr .)
    IF              reduce using rule 82 (expr_head -> record_expr .)
    WHILE           reduce using rule 82 (expr_head -> record_expr .)
    IDENTIFIER      reduce using rule 82 (expr_head -> record_expr .)
    BREAK           reduce using rule 82 (expr_head -> record_expr .)
    CONTINUE        reduce using rule 82 (expr_head -> record_expr .)
    RETURN          reduce using rule 82 (expr_head -> record_expr .)
    STRING          reduce using rule 82 (expr_head -> record_expr .)
    NUMBER          reduce using rule 82 (expr_head -> record_expr .)
    LBRACE          reduce using rule 82 (expr_head -> record_expr .)
    $end            reduce using rule 82 (expr_head -> record_expr .)
    COLON           reduce using rule 82 (expr_head -> record_expr .)
    INPUT           reduce using rule 82 (expr_head -> record_expr .)
    OUTPUT          reduce using rule 82 (expr_head -> record_expr .)
    MEMORY          reduce using rule 82 (expr_head -> record_expr .)
    MODEL           reduce using rule 82 (expr_head -> record_expr .)
    CHAT            reduce using rule 82 (expr_head -> record_expr .)
    DEDENT          reduce using rule 82 (expr_head -> record_expr .)
    COMMA           reduce using rule 82 (expr_head -> record_expr .)
    RBRACE          reduce using rule 82 (expr_head -> record_expr .)
    RPAREN          reduce using rule 82 (expr_head -> record_expr .)


state 33

    (83) expr_head -> field_access .

    PLUS            reduce using rule 83 (expr_head -> field_access .)
    MINUS           reduce using rule 83 (expr_head -> field_access .)
    TIMES           reduce using rule 83 (expr_head -> field_access .)
    DIVIDE          reduce using rule 83 (expr_head -> field_access .)
    MOD             reduce using rule 83 (expr_head -> field_access .)
    EQ              reduce using rule 83 (expr_head -> field_access .)
    NEQ             reduce using rule 83 (expr_head -> field_access .)
    LT              reduce using rule 83 (expr_head -> field_access .)
    GT              reduce using rule 83 (expr_head -> field_access .)
    LE              reduce using rule 83 (expr_head -> field_access .)
    GE              reduce using rule 83 (expr_head -> field_access .)
    AGENT           reduce using rule 83 (expr_head -> field_access .)
    CONNECT         reduce using rule 83 (expr_head -> field_access .)
    DEF             reduce using rule 83 (expr_head -> field_access .)
    FOR             reduce using rule 83 (expr_head -> field_access .)
    IF              reduce using rule 83 (expr_head -> field_access .)
    WHILE           reduce using rule 83 (expr_head -> field_access .)
    IDENTIFIER      reduce using rule 83 (expr_head -> field_access .)
    BREAK           reduce using rule 83 (expr_head -> field_access .)
    CONTINUE        reduce using rule 83 (expr_head -> field_access .)
    RETURN          reduce using rule 83 (expr_head -> field_access .)
    STRING          reduce using rule 83 (expr_head -> field_access .)
    NUMBER          reduce using rule 83 (expr_head -> field_access .)
    LBRACE          reduce using rule 83 (expr_head -> field_access .)
    $end            reduce using rule 83 (expr_head -> field_access .)
    COLON           reduce using rule 83 (expr_head -> field_access .)
    INPUT           reduce using rule 83 (expr_head -> field_access .)
    OUTPUT          reduce using rule 83 (expr_head -> field_access .)
    MEMORY          reduce using rule 83 (expr_head -> field_access .)
    MODEL           reduce using rule 83 (expr_head -> field_access .)
    CHAT            reduce using rule 83 (expr_head -> field_access .)
    DEDENT          reduce using rule 83 (expr_head -> field_access .)
    COMMA           reduce using rule 83 (expr_head -> field_access .)
    RBRACE          reduce using rule 83 (expr_head -> field_access .)
    RPAREN          reduce using rule 83 (expr_head -> field_access .)


state 34

    (84) expr_head -> func_call .

    PLUS            reduce using rule 84 (expr_head -> func_call .)
    MINUS           reduce using rule 84 (expr_head -> func_call .)
    TIMES           reduce using rule 84 (expr_head -> func_call .)
    DIVIDE          reduce using rule 84 (expr_head -> func_call .)
    MOD             reduce using rule 84 (expr_head -> func_call .)
    EQ              reduce using rule 84 (expr_head -> func_call .)
    NEQ             reduce using rule 84 (expr_head -> func_call .)
    LT              reduce using rule 84 (expr_head -> func_call .)
    GT              reduce using rule 84 (expr_head -> func_call .)
    LE              reduce using rule 84 (expr_head -> func_call .)
    GE              reduce using rule 84 (expr_head -> func_call .)
    AGENT           reduce using rule 84 (expr_head -> func_call .)
    CONNECT         reduce using rule 84 (expr_head -> func_call .)
    DEF             reduce using rule 84 (expr_head -> func_call .)
    FOR             reduce using rule 84 (expr_head -> func_call .)
    IF              reduce using rule 84 (expr_head -> func_call .)
    WHILE           reduce using rule 84 (expr_head -> func_call .)
    IDENTIFIER      reduce using rule 84 (expr_head -> func_call .)
    BREAK           reduce using rule 84 (expr_head -> func_call .)
    CONTINUE        reduce using rule 84 (expr_head -> func_call .)
    RETURN          reduce using rule 84 (expr_head -> func_call .)
    STRING          reduce using rule 84 (expr_head -> func_call .)
    NUMBER          reduce using rule 84 (expr_head -> func_call .)
    LBRACE          reduce using rule 84 (expr_head -> func_call .)
    $end            reduce using rule 84 (expr_head -> func_call .)
    COLON           reduce using rule 84 (expr_head -> func_call .)
    INPUT           reduce using rule 84 (expr_head -> func_call .)
    OUTPUT          reduce using rule 84 (expr_head -> func_call .)
    MEMORY          reduce using rule 84 (expr_head -> func_call .)
    MODEL           reduce using rule 84 (expr_head -> func_call .)
    CHAT            reduce using rule 84 (expr_head -> func_call .)
    DEDENT          reduce using rule 84 (expr_head -> func_call .)
    COMMA           reduce using rule 84 (expr_head -> func_call .)
    RBRACE          reduce using rule 84 (expr_head -> func_call .)
    RPAREN          reduce using rule 84 (expr_head -> func_call .)


state 35

    (87) atom -> STRING .

    PLUS            reduce using rule 87 (atom -> STRING .)
    MINUS           reduce using rule 87 (atom -> STRING .)
    TIMES           reduce using rule 87 (atom -> STRING .)
    DIVIDE          reduce using rule 87 (atom -> STRING .)
    MOD             reduce using rule 87 (atom -> STRING .)
    EQ              reduce using rule 87 (atom -> STRING .)
    NEQ             reduce using rule 87 (atom -> STRING .)
    LT              reduce using rule 87 (atom -> STRING .)
    GT              reduce using rule 87 (atom -> STRING .)
    LE              reduce using rule 87 (atom -> STRING .)
    GE              reduce using rule 87 (atom -> STRING .)
    AGENT           reduce using rule 87 (atom -> STRING .)
    CONNECT         reduce using rule 87 (atom -> STRING .)
    DEF             reduce using rule 87 (atom -> STRING .)
    FOR             reduce using rule 87 (atom -> STRING .)
    IF              reduce using rule 87 (atom -> STRING .)
    WHILE           reduce using rule 87 (atom -> STRING .)
    IDENTIFIER      reduce using rule 87 (atom -> STRING .)
    BREAK           reduce using rule 87 (atom -> STRING .)
    CONTINUE        reduce using rule 87 (atom -> STRING .)
    RETURN          reduce using rule 87 (atom -> STRING .)
    STRING          reduce using rule 87 (atom -> STRING .)
    NUMBER          reduce using rule 87 (atom -> STRING .)
    LBRACE          reduce using rule 87 (atom -> STRING .)
    $end            reduce using rule 87 (atom -> STRING .)
    COLON           reduce using rule 87 (atom -> STRING .)
    INPUT           reduce using rule 87 (atom -> STRING .)
    OUTPUT          reduce using rule 87 (atom -> STRING .)
    MEMORY          reduce using rule 87 (atom -> STRING .)
    MODEL           reduce using rule 87 (atom -> STRING .)
    CHAT            reduce using rule 87 (atom -> STRING .)
    DEDENT          reduce using rule 87 (atom -> STRING .)
    COMMA           reduce using rule 87 (atom -> STRING .)
    RBRACE          reduce using rule 87 (atom -> STRING .)
    RPAREN          reduce using rule 87 (atom -> STRING .)


state 36

    (88) atom -> NUMBER .

    PLUS            reduce using rule 88 (atom -> NUMBER .)
    MINUS           reduce using rule 88 (atom -> NUMBER .)
    TIMES           reduce using rule 88 (atom -> NUMBER .)
    DIVIDE          reduce using rule 88 (atom -> NUMBER .)
    MOD             reduce using rule 88 (atom -> NUMBER .)
    EQ              reduce using rule 88 (atom -> NUMBER .)
    NEQ             reduce using rule 88 (atom -> NUMBER .)
    LT              reduce using rule 88 (atom -> NUMBER .)
    GT              reduce using rule 88 (atom -> NUMBER .)
    LE              reduce using rule 88 (atom -> NUMBER .)
    GE              reduce using rule 88 (atom -> NUMBER .)
    AGENT           reduce using rule 88 (atom -> NUMBER .)
    CONNECT         reduce using rule 88 (atom -> NUMBER .)
    DEF             reduce using rule 88 (atom -> NUMBER .)
    FOR             reduce using rule 88 (atom -> NUMBER .)
    IF              reduce using rule 88 (atom -> NUMBER .)
    WHILE           reduce using rule 88 (atom -> NUMBER .)
    IDENTIFIER      reduce using rule 88 (atom -> NUMBER .)
    BREAK           reduce using rule 88 (atom -> NUMBER .)
    CONTINUE        reduce using rule 88 (atom -> NUMBER .)
    RETURN          reduce using rule 88 (atom -> NUMBER .)
    STRING          reduce using rule 88 (atom -> NUMBER .)
    NUMBER          reduce using rule 88 (atom -> NUMBER .)
    LBRACE          reduce using rule 88 (atom -> NUMBER .)
    $end            reduce using rule 88 (atom -> NUMBER .)
    COLON           reduce using rule 88 (atom -> NUMBER .)
    INPUT           reduce using rule 88 (atom -> NUMBER .)
    OUTPUT          reduce using rule 88 (atom -> NUMBER .)
    MEMORY          reduce using rule 88 (atom -> NUMBER .)
    MODEL           reduce using rule 88 (atom -> NUMBER .)
    CHAT            reduce using rule 88 (atom -> NUMBER .)
    DEDENT          reduce using rule 88 (atom -> NUMBER .)
    COMMA           reduce using rule 88 (atom -> NUMBER .)
    RBRACE          reduce using rule 88 (atom -> NUMBER .)
    RPAREN          reduce using rule 88 (atom -> NUMBER .)


state 37

    (89) list_expr -> LBRACE . list_elements RBRACE
    (94) record_expr -> LBRACE . record_elements RBRACE
    (90) list_elements -> . expr list_elements_tail
    (91) list_elements -> . empty
    (95) record_elements -> . field_assign record_elements_tail
    (96) record_elements -> . empty
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (117) empty -> .
    (99) field_assign -> . IDENTIFIER EQUALS expr
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    RBRACE          reduce using rule 117 (empty -> .)
    IDENTIFIER      shift and go to state 70
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    list_elements                  shift and go to state 65
    record_elements                shift and go to state 66
    expr                           shift and go to state 67
    empty                          shift and go to state 68
    field_assign                   shift and go to state 69
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 38

    (1) program -> global_block program_body .

    $end            reduce using rule 1 (program -> global_block program_body .)


state 39

    (9) global_block -> GLOBAL COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 71


state 40

    (3) program_body -> program_body_item program_body .

    $end            reduce using rule 3 (program_body -> program_body_item program_body .)


state 41

    (28) agent_def -> AGENT IDENTIFIER . COLON INDENT agent_body DEDENT

    COLON           shift and go to state 72


state 42

    (67) assign_stmt -> IDENTIFIER COLON . type EQUALS expr
    (16) type -> . base_type
    (17) type -> . list_type
    (18) type -> . record_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) list_type -> . TYPE_LIST LBRACE type RBRACE
    (24) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 77
    TYPE_INT        shift and go to state 78
    TYPE_FLOAT      shift and go to state 79
    TYPE_BOOL       shift and go to state 80
    TYPE_LIST       shift and go to state 81
    TYPE_RECORD     shift and go to state 82

    type                           shift and go to state 73
    base_type                      shift and go to state 74
    list_type                      shift and go to state 75
    record_type                    shift and go to state 76

state 43

    (68) assign_stmt -> IDENTIFIER EQUALS . expr
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 83
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 44

    (100) field_access -> IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 84


state 45

    (101) func_call -> IDENTIFIER LPAREN . arg_list RPAREN
    (102) arg_list -> . expr arg_list_tail
    (103) arg_list -> . empty
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (117) empty -> .
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    RPAREN          reduce using rule 117 (empty -> .)
    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    arg_list                       shift and go to state 85
    expr                           shift and go to state 86
    empty                          shift and go to state 87
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 46

    (42) connect_block -> CONNECT COLON . INDENT connection_list DEDENT

    INDENT          shift and go to state 88


state 47

    (49) func_def -> DEF IDENTIFIER . LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> DEF IDENTIFIER . LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT

    LPAREN          shift and go to state 89


state 48

    (72) for_stmt -> FOR IDENTIFIER . IN expr COLON stmt_block

    IN              shift and go to state 90


state 49

    (75) if_stmt -> IF expr . COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> IF expr . COLON stmt_block

    COLON           shift and go to state 91


state 50

    (86) atom -> IDENTIFIER .
    (100) field_access -> IDENTIFIER . DOT IDENTIFIER
    (101) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    PLUS            reduce using rule 86 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 86 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 86 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 86 (atom -> IDENTIFIER .)
    MOD             reduce using rule 86 (atom -> IDENTIFIER .)
    EQ              reduce using rule 86 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 86 (atom -> IDENTIFIER .)
    LT              reduce using rule 86 (atom -> IDENTIFIER .)
    GT              reduce using rule 86 (atom -> IDENTIFIER .)
    LE              reduce using rule 86 (atom -> IDENTIFIER .)
    GE              reduce using rule 86 (atom -> IDENTIFIER .)
    COLON           reduce using rule 86 (atom -> IDENTIFIER .)
    AGENT           reduce using rule 86 (atom -> IDENTIFIER .)
    CONNECT         reduce using rule 86 (atom -> IDENTIFIER .)
    DEF             reduce using rule 86 (atom -> IDENTIFIER .)
    FOR             reduce using rule 86 (atom -> IDENTIFIER .)
    IF              reduce using rule 86 (atom -> IDENTIFIER .)
    WHILE           reduce using rule 86 (atom -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 86 (atom -> IDENTIFIER .)
    BREAK           reduce using rule 86 (atom -> IDENTIFIER .)
    CONTINUE        reduce using rule 86 (atom -> IDENTIFIER .)
    RETURN          reduce using rule 86 (atom -> IDENTIFIER .)
    STRING          reduce using rule 86 (atom -> IDENTIFIER .)
    NUMBER          reduce using rule 86 (atom -> IDENTIFIER .)
    LBRACE          reduce using rule 86 (atom -> IDENTIFIER .)
    $end            reduce using rule 86 (atom -> IDENTIFIER .)
    INPUT           reduce using rule 86 (atom -> IDENTIFIER .)
    OUTPUT          reduce using rule 86 (atom -> IDENTIFIER .)
    MEMORY          reduce using rule 86 (atom -> IDENTIFIER .)
    MODEL           reduce using rule 86 (atom -> IDENTIFIER .)
    CHAT            reduce using rule 86 (atom -> IDENTIFIER .)
    DEDENT          reduce using rule 86 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 86 (atom -> IDENTIFIER .)
    RPAREN          reduce using rule 86 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 86 (atom -> IDENTIFIER .)
    DOT             shift and go to state 44
    LPAREN          shift and go to state 45


state 51

    (77) while_stmt -> WHILE expr . COLON stmt_block

    COLON           shift and go to state 92


state 52

    (70) return_stmt -> RETURN expr .

    AGENT           reduce using rule 70 (return_stmt -> RETURN expr .)
    CONNECT         reduce using rule 70 (return_stmt -> RETURN expr .)
    DEF             reduce using rule 70 (return_stmt -> RETURN expr .)
    FOR             reduce using rule 70 (return_stmt -> RETURN expr .)
    IF              reduce using rule 70 (return_stmt -> RETURN expr .)
    WHILE           reduce using rule 70 (return_stmt -> RETURN expr .)
    IDENTIFIER      reduce using rule 70 (return_stmt -> RETURN expr .)
    BREAK           reduce using rule 70 (return_stmt -> RETURN expr .)
    CONTINUE        reduce using rule 70 (return_stmt -> RETURN expr .)
    RETURN          reduce using rule 70 (return_stmt -> RETURN expr .)
    STRING          reduce using rule 70 (return_stmt -> RETURN expr .)
    NUMBER          reduce using rule 70 (return_stmt -> RETURN expr .)
    LBRACE          reduce using rule 70 (return_stmt -> RETURN expr .)
    $end            reduce using rule 70 (return_stmt -> RETURN expr .)
    INPUT           reduce using rule 70 (return_stmt -> RETURN expr .)
    OUTPUT          reduce using rule 70 (return_stmt -> RETURN expr .)
    MEMORY          reduce using rule 70 (return_stmt -> RETURN expr .)
    MODEL           reduce using rule 70 (return_stmt -> RETURN expr .)
    CHAT            reduce using rule 70 (return_stmt -> RETURN expr .)
    DEDENT          reduce using rule 70 (return_stmt -> RETURN expr .)


state 53

    (78) expr -> expr_head bin_op . expr_tail
    (85) expr_tail -> . expr
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr_head                      shift and go to state 29
    expr_tail                      shift and go to state 93
    expr                           shift and go to state 94
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 54

    (106) bin_op -> PLUS .

    IDENTIFIER      reduce using rule 106 (bin_op -> PLUS .)
    STRING          reduce using rule 106 (bin_op -> PLUS .)
    NUMBER          reduce using rule 106 (bin_op -> PLUS .)
    LBRACE          reduce using rule 106 (bin_op -> PLUS .)


state 55

    (107) bin_op -> MINUS .

    IDENTIFIER      reduce using rule 107 (bin_op -> MINUS .)
    STRING          reduce using rule 107 (bin_op -> MINUS .)
    NUMBER          reduce using rule 107 (bin_op -> MINUS .)
    LBRACE          reduce using rule 107 (bin_op -> MINUS .)


state 56

    (108) bin_op -> TIMES .

    IDENTIFIER      reduce using rule 108 (bin_op -> TIMES .)
    STRING          reduce using rule 108 (bin_op -> TIMES .)
    NUMBER          reduce using rule 108 (bin_op -> TIMES .)
    LBRACE          reduce using rule 108 (bin_op -> TIMES .)


state 57

    (109) bin_op -> DIVIDE .

    IDENTIFIER      reduce using rule 109 (bin_op -> DIVIDE .)
    STRING          reduce using rule 109 (bin_op -> DIVIDE .)
    NUMBER          reduce using rule 109 (bin_op -> DIVIDE .)
    LBRACE          reduce using rule 109 (bin_op -> DIVIDE .)


state 58

    (110) bin_op -> MOD .

    IDENTIFIER      reduce using rule 110 (bin_op -> MOD .)
    STRING          reduce using rule 110 (bin_op -> MOD .)
    NUMBER          reduce using rule 110 (bin_op -> MOD .)
    LBRACE          reduce using rule 110 (bin_op -> MOD .)


state 59

    (111) bin_op -> EQ .

    IDENTIFIER      reduce using rule 111 (bin_op -> EQ .)
    STRING          reduce using rule 111 (bin_op -> EQ .)
    NUMBER          reduce using rule 111 (bin_op -> EQ .)
    LBRACE          reduce using rule 111 (bin_op -> EQ .)


state 60

    (112) bin_op -> NEQ .

    IDENTIFIER      reduce using rule 112 (bin_op -> NEQ .)
    STRING          reduce using rule 112 (bin_op -> NEQ .)
    NUMBER          reduce using rule 112 (bin_op -> NEQ .)
    LBRACE          reduce using rule 112 (bin_op -> NEQ .)


state 61

    (113) bin_op -> LT .

    IDENTIFIER      reduce using rule 113 (bin_op -> LT .)
    STRING          reduce using rule 113 (bin_op -> LT .)
    NUMBER          reduce using rule 113 (bin_op -> LT .)
    LBRACE          reduce using rule 113 (bin_op -> LT .)


state 62

    (114) bin_op -> GT .

    IDENTIFIER      reduce using rule 114 (bin_op -> GT .)
    STRING          reduce using rule 114 (bin_op -> GT .)
    NUMBER          reduce using rule 114 (bin_op -> GT .)
    LBRACE          reduce using rule 114 (bin_op -> GT .)


state 63

    (115) bin_op -> LE .

    IDENTIFIER      reduce using rule 115 (bin_op -> LE .)
    STRING          reduce using rule 115 (bin_op -> LE .)
    NUMBER          reduce using rule 115 (bin_op -> LE .)
    LBRACE          reduce using rule 115 (bin_op -> LE .)


state 64

    (116) bin_op -> GE .

    IDENTIFIER      reduce using rule 116 (bin_op -> GE .)
    STRING          reduce using rule 116 (bin_op -> GE .)
    NUMBER          reduce using rule 116 (bin_op -> GE .)
    LBRACE          reduce using rule 116 (bin_op -> GE .)


state 65

    (89) list_expr -> LBRACE list_elements . RBRACE

    RBRACE          shift and go to state 95


state 66

    (94) record_expr -> LBRACE record_elements . RBRACE

    RBRACE          shift and go to state 96


state 67

    (90) list_elements -> expr . list_elements_tail
    (92) list_elements_tail -> . COMMA expr list_elements_tail
    (93) list_elements_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 98
    RBRACE          reduce using rule 117 (empty -> .)

    list_elements_tail             shift and go to state 97
    empty                          shift and go to state 99

state 68

    (91) list_elements -> empty .
    (96) record_elements -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 91 (list_elements -> empty .)
    RBRACE          reduce using rule 91 (list_elements -> empty .)

  ! RBRACE          [ reduce using rule 96 (record_elements -> empty .) ]


state 69

    (95) record_elements -> field_assign . record_elements_tail
    (97) record_elements_tail -> . COMMA field_assign record_elements_tail
    (98) record_elements_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 101
    RBRACE          reduce using rule 117 (empty -> .)

    record_elements_tail           shift and go to state 100
    empty                          shift and go to state 102

state 70

    (99) field_assign -> IDENTIFIER . EQUALS expr
    (86) atom -> IDENTIFIER .
    (100) field_access -> IDENTIFIER . DOT IDENTIFIER
    (101) func_call -> IDENTIFIER . LPAREN arg_list RPAREN

    EQUALS          shift and go to state 103
    PLUS            reduce using rule 86 (atom -> IDENTIFIER .)
    MINUS           reduce using rule 86 (atom -> IDENTIFIER .)
    TIMES           reduce using rule 86 (atom -> IDENTIFIER .)
    DIVIDE          reduce using rule 86 (atom -> IDENTIFIER .)
    MOD             reduce using rule 86 (atom -> IDENTIFIER .)
    EQ              reduce using rule 86 (atom -> IDENTIFIER .)
    NEQ             reduce using rule 86 (atom -> IDENTIFIER .)
    LT              reduce using rule 86 (atom -> IDENTIFIER .)
    GT              reduce using rule 86 (atom -> IDENTIFIER .)
    LE              reduce using rule 86 (atom -> IDENTIFIER .)
    GE              reduce using rule 86 (atom -> IDENTIFIER .)
    COMMA           reduce using rule 86 (atom -> IDENTIFIER .)
    RBRACE          reduce using rule 86 (atom -> IDENTIFIER .)
    DOT             shift and go to state 44
    LPAREN          shift and go to state 45


state 71

    (9) global_block -> GLOBAL COLON INDENT . var_decl_list DEDENT
    (10) var_decl_list -> . var_decl var_decl_list
    (11) var_decl_list -> . var_decl
    (12) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (13) var_decl -> . IDENTIFIER COLON type
    (14) var_decl -> . IDENTIFIER EQUALS expr
    (15) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 106

    var_decl_list                  shift and go to state 104
    var_decl                       shift and go to state 105

state 72

    (28) agent_def -> AGENT IDENTIFIER COLON . INDENT agent_body DEDENT

    INDENT          shift and go to state 107


state 73

    (67) assign_stmt -> IDENTIFIER COLON type . EQUALS expr

    EQUALS          shift and go to state 108


state 74

    (16) type -> base_type .

    EQUALS          reduce using rule 16 (type -> base_type .)
    RBRACE          reduce using rule 16 (type -> base_type .)
    IDENTIFIER      reduce using rule 16 (type -> base_type .)
    DEDENT          reduce using rule 16 (type -> base_type .)
    COMMA           reduce using rule 16 (type -> base_type .)
    RPAREN          reduce using rule 16 (type -> base_type .)
    COLON           reduce using rule 16 (type -> base_type .)


state 75

    (17) type -> list_type .

    EQUALS          reduce using rule 17 (type -> list_type .)
    RBRACE          reduce using rule 17 (type -> list_type .)
    IDENTIFIER      reduce using rule 17 (type -> list_type .)
    DEDENT          reduce using rule 17 (type -> list_type .)
    COMMA           reduce using rule 17 (type -> list_type .)
    RPAREN          reduce using rule 17 (type -> list_type .)
    COLON           reduce using rule 17 (type -> list_type .)


state 76

    (18) type -> record_type .

    EQUALS          reduce using rule 18 (type -> record_type .)
    RBRACE          reduce using rule 18 (type -> record_type .)
    IDENTIFIER      reduce using rule 18 (type -> record_type .)
    DEDENT          reduce using rule 18 (type -> record_type .)
    COMMA           reduce using rule 18 (type -> record_type .)
    RPAREN          reduce using rule 18 (type -> record_type .)
    COLON           reduce using rule 18 (type -> record_type .)


state 77

    (19) base_type -> TYPE_STR .

    EQUALS          reduce using rule 19 (base_type -> TYPE_STR .)
    RBRACE          reduce using rule 19 (base_type -> TYPE_STR .)
    IDENTIFIER      reduce using rule 19 (base_type -> TYPE_STR .)
    DEDENT          reduce using rule 19 (base_type -> TYPE_STR .)
    COMMA           reduce using rule 19 (base_type -> TYPE_STR .)
    RPAREN          reduce using rule 19 (base_type -> TYPE_STR .)
    COLON           reduce using rule 19 (base_type -> TYPE_STR .)


state 78

    (20) base_type -> TYPE_INT .

    EQUALS          reduce using rule 20 (base_type -> TYPE_INT .)
    RBRACE          reduce using rule 20 (base_type -> TYPE_INT .)
    IDENTIFIER      reduce using rule 20 (base_type -> TYPE_INT .)
    DEDENT          reduce using rule 20 (base_type -> TYPE_INT .)
    COMMA           reduce using rule 20 (base_type -> TYPE_INT .)
    RPAREN          reduce using rule 20 (base_type -> TYPE_INT .)
    COLON           reduce using rule 20 (base_type -> TYPE_INT .)


state 79

    (21) base_type -> TYPE_FLOAT .

    EQUALS          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RBRACE          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    IDENTIFIER      reduce using rule 21 (base_type -> TYPE_FLOAT .)
    DEDENT          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    COMMA           reduce using rule 21 (base_type -> TYPE_FLOAT .)
    RPAREN          reduce using rule 21 (base_type -> TYPE_FLOAT .)
    COLON           reduce using rule 21 (base_type -> TYPE_FLOAT .)


state 80

    (22) base_type -> TYPE_BOOL .

    EQUALS          reduce using rule 22 (base_type -> TYPE_BOOL .)
    RBRACE          reduce using rule 22 (base_type -> TYPE_BOOL .)
    IDENTIFIER      reduce using rule 22 (base_type -> TYPE_BOOL .)
    DEDENT          reduce using rule 22 (base_type -> TYPE_BOOL .)
    COMMA           reduce using rule 22 (base_type -> TYPE_BOOL .)
    RPAREN          reduce using rule 22 (base_type -> TYPE_BOOL .)
    COLON           reduce using rule 22 (base_type -> TYPE_BOOL .)


state 81

    (23) list_type -> TYPE_LIST . LBRACE type RBRACE

    LBRACE          shift and go to state 109


state 82

    (24) record_type -> TYPE_RECORD . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 110


state 83

    (68) assign_stmt -> IDENTIFIER EQUALS expr .

    AGENT           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CONNECT         reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    DEF             reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    FOR             reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    IF              reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    WHILE           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    IDENTIFIER      reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    BREAK           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CONTINUE        reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    RETURN          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    STRING          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    NUMBER          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    LBRACE          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    $end            reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    INPUT           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    OUTPUT          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    MEMORY          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    MODEL           reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    CHAT            reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)
    DEDENT          reduce using rule 68 (assign_stmt -> IDENTIFIER EQUALS expr .)


state 84

    (100) field_access -> IDENTIFIER DOT IDENTIFIER .

    PLUS            reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MINUS           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    TIMES           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DIVIDE          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MOD             reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    EQ              reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    NEQ             reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LT              reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GT              reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LE              reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    GE              reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    AGENT           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CONNECT         reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DEF             reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    FOR             reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    IF              reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    WHILE           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    BREAK           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CONTINUE        reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RETURN          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    STRING          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    NUMBER          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    LBRACE          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    $end            reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    COLON           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    INPUT           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    OUTPUT          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MEMORY          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    MODEL           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    CHAT            reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    DEDENT          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    COMMA           reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RBRACE          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)
    RPAREN          reduce using rule 100 (field_access -> IDENTIFIER DOT IDENTIFIER .)


state 85

    (101) func_call -> IDENTIFIER LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 111


state 86

    (102) arg_list -> expr . arg_list_tail
    (104) arg_list_tail -> . COMMA expr arg_list_tail
    (105) arg_list_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 113
    RPAREN          reduce using rule 117 (empty -> .)

    arg_list_tail                  shift and go to state 112
    empty                          shift and go to state 114

state 87

    (103) arg_list -> empty .

    RPAREN          reduce using rule 103 (arg_list -> empty .)


state 88

    (42) connect_block -> CONNECT COLON INDENT . connection_list DEDENT
    (43) connection_list -> . connection connection_list
    (44) connection_list -> . connection
    (45) connection -> . IDENTIFIER COLON type agent_ref ARROW agent_ref

    IDENTIFIER      shift and go to state 117

    connection_list                shift and go to state 115
    connection                     shift and go to state 116

state 89

    (49) func_def -> DEF IDENTIFIER LPAREN . param_list RPAREN COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> DEF IDENTIFIER LPAREN . param_list RPAREN COLON INDENT stmt_block DEDENT
    (51) param_list -> . param_decl param_list_tail
    (52) param_list -> . empty
    (55) param_decl -> . var_decl
    (117) empty -> .
    (12) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (13) var_decl -> . IDENTIFIER COLON type
    (14) var_decl -> . IDENTIFIER EQUALS expr
    (15) var_decl -> . IDENTIFIER

    RPAREN          reduce using rule 117 (empty -> .)
    IDENTIFIER      shift and go to state 106

    param_list                     shift and go to state 118
    param_decl                     shift and go to state 119
    empty                          shift and go to state 120
    var_decl                       shift and go to state 121

state 90

    (72) for_stmt -> FOR IDENTIFIER IN . expr COLON stmt_block
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 122
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 91

    (75) if_stmt -> IF expr COLON . stmt_block ELSE COLON stmt_block
    (76) if_stmt -> IF expr COLON . stmt_block
    (56) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 124

    stmt_block                     shift and go to state 123

state 92

    (77) while_stmt -> WHILE expr COLON . stmt_block
    (56) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 124

    stmt_block                     shift and go to state 125

state 93

    (78) expr -> expr_head bin_op expr_tail .

    AGENT           reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    CONNECT         reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    DEF             reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    FOR             reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    IF              reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    WHILE           reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    IDENTIFIER      reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    BREAK           reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    CONTINUE        reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    RETURN          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    STRING          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    NUMBER          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    LBRACE          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    $end            reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    COLON           reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    INPUT           reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    OUTPUT          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    MEMORY          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    MODEL           reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    CHAT            reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    DEDENT          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    COMMA           reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    RBRACE          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)
    RPAREN          reduce using rule 78 (expr -> expr_head bin_op expr_tail .)


state 94

    (85) expr_tail -> expr .

    AGENT           reduce using rule 85 (expr_tail -> expr .)
    CONNECT         reduce using rule 85 (expr_tail -> expr .)
    DEF             reduce using rule 85 (expr_tail -> expr .)
    FOR             reduce using rule 85 (expr_tail -> expr .)
    IF              reduce using rule 85 (expr_tail -> expr .)
    WHILE           reduce using rule 85 (expr_tail -> expr .)
    IDENTIFIER      reduce using rule 85 (expr_tail -> expr .)
    BREAK           reduce using rule 85 (expr_tail -> expr .)
    CONTINUE        reduce using rule 85 (expr_tail -> expr .)
    RETURN          reduce using rule 85 (expr_tail -> expr .)
    STRING          reduce using rule 85 (expr_tail -> expr .)
    NUMBER          reduce using rule 85 (expr_tail -> expr .)
    LBRACE          reduce using rule 85 (expr_tail -> expr .)
    $end            reduce using rule 85 (expr_tail -> expr .)
    COLON           reduce using rule 85 (expr_tail -> expr .)
    INPUT           reduce using rule 85 (expr_tail -> expr .)
    OUTPUT          reduce using rule 85 (expr_tail -> expr .)
    MEMORY          reduce using rule 85 (expr_tail -> expr .)
    MODEL           reduce using rule 85 (expr_tail -> expr .)
    CHAT            reduce using rule 85 (expr_tail -> expr .)
    DEDENT          reduce using rule 85 (expr_tail -> expr .)
    COMMA           reduce using rule 85 (expr_tail -> expr .)
    RBRACE          reduce using rule 85 (expr_tail -> expr .)
    RPAREN          reduce using rule 85 (expr_tail -> expr .)


state 95

    (89) list_expr -> LBRACE list_elements RBRACE .

    PLUS            reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    MINUS           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    TIMES           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    DIVIDE          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    MOD             reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    EQ              reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    NEQ             reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    LT              reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    GT              reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    LE              reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    GE              reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    AGENT           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    CONNECT         reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    DEF             reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    FOR             reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    IF              reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    WHILE           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    IDENTIFIER      reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    BREAK           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    CONTINUE        reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    RETURN          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    STRING          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    NUMBER          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    LBRACE          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    $end            reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    COLON           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    INPUT           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    OUTPUT          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    MEMORY          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    MODEL           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    CHAT            reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    DEDENT          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    COMMA           reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    RBRACE          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)
    RPAREN          reduce using rule 89 (list_expr -> LBRACE list_elements RBRACE .)


state 96

    (94) record_expr -> LBRACE record_elements RBRACE .

    PLUS            reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    MINUS           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    TIMES           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    DIVIDE          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    MOD             reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    EQ              reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    NEQ             reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    LT              reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    GT              reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    LE              reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    GE              reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    AGENT           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    CONNECT         reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    DEF             reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    FOR             reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    IF              reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    WHILE           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    IDENTIFIER      reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    BREAK           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    CONTINUE        reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    RETURN          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    STRING          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    NUMBER          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    LBRACE          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    $end            reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    COLON           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    INPUT           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    OUTPUT          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    MEMORY          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    MODEL           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    CHAT            reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    DEDENT          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    COMMA           reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    RBRACE          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)
    RPAREN          reduce using rule 94 (record_expr -> LBRACE record_elements RBRACE .)


state 97

    (90) list_elements -> expr list_elements_tail .

    RBRACE          reduce using rule 90 (list_elements -> expr list_elements_tail .)


state 98

    (92) list_elements_tail -> COMMA . expr list_elements_tail
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 126
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 99

    (93) list_elements_tail -> empty .

    RBRACE          reduce using rule 93 (list_elements_tail -> empty .)


state 100

    (95) record_elements -> field_assign record_elements_tail .

    RBRACE          reduce using rule 95 (record_elements -> field_assign record_elements_tail .)


state 101

    (97) record_elements_tail -> COMMA . field_assign record_elements_tail
    (99) field_assign -> . IDENTIFIER EQUALS expr

    IDENTIFIER      shift and go to state 128

    field_assign                   shift and go to state 127

state 102

    (98) record_elements_tail -> empty .

    RBRACE          reduce using rule 98 (record_elements_tail -> empty .)


state 103

    (99) field_assign -> IDENTIFIER EQUALS . expr
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 129
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 104

    (9) global_block -> GLOBAL COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 130


state 105

    (10) var_decl_list -> var_decl . var_decl_list
    (11) var_decl_list -> var_decl .
    (10) var_decl_list -> . var_decl var_decl_list
    (11) var_decl_list -> . var_decl
    (12) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (13) var_decl -> . IDENTIFIER COLON type
    (14) var_decl -> . IDENTIFIER EQUALS expr
    (15) var_decl -> . IDENTIFIER

    DEDENT          reduce using rule 11 (var_decl_list -> var_decl .)
    IDENTIFIER      shift and go to state 106

    var_decl                       shift and go to state 105
    var_decl_list                  shift and go to state 131

state 106

    (12) var_decl -> IDENTIFIER . COLON type EQUALS expr
    (13) var_decl -> IDENTIFIER . COLON type
    (14) var_decl -> IDENTIFIER . EQUALS expr
    (15) var_decl -> IDENTIFIER .

    COLON           shift and go to state 132
    EQUALS          shift and go to state 133
    IDENTIFIER      reduce using rule 15 (var_decl -> IDENTIFIER .)
    DEDENT          reduce using rule 15 (var_decl -> IDENTIFIER .)
    COMMA           reduce using rule 15 (var_decl -> IDENTIFIER .)
    RPAREN          reduce using rule 15 (var_decl -> IDENTIFIER .)


state 107

    (28) agent_def -> AGENT IDENTIFIER COLON INDENT . agent_body DEDENT
    (29) agent_body -> . agent_body_item agent_body
    (30) agent_body -> . agent_body_item
    (31) agent_body_item -> . input_block
    (32) agent_body_item -> . output_block
    (33) agent_body_item -> . memory_block
    (34) agent_body_item -> . model_block
    (35) agent_body_item -> . statement
    (36) agent_body_item -> . chat_block
    (37) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (38) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (39) memory_block -> . MEMORY COLON INDENT var_decl_list DEDENT
    (40) model_block -> . MODEL COLON STRING
    (59) statement -> . for_stmt
    (60) statement -> . if_stmt
    (61) statement -> . while_stmt
    (62) statement -> . assign_stmt
    (63) statement -> . expr_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (41) chat_block -> . CHAT IDENTIFIER COLON TRIPLE_STRING
    (72) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (75) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> . IF expr COLON stmt_block
    (77) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) expr_stmt -> . expr
    (73) break_stmt -> . BREAK
    (74) continue_stmt -> . CONTINUE
    (70) return_stmt -> . RETURN expr
    (71) return_stmt -> . RETURN
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    INPUT           shift and go to state 142
    OUTPUT          shift and go to state 143
    MEMORY          shift and go to state 144
    MODEL           shift and go to state 145
    CHAT            shift and go to state 146
    FOR             shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    IDENTIFIER      shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 28
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    agent_body                     shift and go to state 134
    agent_body_item                shift and go to state 135
    input_block                    shift and go to state 136
    output_block                   shift and go to state 137
    memory_block                   shift and go to state 138
    model_block                    shift and go to state 139
    statement                      shift and go to state 140
    chat_block                     shift and go to state 141
    for_stmt                       shift and go to state 10
    if_stmt                        shift and go to state 11
    while_stmt                     shift and go to state 12
    assign_stmt                    shift and go to state 13
    expr_stmt                      shift and go to state 14
    break_stmt                     shift and go to state 15
    continue_stmt                  shift and go to state 16
    return_stmt                    shift and go to state 17
    expr                           shift and go to state 23
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 108

    (67) assign_stmt -> IDENTIFIER COLON type EQUALS . expr
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 147
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 109

    (23) list_type -> TYPE_LIST LBRACE . type RBRACE
    (16) type -> . base_type
    (17) type -> . list_type
    (18) type -> . record_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) list_type -> . TYPE_LIST LBRACE type RBRACE
    (24) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 77
    TYPE_INT        shift and go to state 78
    TYPE_FLOAT      shift and go to state 79
    TYPE_BOOL       shift and go to state 80
    TYPE_LIST       shift and go to state 81
    TYPE_RECORD     shift and go to state 82

    type                           shift and go to state 148
    base_type                      shift and go to state 74
    list_type                      shift and go to state 75
    record_type                    shift and go to state 76

state 110

    (24) record_type -> TYPE_RECORD LBRACE . field_decl_list RBRACE
    (25) field_decl_list -> . field_decl field_decl_list
    (26) field_decl_list -> . field_decl
    (27) field_decl -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 151

    field_decl_list                shift and go to state 149
    field_decl                     shift and go to state 150

state 111

    (101) func_call -> IDENTIFIER LPAREN arg_list RPAREN .

    PLUS            reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MOD             reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    EQ              reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NEQ             reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LT              reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GT              reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LE              reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    GE              reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    AGENT           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CONNECT         reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DEF             reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    FOR             reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IF              reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    WHILE           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    IDENTIFIER      reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    STRING          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    $end            reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COLON           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    INPUT           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    OUTPUT          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MEMORY          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    MODEL           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    CHAT            reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    DEDENT          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 101 (func_call -> IDENTIFIER LPAREN arg_list RPAREN .)


state 112

    (102) arg_list -> expr arg_list_tail .

    RPAREN          reduce using rule 102 (arg_list -> expr arg_list_tail .)


state 113

    (104) arg_list_tail -> COMMA . expr arg_list_tail
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 152
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 114

    (105) arg_list_tail -> empty .

    RPAREN          reduce using rule 105 (arg_list_tail -> empty .)


state 115

    (42) connect_block -> CONNECT COLON INDENT connection_list . DEDENT

    DEDENT          shift and go to state 153


state 116

    (43) connection_list -> connection . connection_list
    (44) connection_list -> connection .
    (43) connection_list -> . connection connection_list
    (44) connection_list -> . connection
    (45) connection -> . IDENTIFIER COLON type agent_ref ARROW agent_ref

    DEDENT          reduce using rule 44 (connection_list -> connection .)
    IDENTIFIER      shift and go to state 117

    connection                     shift and go to state 116
    connection_list                shift and go to state 154

state 117

    (45) connection -> IDENTIFIER . COLON type agent_ref ARROW agent_ref

    COLON           shift and go to state 155


state 118

    (49) func_def -> DEF IDENTIFIER LPAREN param_list . RPAREN COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> DEF IDENTIFIER LPAREN param_list . RPAREN COLON INDENT stmt_block DEDENT

    RPAREN          shift and go to state 156


state 119

    (51) param_list -> param_decl . param_list_tail
    (53) param_list_tail -> . COMMA param_decl param_list_tail
    (54) param_list_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 158
    RPAREN          reduce using rule 117 (empty -> .)

    param_list_tail                shift and go to state 157
    empty                          shift and go to state 159

state 120

    (52) param_list -> empty .

    RPAREN          reduce using rule 52 (param_list -> empty .)


state 121

    (55) param_decl -> var_decl .

    COMMA           reduce using rule 55 (param_decl -> var_decl .)
    RPAREN          reduce using rule 55 (param_decl -> var_decl .)


state 122

    (72) for_stmt -> FOR IDENTIFIER IN expr . COLON stmt_block

    COLON           shift and go to state 160


state 123

    (75) if_stmt -> IF expr COLON stmt_block . ELSE COLON stmt_block
    (76) if_stmt -> IF expr COLON stmt_block .

    ELSE            shift and go to state 161
    AGENT           reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    CONNECT         reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    DEF             reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    FOR             reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    IF              reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    WHILE           reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    BREAK           reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    CONTINUE        reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    RETURN          reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    STRING          reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    NUMBER          reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    LBRACE          reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    $end            reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    INPUT           reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    OUTPUT          reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    MEMORY          reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    MODEL           reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    CHAT            reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)
    DEDENT          reduce using rule 76 (if_stmt -> IF expr COLON stmt_block .)


state 124

    (56) stmt_block -> INDENT . statement_list DEDENT
    (57) statement_list -> . statement statement_list
    (58) statement_list -> . statement
    (59) statement -> . for_stmt
    (60) statement -> . if_stmt
    (61) statement -> . while_stmt
    (62) statement -> . assign_stmt
    (63) statement -> . expr_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (72) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (75) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> . IF expr COLON stmt_block
    (77) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) expr_stmt -> . expr
    (73) break_stmt -> . BREAK
    (74) continue_stmt -> . CONTINUE
    (70) return_stmt -> . RETURN expr
    (71) return_stmt -> . RETURN
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    FOR             shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    IDENTIFIER      shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 28
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    statement_list                 shift and go to state 162
    statement                      shift and go to state 163
    for_stmt                       shift and go to state 10
    if_stmt                        shift and go to state 11
    while_stmt                     shift and go to state 12
    assign_stmt                    shift and go to state 13
    expr_stmt                      shift and go to state 14
    break_stmt                     shift and go to state 15
    continue_stmt                  shift and go to state 16
    return_stmt                    shift and go to state 17
    expr                           shift and go to state 23
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 125

    (77) while_stmt -> WHILE expr COLON stmt_block .

    AGENT           reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    CONNECT         reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    DEF             reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    FOR             reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    IF              reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    WHILE           reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    BREAK           reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    CONTINUE        reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    RETURN          reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    STRING          reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    NUMBER          reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    LBRACE          reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    $end            reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    INPUT           reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    OUTPUT          reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    MEMORY          reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    MODEL           reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    CHAT            reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)
    DEDENT          reduce using rule 77 (while_stmt -> WHILE expr COLON stmt_block .)


state 126

    (92) list_elements_tail -> COMMA expr . list_elements_tail
    (92) list_elements_tail -> . COMMA expr list_elements_tail
    (93) list_elements_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 98
    RBRACE          reduce using rule 117 (empty -> .)

    list_elements_tail             shift and go to state 164
    empty                          shift and go to state 99

state 127

    (97) record_elements_tail -> COMMA field_assign . record_elements_tail
    (97) record_elements_tail -> . COMMA field_assign record_elements_tail
    (98) record_elements_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 101
    RBRACE          reduce using rule 117 (empty -> .)

    record_elements_tail           shift and go to state 165
    empty                          shift and go to state 102

state 128

    (99) field_assign -> IDENTIFIER . EQUALS expr

    EQUALS          shift and go to state 103


state 129

    (99) field_assign -> IDENTIFIER EQUALS expr .

    COMMA           reduce using rule 99 (field_assign -> IDENTIFIER EQUALS expr .)
    RBRACE          reduce using rule 99 (field_assign -> IDENTIFIER EQUALS expr .)


state 130

    (9) global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .

    AGENT           reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    CONNECT         reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    DEF             reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    STRING          reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    NUMBER          reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)
    LBRACE          reduce using rule 9 (global_block -> GLOBAL COLON INDENT var_decl_list DEDENT .)


state 131

    (10) var_decl_list -> var_decl var_decl_list .

    DEDENT          reduce using rule 10 (var_decl_list -> var_decl var_decl_list .)


state 132

    (12) var_decl -> IDENTIFIER COLON . type EQUALS expr
    (13) var_decl -> IDENTIFIER COLON . type
    (16) type -> . base_type
    (17) type -> . list_type
    (18) type -> . record_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) list_type -> . TYPE_LIST LBRACE type RBRACE
    (24) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 77
    TYPE_INT        shift and go to state 78
    TYPE_FLOAT      shift and go to state 79
    TYPE_BOOL       shift and go to state 80
    TYPE_LIST       shift and go to state 81
    TYPE_RECORD     shift and go to state 82

    type                           shift and go to state 166
    base_type                      shift and go to state 74
    list_type                      shift and go to state 75
    record_type                    shift and go to state 76

state 133

    (14) var_decl -> IDENTIFIER EQUALS . expr
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 167
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 134

    (28) agent_def -> AGENT IDENTIFIER COLON INDENT agent_body . DEDENT

    DEDENT          shift and go to state 168


state 135

    (29) agent_body -> agent_body_item . agent_body
    (30) agent_body -> agent_body_item .
    (29) agent_body -> . agent_body_item agent_body
    (30) agent_body -> . agent_body_item
    (31) agent_body_item -> . input_block
    (32) agent_body_item -> . output_block
    (33) agent_body_item -> . memory_block
    (34) agent_body_item -> . model_block
    (35) agent_body_item -> . statement
    (36) agent_body_item -> . chat_block
    (37) input_block -> . INPUT COLON INDENT var_decl_list DEDENT
    (38) output_block -> . OUTPUT COLON INDENT var_decl_list DEDENT
    (39) memory_block -> . MEMORY COLON INDENT var_decl_list DEDENT
    (40) model_block -> . MODEL COLON STRING
    (59) statement -> . for_stmt
    (60) statement -> . if_stmt
    (61) statement -> . while_stmt
    (62) statement -> . assign_stmt
    (63) statement -> . expr_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (41) chat_block -> . CHAT IDENTIFIER COLON TRIPLE_STRING
    (72) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (75) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> . IF expr COLON stmt_block
    (77) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) expr_stmt -> . expr
    (73) break_stmt -> . BREAK
    (74) continue_stmt -> . CONTINUE
    (70) return_stmt -> . RETURN expr
    (71) return_stmt -> . RETURN
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    DEDENT          reduce using rule 30 (agent_body -> agent_body_item .)
    INPUT           shift and go to state 142
    OUTPUT          shift and go to state 143
    MEMORY          shift and go to state 144
    MODEL           shift and go to state 145
    CHAT            shift and go to state 146
    FOR             shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    IDENTIFIER      shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 28
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    agent_body_item                shift and go to state 135
    agent_body                     shift and go to state 169
    input_block                    shift and go to state 136
    output_block                   shift and go to state 137
    memory_block                   shift and go to state 138
    model_block                    shift and go to state 139
    statement                      shift and go to state 140
    chat_block                     shift and go to state 141
    for_stmt                       shift and go to state 10
    if_stmt                        shift and go to state 11
    while_stmt                     shift and go to state 12
    assign_stmt                    shift and go to state 13
    expr_stmt                      shift and go to state 14
    break_stmt                     shift and go to state 15
    continue_stmt                  shift and go to state 16
    return_stmt                    shift and go to state 17
    expr                           shift and go to state 23
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 136

    (31) agent_body_item -> input_block .

    INPUT           reduce using rule 31 (agent_body_item -> input_block .)
    OUTPUT          reduce using rule 31 (agent_body_item -> input_block .)
    MEMORY          reduce using rule 31 (agent_body_item -> input_block .)
    MODEL           reduce using rule 31 (agent_body_item -> input_block .)
    CHAT            reduce using rule 31 (agent_body_item -> input_block .)
    FOR             reduce using rule 31 (agent_body_item -> input_block .)
    IF              reduce using rule 31 (agent_body_item -> input_block .)
    WHILE           reduce using rule 31 (agent_body_item -> input_block .)
    IDENTIFIER      reduce using rule 31 (agent_body_item -> input_block .)
    BREAK           reduce using rule 31 (agent_body_item -> input_block .)
    CONTINUE        reduce using rule 31 (agent_body_item -> input_block .)
    RETURN          reduce using rule 31 (agent_body_item -> input_block .)
    STRING          reduce using rule 31 (agent_body_item -> input_block .)
    NUMBER          reduce using rule 31 (agent_body_item -> input_block .)
    LBRACE          reduce using rule 31 (agent_body_item -> input_block .)
    DEDENT          reduce using rule 31 (agent_body_item -> input_block .)


state 137

    (32) agent_body_item -> output_block .

    INPUT           reduce using rule 32 (agent_body_item -> output_block .)
    OUTPUT          reduce using rule 32 (agent_body_item -> output_block .)
    MEMORY          reduce using rule 32 (agent_body_item -> output_block .)
    MODEL           reduce using rule 32 (agent_body_item -> output_block .)
    CHAT            reduce using rule 32 (agent_body_item -> output_block .)
    FOR             reduce using rule 32 (agent_body_item -> output_block .)
    IF              reduce using rule 32 (agent_body_item -> output_block .)
    WHILE           reduce using rule 32 (agent_body_item -> output_block .)
    IDENTIFIER      reduce using rule 32 (agent_body_item -> output_block .)
    BREAK           reduce using rule 32 (agent_body_item -> output_block .)
    CONTINUE        reduce using rule 32 (agent_body_item -> output_block .)
    RETURN          reduce using rule 32 (agent_body_item -> output_block .)
    STRING          reduce using rule 32 (agent_body_item -> output_block .)
    NUMBER          reduce using rule 32 (agent_body_item -> output_block .)
    LBRACE          reduce using rule 32 (agent_body_item -> output_block .)
    DEDENT          reduce using rule 32 (agent_body_item -> output_block .)


state 138

    (33) agent_body_item -> memory_block .

    INPUT           reduce using rule 33 (agent_body_item -> memory_block .)
    OUTPUT          reduce using rule 33 (agent_body_item -> memory_block .)
    MEMORY          reduce using rule 33 (agent_body_item -> memory_block .)
    MODEL           reduce using rule 33 (agent_body_item -> memory_block .)
    CHAT            reduce using rule 33 (agent_body_item -> memory_block .)
    FOR             reduce using rule 33 (agent_body_item -> memory_block .)
    IF              reduce using rule 33 (agent_body_item -> memory_block .)
    WHILE           reduce using rule 33 (agent_body_item -> memory_block .)
    IDENTIFIER      reduce using rule 33 (agent_body_item -> memory_block .)
    BREAK           reduce using rule 33 (agent_body_item -> memory_block .)
    CONTINUE        reduce using rule 33 (agent_body_item -> memory_block .)
    RETURN          reduce using rule 33 (agent_body_item -> memory_block .)
    STRING          reduce using rule 33 (agent_body_item -> memory_block .)
    NUMBER          reduce using rule 33 (agent_body_item -> memory_block .)
    LBRACE          reduce using rule 33 (agent_body_item -> memory_block .)
    DEDENT          reduce using rule 33 (agent_body_item -> memory_block .)


state 139

    (34) agent_body_item -> model_block .

    INPUT           reduce using rule 34 (agent_body_item -> model_block .)
    OUTPUT          reduce using rule 34 (agent_body_item -> model_block .)
    MEMORY          reduce using rule 34 (agent_body_item -> model_block .)
    MODEL           reduce using rule 34 (agent_body_item -> model_block .)
    CHAT            reduce using rule 34 (agent_body_item -> model_block .)
    FOR             reduce using rule 34 (agent_body_item -> model_block .)
    IF              reduce using rule 34 (agent_body_item -> model_block .)
    WHILE           reduce using rule 34 (agent_body_item -> model_block .)
    IDENTIFIER      reduce using rule 34 (agent_body_item -> model_block .)
    BREAK           reduce using rule 34 (agent_body_item -> model_block .)
    CONTINUE        reduce using rule 34 (agent_body_item -> model_block .)
    RETURN          reduce using rule 34 (agent_body_item -> model_block .)
    STRING          reduce using rule 34 (agent_body_item -> model_block .)
    NUMBER          reduce using rule 34 (agent_body_item -> model_block .)
    LBRACE          reduce using rule 34 (agent_body_item -> model_block .)
    DEDENT          reduce using rule 34 (agent_body_item -> model_block .)


state 140

    (35) agent_body_item -> statement .

    INPUT           reduce using rule 35 (agent_body_item -> statement .)
    OUTPUT          reduce using rule 35 (agent_body_item -> statement .)
    MEMORY          reduce using rule 35 (agent_body_item -> statement .)
    MODEL           reduce using rule 35 (agent_body_item -> statement .)
    CHAT            reduce using rule 35 (agent_body_item -> statement .)
    FOR             reduce using rule 35 (agent_body_item -> statement .)
    IF              reduce using rule 35 (agent_body_item -> statement .)
    WHILE           reduce using rule 35 (agent_body_item -> statement .)
    IDENTIFIER      reduce using rule 35 (agent_body_item -> statement .)
    BREAK           reduce using rule 35 (agent_body_item -> statement .)
    CONTINUE        reduce using rule 35 (agent_body_item -> statement .)
    RETURN          reduce using rule 35 (agent_body_item -> statement .)
    STRING          reduce using rule 35 (agent_body_item -> statement .)
    NUMBER          reduce using rule 35 (agent_body_item -> statement .)
    LBRACE          reduce using rule 35 (agent_body_item -> statement .)
    DEDENT          reduce using rule 35 (agent_body_item -> statement .)


state 141

    (36) agent_body_item -> chat_block .

    INPUT           reduce using rule 36 (agent_body_item -> chat_block .)
    OUTPUT          reduce using rule 36 (agent_body_item -> chat_block .)
    MEMORY          reduce using rule 36 (agent_body_item -> chat_block .)
    MODEL           reduce using rule 36 (agent_body_item -> chat_block .)
    CHAT            reduce using rule 36 (agent_body_item -> chat_block .)
    FOR             reduce using rule 36 (agent_body_item -> chat_block .)
    IF              reduce using rule 36 (agent_body_item -> chat_block .)
    WHILE           reduce using rule 36 (agent_body_item -> chat_block .)
    IDENTIFIER      reduce using rule 36 (agent_body_item -> chat_block .)
    BREAK           reduce using rule 36 (agent_body_item -> chat_block .)
    CONTINUE        reduce using rule 36 (agent_body_item -> chat_block .)
    RETURN          reduce using rule 36 (agent_body_item -> chat_block .)
    STRING          reduce using rule 36 (agent_body_item -> chat_block .)
    NUMBER          reduce using rule 36 (agent_body_item -> chat_block .)
    LBRACE          reduce using rule 36 (agent_body_item -> chat_block .)
    DEDENT          reduce using rule 36 (agent_body_item -> chat_block .)


state 142

    (37) input_block -> INPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 170


state 143

    (38) output_block -> OUTPUT . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 171


state 144

    (39) memory_block -> MEMORY . COLON INDENT var_decl_list DEDENT

    COLON           shift and go to state 172


state 145

    (40) model_block -> MODEL . COLON STRING

    COLON           shift and go to state 173


state 146

    (41) chat_block -> CHAT . IDENTIFIER COLON TRIPLE_STRING

    IDENTIFIER      shift and go to state 174


state 147

    (67) assign_stmt -> IDENTIFIER COLON type EQUALS expr .

    AGENT           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CONNECT         reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    DEF             reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    FOR             reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    IF              reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    WHILE           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    IDENTIFIER      reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    BREAK           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CONTINUE        reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    RETURN          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    STRING          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    NUMBER          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    LBRACE          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    $end            reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    INPUT           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    OUTPUT          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    MEMORY          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    MODEL           reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    CHAT            reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)
    DEDENT          reduce using rule 67 (assign_stmt -> IDENTIFIER COLON type EQUALS expr .)


state 148

    (23) list_type -> TYPE_LIST LBRACE type . RBRACE

    RBRACE          shift and go to state 175


state 149

    (24) record_type -> TYPE_RECORD LBRACE field_decl_list . RBRACE

    RBRACE          shift and go to state 176


state 150

    (25) field_decl_list -> field_decl . field_decl_list
    (26) field_decl_list -> field_decl .
    (25) field_decl_list -> . field_decl field_decl_list
    (26) field_decl_list -> . field_decl
    (27) field_decl -> . IDENTIFIER COLON type

    RBRACE          reduce using rule 26 (field_decl_list -> field_decl .)
    IDENTIFIER      shift and go to state 151

    field_decl                     shift and go to state 150
    field_decl_list                shift and go to state 177

state 151

    (27) field_decl -> IDENTIFIER . COLON type

    COLON           shift and go to state 178


state 152

    (104) arg_list_tail -> COMMA expr . arg_list_tail
    (104) arg_list_tail -> . COMMA expr arg_list_tail
    (105) arg_list_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 113
    RPAREN          reduce using rule 117 (empty -> .)

    arg_list_tail                  shift and go to state 179
    empty                          shift and go to state 114

state 153

    (42) connect_block -> CONNECT COLON INDENT connection_list DEDENT .

    AGENT           reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONNECT         reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    DEF             reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    FOR             reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IF              reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    WHILE           reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    IDENTIFIER      reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    BREAK           reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    CONTINUE        reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    RETURN          reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    STRING          reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    NUMBER          reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    LBRACE          reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)
    $end            reduce using rule 42 (connect_block -> CONNECT COLON INDENT connection_list DEDENT .)


state 154

    (43) connection_list -> connection connection_list .

    DEDENT          reduce using rule 43 (connection_list -> connection connection_list .)


state 155

    (45) connection -> IDENTIFIER COLON . type agent_ref ARROW agent_ref
    (16) type -> . base_type
    (17) type -> . list_type
    (18) type -> . record_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) list_type -> . TYPE_LIST LBRACE type RBRACE
    (24) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 77
    TYPE_INT        shift and go to state 78
    TYPE_FLOAT      shift and go to state 79
    TYPE_BOOL       shift and go to state 80
    TYPE_LIST       shift and go to state 81
    TYPE_RECORD     shift and go to state 82

    type                           shift and go to state 180
    base_type                      shift and go to state 74
    list_type                      shift and go to state 75
    record_type                    shift and go to state 76

state 156

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN . COLON type COLON INDENT stmt_block DEDENT
    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN . COLON INDENT stmt_block DEDENT

    COLON           shift and go to state 181


state 157

    (51) param_list -> param_decl param_list_tail .

    RPAREN          reduce using rule 51 (param_list -> param_decl param_list_tail .)


state 158

    (53) param_list_tail -> COMMA . param_decl param_list_tail
    (55) param_decl -> . var_decl
    (12) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (13) var_decl -> . IDENTIFIER COLON type
    (14) var_decl -> . IDENTIFIER EQUALS expr
    (15) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 106

    param_decl                     shift and go to state 182
    var_decl                       shift and go to state 121

state 159

    (54) param_list_tail -> empty .

    RPAREN          reduce using rule 54 (param_list_tail -> empty .)


state 160

    (72) for_stmt -> FOR IDENTIFIER IN expr COLON . stmt_block
    (56) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 124

    stmt_block                     shift and go to state 183

state 161

    (75) if_stmt -> IF expr COLON stmt_block ELSE . COLON stmt_block

    COLON           shift and go to state 184


state 162

    (56) stmt_block -> INDENT statement_list . DEDENT

    DEDENT          shift and go to state 185


state 163

    (57) statement_list -> statement . statement_list
    (58) statement_list -> statement .
    (57) statement_list -> . statement statement_list
    (58) statement_list -> . statement
    (59) statement -> . for_stmt
    (60) statement -> . if_stmt
    (61) statement -> . while_stmt
    (62) statement -> . assign_stmt
    (63) statement -> . expr_stmt
    (64) statement -> . break_stmt
    (65) statement -> . continue_stmt
    (66) statement -> . return_stmt
    (72) for_stmt -> . FOR IDENTIFIER IN expr COLON stmt_block
    (75) if_stmt -> . IF expr COLON stmt_block ELSE COLON stmt_block
    (76) if_stmt -> . IF expr COLON stmt_block
    (77) while_stmt -> . WHILE expr COLON stmt_block
    (67) assign_stmt -> . IDENTIFIER COLON type EQUALS expr
    (68) assign_stmt -> . IDENTIFIER EQUALS expr
    (69) expr_stmt -> . expr
    (73) break_stmt -> . BREAK
    (74) continue_stmt -> . CONTINUE
    (70) return_stmt -> . RETURN expr
    (71) return_stmt -> . RETURN
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    DEDENT          reduce using rule 58 (statement_list -> statement .)
    FOR             shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    IDENTIFIER      shift and go to state 19
    BREAK           shift and go to state 26
    CONTINUE        shift and go to state 27
    RETURN          shift and go to state 28
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    statement                      shift and go to state 163
    statement_list                 shift and go to state 186
    for_stmt                       shift and go to state 10
    if_stmt                        shift and go to state 11
    while_stmt                     shift and go to state 12
    assign_stmt                    shift and go to state 13
    expr_stmt                      shift and go to state 14
    break_stmt                     shift and go to state 15
    continue_stmt                  shift and go to state 16
    return_stmt                    shift and go to state 17
    expr                           shift and go to state 23
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 164

    (92) list_elements_tail -> COMMA expr list_elements_tail .

    RBRACE          reduce using rule 92 (list_elements_tail -> COMMA expr list_elements_tail .)


state 165

    (97) record_elements_tail -> COMMA field_assign record_elements_tail .

    RBRACE          reduce using rule 97 (record_elements_tail -> COMMA field_assign record_elements_tail .)


state 166

    (12) var_decl -> IDENTIFIER COLON type . EQUALS expr
    (13) var_decl -> IDENTIFIER COLON type .

    EQUALS          shift and go to state 187
    IDENTIFIER      reduce using rule 13 (var_decl -> IDENTIFIER COLON type .)
    DEDENT          reduce using rule 13 (var_decl -> IDENTIFIER COLON type .)
    COMMA           reduce using rule 13 (var_decl -> IDENTIFIER COLON type .)
    RPAREN          reduce using rule 13 (var_decl -> IDENTIFIER COLON type .)


state 167

    (14) var_decl -> IDENTIFIER EQUALS expr .

    IDENTIFIER      reduce using rule 14 (var_decl -> IDENTIFIER EQUALS expr .)
    DEDENT          reduce using rule 14 (var_decl -> IDENTIFIER EQUALS expr .)
    COMMA           reduce using rule 14 (var_decl -> IDENTIFIER EQUALS expr .)
    RPAREN          reduce using rule 14 (var_decl -> IDENTIFIER EQUALS expr .)


state 168

    (28) agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .

    AGENT           reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    CONNECT         reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    DEF             reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    FOR             reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    IF              reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    WHILE           reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    IDENTIFIER      reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    BREAK           reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    CONTINUE        reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    RETURN          reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    STRING          reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    NUMBER          reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    LBRACE          reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)
    $end            reduce using rule 28 (agent_def -> AGENT IDENTIFIER COLON INDENT agent_body DEDENT .)


state 169

    (29) agent_body -> agent_body_item agent_body .

    DEDENT          reduce using rule 29 (agent_body -> agent_body_item agent_body .)


state 170

    (37) input_block -> INPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 188


state 171

    (38) output_block -> OUTPUT COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 189


state 172

    (39) memory_block -> MEMORY COLON . INDENT var_decl_list DEDENT

    INDENT          shift and go to state 190


state 173

    (40) model_block -> MODEL COLON . STRING

    STRING          shift and go to state 191


state 174

    (41) chat_block -> CHAT IDENTIFIER . COLON TRIPLE_STRING

    COLON           shift and go to state 192


state 175

    (23) list_type -> TYPE_LIST LBRACE type RBRACE .

    EQUALS          reduce using rule 23 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    RBRACE          reduce using rule 23 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    IDENTIFIER      reduce using rule 23 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    DEDENT          reduce using rule 23 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    COMMA           reduce using rule 23 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    RPAREN          reduce using rule 23 (list_type -> TYPE_LIST LBRACE type RBRACE .)
    COLON           reduce using rule 23 (list_type -> TYPE_LIST LBRACE type RBRACE .)


state 176

    (24) record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .

    EQUALS          reduce using rule 24 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RBRACE          reduce using rule 24 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    IDENTIFIER      reduce using rule 24 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    DEDENT          reduce using rule 24 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COMMA           reduce using rule 24 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    RPAREN          reduce using rule 24 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)
    COLON           reduce using rule 24 (record_type -> TYPE_RECORD LBRACE field_decl_list RBRACE .)


state 177

    (25) field_decl_list -> field_decl field_decl_list .

    RBRACE          reduce using rule 25 (field_decl_list -> field_decl field_decl_list .)


state 178

    (27) field_decl -> IDENTIFIER COLON . type
    (16) type -> . base_type
    (17) type -> . list_type
    (18) type -> . record_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) list_type -> . TYPE_LIST LBRACE type RBRACE
    (24) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    TYPE_STR        shift and go to state 77
    TYPE_INT        shift and go to state 78
    TYPE_FLOAT      shift and go to state 79
    TYPE_BOOL       shift and go to state 80
    TYPE_LIST       shift and go to state 81
    TYPE_RECORD     shift and go to state 82

    type                           shift and go to state 193
    base_type                      shift and go to state 74
    list_type                      shift and go to state 75
    record_type                    shift and go to state 76

state 179

    (104) arg_list_tail -> COMMA expr arg_list_tail .

    RPAREN          reduce using rule 104 (arg_list_tail -> COMMA expr arg_list_tail .)


state 180

    (45) connection -> IDENTIFIER COLON type . agent_ref ARROW agent_ref
    (46) agent_ref -> . IDENTIFIER agent_ref_tail

    IDENTIFIER      shift and go to state 194

    agent_ref                      shift and go to state 195

state 181

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON . type COLON INDENT stmt_block DEDENT
    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON . INDENT stmt_block DEDENT
    (16) type -> . base_type
    (17) type -> . list_type
    (18) type -> . record_type
    (19) base_type -> . TYPE_STR
    (20) base_type -> . TYPE_INT
    (21) base_type -> . TYPE_FLOAT
    (22) base_type -> . TYPE_BOOL
    (23) list_type -> . TYPE_LIST LBRACE type RBRACE
    (24) record_type -> . TYPE_RECORD LBRACE field_decl_list RBRACE

    INDENT          shift and go to state 197
    TYPE_STR        shift and go to state 77
    TYPE_INT        shift and go to state 78
    TYPE_FLOAT      shift and go to state 79
    TYPE_BOOL       shift and go to state 80
    TYPE_LIST       shift and go to state 81
    TYPE_RECORD     shift and go to state 82

    type                           shift and go to state 196
    base_type                      shift and go to state 74
    list_type                      shift and go to state 75
    record_type                    shift and go to state 76

state 182

    (53) param_list_tail -> COMMA param_decl . param_list_tail
    (53) param_list_tail -> . COMMA param_decl param_list_tail
    (54) param_list_tail -> . empty
    (117) empty -> .

    COMMA           shift and go to state 158
    RPAREN          reduce using rule 117 (empty -> .)

    param_list_tail                shift and go to state 198
    empty                          shift and go to state 159

state 183

    (72) for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .

    AGENT           reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CONNECT         reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    DEF             reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    FOR             reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    IF              reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    WHILE           reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    IDENTIFIER      reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    BREAK           reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CONTINUE        reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    RETURN          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    STRING          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    NUMBER          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    LBRACE          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    $end            reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    INPUT           reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    OUTPUT          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    MEMORY          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    MODEL           reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    CHAT            reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)
    DEDENT          reduce using rule 72 (for_stmt -> FOR IDENTIFIER IN expr COLON stmt_block .)


state 184

    (75) if_stmt -> IF expr COLON stmt_block ELSE COLON . stmt_block
    (56) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 124

    stmt_block                     shift and go to state 199

state 185

    (56) stmt_block -> INDENT statement_list DEDENT .

    ELSE            reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    AGENT           reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    CONNECT         reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    DEF             reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    FOR             reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    IF              reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    WHILE           reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    IDENTIFIER      reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    BREAK           reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    CONTINUE        reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    RETURN          reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    STRING          reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    NUMBER          reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    LBRACE          reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    $end            reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    INPUT           reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    OUTPUT          reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    MEMORY          reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    MODEL           reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    CHAT            reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 56 (stmt_block -> INDENT statement_list DEDENT .)


state 186

    (57) statement_list -> statement statement_list .

    DEDENT          reduce using rule 57 (statement_list -> statement statement_list .)


state 187

    (12) var_decl -> IDENTIFIER COLON type EQUALS . expr
    (78) expr -> . expr_head bin_op expr_tail
    (79) expr -> . expr_head
    (80) expr_head -> . atom
    (81) expr_head -> . list_expr
    (82) expr_head -> . record_expr
    (83) expr_head -> . field_access
    (84) expr_head -> . func_call
    (86) atom -> . IDENTIFIER
    (87) atom -> . STRING
    (88) atom -> . NUMBER
    (89) list_expr -> . LBRACE list_elements RBRACE
    (94) record_expr -> . LBRACE record_elements RBRACE
    (100) field_access -> . IDENTIFIER DOT IDENTIFIER
    (101) func_call -> . IDENTIFIER LPAREN arg_list RPAREN

    IDENTIFIER      shift and go to state 50
    STRING          shift and go to state 35
    NUMBER          shift and go to state 36
    LBRACE          shift and go to state 37

    expr                           shift and go to state 200
    expr_head                      shift and go to state 29
    atom                           shift and go to state 30
    list_expr                      shift and go to state 31
    record_expr                    shift and go to state 32
    field_access                   shift and go to state 33
    func_call                      shift and go to state 34

state 188

    (37) input_block -> INPUT COLON INDENT . var_decl_list DEDENT
    (10) var_decl_list -> . var_decl var_decl_list
    (11) var_decl_list -> . var_decl
    (12) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (13) var_decl -> . IDENTIFIER COLON type
    (14) var_decl -> . IDENTIFIER EQUALS expr
    (15) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 106

    var_decl_list                  shift and go to state 201
    var_decl                       shift and go to state 105

state 189

    (38) output_block -> OUTPUT COLON INDENT . var_decl_list DEDENT
    (10) var_decl_list -> . var_decl var_decl_list
    (11) var_decl_list -> . var_decl
    (12) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (13) var_decl -> . IDENTIFIER COLON type
    (14) var_decl -> . IDENTIFIER EQUALS expr
    (15) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 106

    var_decl_list                  shift and go to state 202
    var_decl                       shift and go to state 105

state 190

    (39) memory_block -> MEMORY COLON INDENT . var_decl_list DEDENT
    (10) var_decl_list -> . var_decl var_decl_list
    (11) var_decl_list -> . var_decl
    (12) var_decl -> . IDENTIFIER COLON type EQUALS expr
    (13) var_decl -> . IDENTIFIER COLON type
    (14) var_decl -> . IDENTIFIER EQUALS expr
    (15) var_decl -> . IDENTIFIER

    IDENTIFIER      shift and go to state 106

    var_decl_list                  shift and go to state 203
    var_decl                       shift and go to state 105

state 191

    (40) model_block -> MODEL COLON STRING .

    INPUT           reduce using rule 40 (model_block -> MODEL COLON STRING .)
    OUTPUT          reduce using rule 40 (model_block -> MODEL COLON STRING .)
    MEMORY          reduce using rule 40 (model_block -> MODEL COLON STRING .)
    MODEL           reduce using rule 40 (model_block -> MODEL COLON STRING .)
    CHAT            reduce using rule 40 (model_block -> MODEL COLON STRING .)
    FOR             reduce using rule 40 (model_block -> MODEL COLON STRING .)
    IF              reduce using rule 40 (model_block -> MODEL COLON STRING .)
    WHILE           reduce using rule 40 (model_block -> MODEL COLON STRING .)
    IDENTIFIER      reduce using rule 40 (model_block -> MODEL COLON STRING .)
    BREAK           reduce using rule 40 (model_block -> MODEL COLON STRING .)
    CONTINUE        reduce using rule 40 (model_block -> MODEL COLON STRING .)
    RETURN          reduce using rule 40 (model_block -> MODEL COLON STRING .)
    STRING          reduce using rule 40 (model_block -> MODEL COLON STRING .)
    NUMBER          reduce using rule 40 (model_block -> MODEL COLON STRING .)
    LBRACE          reduce using rule 40 (model_block -> MODEL COLON STRING .)
    DEDENT          reduce using rule 40 (model_block -> MODEL COLON STRING .)


state 192

    (41) chat_block -> CHAT IDENTIFIER COLON . TRIPLE_STRING

    TRIPLE_STRING   shift and go to state 204


state 193

    (27) field_decl -> IDENTIFIER COLON type .

    IDENTIFIER      reduce using rule 27 (field_decl -> IDENTIFIER COLON type .)
    RBRACE          reduce using rule 27 (field_decl -> IDENTIFIER COLON type .)


state 194

    (46) agent_ref -> IDENTIFIER . agent_ref_tail
    (47) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (48) agent_ref_tail -> . empty
    (117) empty -> .

    DOT             shift and go to state 206
    ARROW           reduce using rule 117 (empty -> .)
    IDENTIFIER      reduce using rule 117 (empty -> .)
    DEDENT          reduce using rule 117 (empty -> .)

    agent_ref_tail                 shift and go to state 205
    empty                          shift and go to state 207

state 195

    (45) connection -> IDENTIFIER COLON type agent_ref . ARROW agent_ref

    ARROW           shift and go to state 208


state 196

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type . COLON INDENT stmt_block DEDENT

    COLON           shift and go to state 209


state 197

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT . stmt_block DEDENT
    (56) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 124

    stmt_block                     shift and go to state 210

state 198

    (53) param_list_tail -> COMMA param_decl param_list_tail .

    RPAREN          reduce using rule 53 (param_list_tail -> COMMA param_decl param_list_tail .)


state 199

    (75) if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .

    AGENT           reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONNECT         reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEF             reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    FOR             reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IF              reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    WHILE           reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    IDENTIFIER      reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    BREAK           reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CONTINUE        reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    RETURN          reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    STRING          reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    NUMBER          reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    LBRACE          reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    $end            reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    INPUT           reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    OUTPUT          reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MEMORY          reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    MODEL           reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    CHAT            reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)
    DEDENT          reduce using rule 75 (if_stmt -> IF expr COLON stmt_block ELSE COLON stmt_block .)


state 200

    (12) var_decl -> IDENTIFIER COLON type EQUALS expr .

    IDENTIFIER      reduce using rule 12 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    DEDENT          reduce using rule 12 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    COMMA           reduce using rule 12 (var_decl -> IDENTIFIER COLON type EQUALS expr .)
    RPAREN          reduce using rule 12 (var_decl -> IDENTIFIER COLON type EQUALS expr .)


state 201

    (37) input_block -> INPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 211


state 202

    (38) output_block -> OUTPUT COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 212


state 203

    (39) memory_block -> MEMORY COLON INDENT var_decl_list . DEDENT

    DEDENT          shift and go to state 213


state 204

    (41) chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .

    INPUT           reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    OUTPUT          reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    MEMORY          reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    MODEL           reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    CHAT            reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    FOR             reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    IF              reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    WHILE           reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    IDENTIFIER      reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    BREAK           reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    CONTINUE        reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    RETURN          reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    STRING          reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    NUMBER          reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    LBRACE          reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)
    DEDENT          reduce using rule 41 (chat_block -> CHAT IDENTIFIER COLON TRIPLE_STRING .)


state 205

    (46) agent_ref -> IDENTIFIER agent_ref_tail .

    ARROW           reduce using rule 46 (agent_ref -> IDENTIFIER agent_ref_tail .)
    IDENTIFIER      reduce using rule 46 (agent_ref -> IDENTIFIER agent_ref_tail .)
    DEDENT          reduce using rule 46 (agent_ref -> IDENTIFIER agent_ref_tail .)


state 206

    (47) agent_ref_tail -> DOT . IDENTIFIER agent_ref_tail

    IDENTIFIER      shift and go to state 214


state 207

    (48) agent_ref_tail -> empty .

    ARROW           reduce using rule 48 (agent_ref_tail -> empty .)
    IDENTIFIER      reduce using rule 48 (agent_ref_tail -> empty .)
    DEDENT          reduce using rule 48 (agent_ref_tail -> empty .)


state 208

    (45) connection -> IDENTIFIER COLON type agent_ref ARROW . agent_ref
    (46) agent_ref -> . IDENTIFIER agent_ref_tail

    IDENTIFIER      shift and go to state 194

    agent_ref                      shift and go to state 215

state 209

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON . INDENT stmt_block DEDENT

    INDENT          shift and go to state 216


state 210

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block . DEDENT

    DEDENT          shift and go to state 217


state 211

    (37) input_block -> INPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MEMORY          reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    STRING          reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    NUMBER          reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    LBRACE          reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 37 (input_block -> INPUT COLON INDENT var_decl_list DEDENT .)


state 212

    (38) output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MEMORY          reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    STRING          reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    NUMBER          reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    LBRACE          reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 38 (output_block -> OUTPUT COLON INDENT var_decl_list DEDENT .)


state 213

    (39) memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .

    INPUT           reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    OUTPUT          reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    MEMORY          reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    MODEL           reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    CHAT            reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    FOR             reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    IF              reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    WHILE           reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    IDENTIFIER      reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    BREAK           reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    CONTINUE        reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    RETURN          reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    STRING          reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    NUMBER          reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    LBRACE          reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)
    DEDENT          reduce using rule 39 (memory_block -> MEMORY COLON INDENT var_decl_list DEDENT .)


state 214

    (47) agent_ref_tail -> DOT IDENTIFIER . agent_ref_tail
    (47) agent_ref_tail -> . DOT IDENTIFIER agent_ref_tail
    (48) agent_ref_tail -> . empty
    (117) empty -> .

    DOT             shift and go to state 206
    ARROW           reduce using rule 117 (empty -> .)
    IDENTIFIER      reduce using rule 117 (empty -> .)
    DEDENT          reduce using rule 117 (empty -> .)

    agent_ref_tail                 shift and go to state 218
    empty                          shift and go to state 207

state 215

    (45) connection -> IDENTIFIER COLON type agent_ref ARROW agent_ref .

    IDENTIFIER      reduce using rule 45 (connection -> IDENTIFIER COLON type agent_ref ARROW agent_ref .)
    DEDENT          reduce using rule 45 (connection -> IDENTIFIER COLON type agent_ref ARROW agent_ref .)


state 216

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT . stmt_block DEDENT
    (56) stmt_block -> . INDENT statement_list DEDENT

    INDENT          shift and go to state 124

    stmt_block                     shift and go to state 219

state 217

    (50) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .

    AGENT           reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    CONNECT         reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    DEF             reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    FOR             reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    IF              reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    WHILE           reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    IDENTIFIER      reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    BREAK           reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    CONTINUE        reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    RETURN          reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    STRING          reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    NUMBER          reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    LBRACE          reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)
    $end            reduce using rule 50 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON INDENT stmt_block DEDENT .)


state 218

    (47) agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .

    ARROW           reduce using rule 47 (agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .)
    IDENTIFIER      reduce using rule 47 (agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .)
    DEDENT          reduce using rule 47 (agent_ref_tail -> DOT IDENTIFIER agent_ref_tail .)


state 219

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block . DEDENT

    DEDENT          shift and go to state 220


state 220

    (49) func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .

    AGENT           reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    CONNECT         reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    DEF             reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    FOR             reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    IF              reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    WHILE           reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    IDENTIFIER      reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    BREAK           reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    CONTINUE        reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    RETURN          reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    STRING          reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    NUMBER          reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    LBRACE          reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)
    $end            reduce using rule 49 (func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON type COLON INDENT stmt_block DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 28 resolved as shift
WARNING: shift/reduce conflict for STRING in state 28 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 28 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 28 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (list_elements -> empty)
WARNING: rejected rule (record_elements -> empty) in state 68
WARNING: Rule (record_elements -> empty) is never reduced
